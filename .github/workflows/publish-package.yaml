name: Publish to npm, Tag and GH Release

on:
  push:
    branches:
      - main
    paths:
      - 'packages/core-sdk/package.json'

jobs:
  # Add  timestamp
  print_timestamp: 
    runs-on: ubuntu-latest
    steps:
      - name: Generate timestamp
        run: |
          echo "TIMESTAMP=$(TZ='America/Los_Angeles' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Print timestamp
        run: |
          echo "Execution time (Pacific Time Zone) $TIMESTAMP"

  print_version_to_publish:
    needs: [print_timestamp]
    runs-on: ubuntu-latest
    outputs:
      version_to_be_published: ${{ steps.get_version_to_publish.outputs.VERSION_TO_BE_PUBLISHED }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get version to publish
        id: get_version_to_publish
        run: |
          content=$(cat packages/core-sdk/package.json)
          echo "VERSION_TO_BE_PUBLISHED=$(echo $content | jq -r '.version')" >> $GITHUB_OUTPUT

  # Fetch the latest version from NPM
  fetch_latest_version:
    needs: [print_timestamp]
    runs-on: ubuntu-latest
    steps:
      - name: Get latest package version
        run: |
          LATEST_VERSION=$(npm view @story-protocol/core-sdk version)
          echo "Latest version of @story-protocol/core-sdk on NPMJS is $LATEST_VERSION"

  # TO-DO: check if pushed version is greater than the latest version on NPM

  build-test-publish:
    needs: [print_version_to_publish, fetch_latest_version]
    runs-on: ubuntu-latest
    environment: 'beta-sepolia'
    env:
      RPC_PROVIDER_URL: ${{ secrets.RPC_PROVIDER_URL }}
      WALLET_PRIVATE_KEY: ${{ secrets.WALLET_PRIVATE_KEY }}
      TEST_WALLET_ADDRESS: ${{ secrets.TEST_WALLET_ADDRESS }}
      SEPOLIA_RPC_PROVIDER_URL: ${{ secrets.SEPOLIA_RPC_PROVIDER_URL }}
      SEPOLIA_WALLET_PRIVATE_KEY: ${{ secrets.SEPOLIA_WALLET_PRIVATE_KEY }}
      SEPOLIA_TEST_WALLET_ADDRESS: ${{ secrets.SEPOLIA_TEST_WALLET_ADDRESS }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      
      - uses: pnpm/action-setup@d882d12c64e032187b2edb46d3a0d003b7a43598 # v2.4.0
        with:
          version: 8.8.0

      - name: Setup Node.js environment
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
        with:
          node-version: 20.0.0
          cache: pnpm
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

      - name: Publish to npm
        run: |
          cd packages/core-sdk
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Tag and Push
        run: |
          VERSION=${{ needs.print_version_to_publish.outputs.version_to_be_published }}
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag -a v$VERSION -m "Release v$VERSION"
          git push origin v$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.print_version_to_publish.outputs.version_to_be_published }}
          release_name: Release v${{ needs.print_version_to_publish.outputs.version_to_be_published }}
          body: Release of version v${{ needs.print_version_to_publish.outputs.version_to_be_published }}
          draft: false
          prerelease: false

{
  "stats": {
    "suites": 48,
    "tests": 138,
    "passes": 138,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-06T18:38:46.890Z",
    "end": "2025-08-06T19:09:54.526Z",
    "duration": 1867636,
    "testsRegistered": 138,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0547ff20-c2fd-425c-b00e-62a933e89b34",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "618b1dd4-01f2-4d77-91c1-6d96f3844164",
          "title": "Dispute Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
          "file": "/test/integration/dispute.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Dispute Functions\"",
              "fullTitle": "Dispute Functions \"before all\" hook in \"Dispute Functions\"",
              "timedOut": false,
              "duration": 9282,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientA = (0, util_1.getStoryClient)();\nconst derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nclientB = derivedClient.clientB;\nminimumBond = await (0, oov3_1.getMinimumBond)(util_1.publicClient, new generated_1.ArbitrationPolicyUmaClient(util_1.publicClient, util_1.walletClient), src_1.WIP_TOKEN_ADDRESS);\nconst txData = await clientA.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nconst nftContract = txData.spgNftContract;\nipIdB = (await clientB.ipAsset.mintAndRegisterIp({\n    spgNftContract: nftContract,\n})).ipId;",
              "err": {},
              "uuid": "a525315b-0e44-46b7-8c4a-fc45c63c5c34",
              "parentUUID": "618b1dd4-01f2-4d77-91c1-6d96f3844164",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should not cancel a dispute (yet)",
              "fullTitle": "Dispute Functions it should not cancel a dispute (yet)",
              "timedOut": false,
              "duration": 9211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const raiseResponse = await clientA.dispute.raiseDispute({\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 2592000,\n    bond: minimumBond,\n});\nawait (0, chai_1.expect)(clientA.dispute.cancelDispute({\n    disputeId: raiseResponse.disputeId,\n})).to.be.rejected;",
              "err": {},
              "uuid": "8a3b434b-8d0f-433f-ba5d-d2b7ed9ecfc8",
              "parentUUID": "618b1dd4-01f2-4d77-91c1-6d96f3844164",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1e7ed975-826a-4d28-a8e3-3b353e6e03f9",
              "title": "raiseDispute and counter dispute",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
              "file": "/test/integration/dispute.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should raise a dispute",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise a dispute",
                  "timedOut": false,
                  "duration": 9085,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const raiseDisputeRequest = {\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 2592000,\n    bond: minimumBond,\n};\nconst response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\ndisputeId = response.disputeId;",
                  "err": {},
                  "uuid": "3a3778ef-7068-4366-9c3c-0652f0a780c4",
                  "parentUUID": "1e7ed975-826a-4d28-a8e3-3b353e6e03f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate all enum values defined in DisputeTargetTag",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should validate all enum values defined in DisputeTargetTag",
                  "timedOut": false,
                  "duration": 240,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const tagHex = (0, viem_1.toHex)(tag, { size: 32 });\n    const { allowed } = await clientA.dispute.disputeModuleClient.isWhitelistedDisputeTag({\n        tag: tagHex,\n    });\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        (0, chai_1.expect)(allowed).equal(false);\n    }\n    else {\n        (0, chai_1.expect)(allowed).equal(true);\n    }\n}",
                  "err": {},
                  "uuid": "9a5c2eec-7721-47cc-8be4-1a4fd4510d76",
                  "parentUUID": "1e7ed975-826a-4d28-a8e3-3b353e6e03f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should raise disputes with different DisputeTargetTag enum values",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise disputes with different DisputeTargetTag enum values",
                  "timedOut": false,
                  "duration": 37080,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const raiseDisputeRequest = {\n        targetIpId: ipIdB,\n        cid: await generateCID(),\n        targetTag: tag,\n        liveness: 2592000,\n        bond: minimumBond,\n    };\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        await (0, chai_1.expect)(clientA.dispute.raiseDispute(raiseDisputeRequest)).to.be.rejectedWith(\"The target tag IN_DISPUTE is not whitelisted\");\n    }\n    else {\n        const response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n        (0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n        (0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\n    }\n}",
                  "err": {},
                  "uuid": "3a3d0abb-857b-496c-ae56-9ae63de0a966",
                  "parentUUID": "1e7ed975-826a-4d28-a8e3-3b353e6e03f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject a dispute with an invalid tag not defined in the enum",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should reject a dispute with an invalid tag not defined in the enum",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientA.dispute.raiseDispute({\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: \"INVALID_TAG\",\n    liveness: 2592000,\n    bond: minimumBond,\n})).to.be.rejectedWith(\"The target tag INVALID_TAG is not whitelisted\");",
                  "err": {},
                  "uuid": "907d33a1-2c06-4132-b388-6249ba764aa0",
                  "parentUUID": "1e7ed975-826a-4d28-a8e3-3b353e6e03f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to counter existing dispute once",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should be able to counter existing dispute once",
                  "timedOut": false,
                  "duration": 17923,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assertionId = await clientB.dispute.disputeIdToAssertionId(disputeId);\nconst counterEvidenceCID = await generateCID();\nconst ret = await clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n});\n(0, chai_1.expect)(ret.txHash).to.be.a(\"string\");\n// should throw error if attempting to dispute assertion again\nawait (0, chai_1.expect)(clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "624d3b5f-1e5d-403c-908c-07a2280d56a8",
                  "parentUUID": "1e7ed975-826a-4d28-a8e3-3b353e6e03f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a3778ef-7068-4366-9c3c-0652f0a780c4",
                "9a5c2eec-7721-47cc-8be4-1a4fd4510d76",
                "3a3d0abb-857b-496c-ae56-9ae63de0a966",
                "907d33a1-2c06-4132-b388-6249ba764aa0",
                "624d3b5f-1e5d-403c-908c-07a2280d56a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64547,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4a54a121-7330-49ea-9a37-fe049672238c",
              "title": "Dispute resolution",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
              "file": "/test/integration/dispute.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Dispute resolution\"",
                  "fullTitle": "Dispute Functions Dispute resolution \"before each\" hook in \"Dispute resolution\"",
                  "timedOut": false,
                  "duration": 30754,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup NFT collection\nconst txData = await clientA.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\n// Get parent IP ID and license terms ID\nconst ipIdAndLicenseResponse = await clientA.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContract,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: src_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: generated_1.evenSplitGroupPoolAddress[util_1.aeneid],\n            },\n        },\n    ],\n});\nparentIpId = ipIdAndLicenseResponse.ipId;\nlicenseTermsId = ipIdAndLicenseResponse.licenseTermsIds[0];\n//Create a derivative ip\nconst derivativeIpIdResponse1 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\nchildIpId = derivativeIpIdResponse1.ipId;\n// Create a second derivative ip\nconst derivativeIpIdResponse2 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\nchildIpId2 = derivativeIpIdResponse2.ipId;\n// Raise a dispute\nconst response = await clientA.dispute.raiseDispute({\n    targetIpId: parentIpId,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 1,\n    bond: minimumBond,\n});\ndisputeId = response.disputeId;\n// This timeout guarantees that the assertion is expired\n// its intended to be longer than the current block time\n// so it won't be included in the same block\nawait new Promise((resolve) => setTimeout(resolve, 3000));",
                  "err": {},
                  "uuid": "6402a9c1-dbdc-4198-a875-cc9371eba13b",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should tag infringing ip",
                  "fullTitle": "Dispute Functions Dispute resolution should tag infringing ip",
                  "timedOut": false,
                  "duration": 8846,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Tag derivative IP as infringing\nconst results = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: childIpId2,\n            disputeId: disputeId,\n        },\n    ],\n});\n(0, chai_1.expect)(results[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "88750ac4-9bea-42b4-a6f2-a22fb0434a22",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag a single IP as infringing without using multicall",
                  "fullTitle": "Dispute Functions Dispute resolution should tag a single IP as infringing without using multicall",
                  "timedOut": false,
                  "duration": 8875,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Test Flow:\n * 1. Set judgment on an existing dispute to mark it as valid (did in `before each` block)\n * 2. Verify the dispute state changed correctly after judgment\n * 3. Try to tag a derivative IP using the judged dispute\n */\n// Step 1: Set judgment on an existing dispute to mark it as valid\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Step 2: Verify dispute state\n// The disputes() function returns multiple values about the dispute:\n// - targetTag: the tag we wanted to apply when raising the dispute\n// - currentTag: the current state of the dispute after judgment\n// After a successful judgment, currentTag should equal targetTag\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag); // Verify judgment was recorded correctly\n// Step 3: Attempt to tag a derivative IP\n// This will fail if:\n// - The dispute is not in a valid state (still IN_DISPUTE or cleared)\n// - The IP we're trying to tag is not actually a derivative of the disputed IP\n// - The dispute has already been used to tag this IP\nconst response = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId, // The derivative IP to tag\n            disputeId: disputeId, // Using the judged dispute as basis for tagging\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: false, // Force single transaction instead of batch\n    },\n});\n// Verify we got the expected response\n(0, chai_1.expect)(response).to.have.lengthOf(1);\n(0, chai_1.expect)(response[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "099d973d-4f1a-488d-9904-89fc5cac532c",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag multiple IPs as infringing using multicall",
                  "fullTitle": "Dispute Functions Dispute resolution should tag multiple IPs as infringing using multicall",
                  "timedOut": false,
                  "duration": 25891,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const disputeResponse = await clientA.dispute.raiseDispute({\n    targetIpId: parentIpId,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 1,\n    bond: minimumBond,\n});\nconst testDisputeId = disputeResponse.disputeId;\nconst derivativeResponse2 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nconst newChildIpId = derivativeResponse2.ipId;\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, testDisputeId);\n// This timeout guarantees that the assertion is expired\n// its intended to be longer than the current block time\n// so it won't be included in the same block\nawait new Promise((resolve) => setTimeout(resolve, 3000));\nconst { currentTag, targetTag } = await getDisputeState(testDisputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst response = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: testDisputeId,\n        },\n        {\n            ipId: newChildIpId,\n            disputeId: testDisputeId,\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: true,\n    },\n});\n(0, chai_1.expect)(response).to.have.lengthOf(1);\n(0, chai_1.expect)(response[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "a6823de3-e31d-4045-af5b-3529fda1098b",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag multiple IPs without multicall when specified",
                  "fullTitle": "Dispute Functions Dispute resolution should tag multiple IPs without multicall when specified",
                  "timedOut": false,
                  "duration": 18981,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create two new derivative IPs sequentially\nconst derivativeResponse3 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nconst derivativeResponse4 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst responses = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: derivativeResponse3.ipId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: derivativeResponse4.ipId,\n            disputeId: disputeId,\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: false,\n    },\n});\n(0, chai_1.expect)(responses).to.have.lengthOf(2);\n(0, chai_1.expect)(responses[0].txHash).to.be.a(\"string\");\n(0, chai_1.expect)(responses[1].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "a6c28482-f351-470b-93b4-a3fce3918e67",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to tag with invalid dispute ID",
                  "fullTitle": "Dispute Functions Dispute resolution should fail when trying to tag with invalid dispute ID",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: 999999n,\n        },\n    ],\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "afe0c1a7-fb7e-4c65-a076-1ab9518215fb",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve a dispute successfully when initiated by dispute initiator",
                  "fullTitle": "Dispute Functions Dispute resolution should resolve a dispute successfully when initiated by dispute initiator",
                  "timedOut": false,
                  "duration": 8816,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst response = await clientA.dispute.resolveDispute({\n    disputeId: disputeId,\n    data: \"0x\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "3dfaf40e-0d0c-4cd6-82ab-a77e7344e85b",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when non-initiator tries to resolve the dispute",
                  "fullTitle": "Dispute Functions Dispute resolution should fail when non-initiator tries to resolve the dispute",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientB.dispute.resolveDispute({\n    disputeId: disputeId,\n    data: \"0x\",\n})).to.be.rejectedWith(\"NotDisputeInitiator\");",
                  "err": {},
                  "uuid": "7a803e2c-b798-4b9b-ad7b-f71966d2f5c9",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should propagate IMPROPER_REGISTRATION tag to derivative IPs",
                  "fullTitle": "Dispute Functions Dispute resolution should propagate IMPROPER_REGISTRATION tag to derivative IPs",
                  "timedOut": false,
                  "duration": 8894,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Verify the dispute state changed correctly\nconst { currentTag: parentCurrentTag, targetTag: parentTargetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(parentCurrentTag).to.equal(parentTargetTag);\n// Propagate the tag to both derivative IPs\nconst results = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: childIpId2,\n            disputeId: disputeId,\n        },\n    ],\n});\nconst logData = results[0].receipt?.logs[0].data;\nconst firstWord = logData.slice(0, 66);\nconst childDisputeId = BigInt(firstWord);\n// Verify successful tagging\n(0, chai_1.expect)(results[0].txHash).to.be.a(\"string\");\nconst { currentTag: childCurrentTag } = await getDisputeState(childDisputeId);\n// Convert the IMPROPER_USAGE tag to hex for comparison\nconst improperUsageTagHex = (0, viem_1.toHex)(src_1.DisputeTargetTag.IMPROPER_REGISTRATION, { size: 32 });\n// Verify both child IPs have the IMPROPER_USAGE tag by\n// fetching and comparing their dispute tags\n(0, chai_1.expect)(parentCurrentTag).to.equal(parentTargetTag);\n(0, chai_1.expect)(childCurrentTag).to.equal(improperUsageTagHex);",
                  "err": {},
                  "uuid": "b5bd8664-ee46-4574-8160-0819cd82500e",
                  "parentUUID": "4a54a121-7330-49ea-9a37-fe049672238c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88750ac4-9bea-42b4-a6f2-a22fb0434a22",
                "099d973d-4f1a-488d-9904-89fc5cac532c",
                "a6823de3-e31d-4045-af5b-3529fda1098b",
                "a6c28482-f351-470b-93b4-a3fce3918e67",
                "afe0c1a7-fb7e-4c65-a076-1ab9518215fb",
                "3dfaf40e-0d0c-4cd6-82ab-a77e7344e85b",
                "7a803e2c-b798-4b9b-ad7b-f71966d2f5c9",
                "b5bd8664-ee46-4574-8160-0819cd82500e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80399,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "8a3b434b-8d0f-433f-ba5d-d2b7ed9ecfc8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9211,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "35f563c7-2f1b-475d-b8e3-196a4ce34d3f",
          "title": "Group Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
          "file": "/test/integration/group.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Group Functions\"",
              "fullTitle": "Group Functions \"before all\" hook in \"Group Functions\"",
              "timedOut": false,
              "duration": 8474,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\n// Create NFT Collection\nspgNftContract = (await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n})).spgNftContract;",
              "err": {},
              "uuid": "7928064a-6204-4461-86cd-670cd0940835",
              "parentUUID": "35f563c7-2f1b-475d-b8e3-196a4ce34d3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d85a335a-1481-4721-b5fb-ba84ff95f153",
              "title": "Group Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
              "file": "/test/integration/group.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Group Operations\"",
                  "fullTitle": "Group Functions Group Operations \"before all\" hook in \"Group Operations\"",
                  "timedOut": false,
                  "duration": 9265,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create initial IP with license terms\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    allowDuplicates: false,\n    licenseTermsData,\n});\nlicenseTermsId = result.licenseTermsIds[0];\nipId = result.ipId;\n// Set licensing config\nawait client.license.setLicensingConfig({\n    ipId,\n    licenseTermsId,\n    licenseTemplate: generated_1.piLicenseTemplateAddress[util_1.aeneid],\n    licensingConfig: {\n        isSet: true,\n        mintingFee: 0n,\n        licensingHook: viem_1.zeroAddress,\n        hookData: viem_1.zeroAddress,\n        commercialRevShare: 0,\n        disabled: false,\n        expectMinimumGroupRewardShare: 0,\n        expectGroupRewardPool: groupPoolAddress,\n    },\n});",
                  "err": {},
                  "uuid": "279d596b-a7ff-46eb-b644-859f5a2418f3",
                  "parentUUID": "d85a335a-1481-4721-b5fb-ba84ff95f153",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully register group and attach license",
                  "fullTitle": "Group Functions Group Operations should successfully register group and attach license",
                  "timedOut": false,
                  "duration": 4414,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroupAndAttachLicense({\n    groupPool: groupPoolAddress,\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n});\ngroupId = result.groupId;\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "1c0231a1-471a-4432-92f0-6f867c29e11c",
                  "parentUUID": "d85a335a-1481-4721-b5fb-ba84ff95f153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully mint, register IP, attach license and add to group",
                  "fullTitle": "Group Functions Group Operations should successfully mint, register IP, attach license and add to group",
                  "timedOut": false,
                  "duration": 4509,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.mintAndRegisterIpAndAttachLicenseAndAddToGroup({\n    groupId,\n    spgNftContract,\n    licenseData: [\n        {\n            licenseTermsId,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: groupPoolAddress,\n            },\n        },\n    ],\n    maxAllowedRewardShare: 5,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "ff53a7e7-817b-4d6e-8c16-723766b7ee95",
                  "parentUUID": "d85a335a-1481-4721-b5fb-ba84ff95f153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register a basic group",
                  "fullTitle": "Group Functions Group Operations should successfully register a basic group",
                  "timedOut": false,
                  "duration": 4384,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroup({\n    groupPool: groupPoolAddress,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "8cd37c5d-8cde-4ada-9f1d-a625d9e48496",
                  "parentUUID": "d85a335a-1481-4721-b5fb-ba84ff95f153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register existing IP with license and add to group",
                  "fullTitle": "Group Functions Group Operations should successfully register existing IP with license and add to group",
                  "timedOut": false,
                  "duration": 8990,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(spgNftContract, \"test-metadata\");\nconst result = await client.groupClient.registerIpAndAttachLicenseAndAddToGroup({\n    groupId,\n    nftContract: spgNftContract,\n    tokenId,\n    maxAllowedRewardShare: 5,\n    licenseData: [\n        {\n            licenseTermsId,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: groupPoolAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "50a6ff2f-faad-410b-a5c6-611ae7c911a9",
                  "parentUUID": "d85a335a-1481-4721-b5fb-ba84ff95f153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register group with license and add multiple IPs",
                  "fullTitle": "Group Functions Group Operations should successfully register group with license and add multiple IPs",
                  "timedOut": false,
                  "duration": 8563,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroupAndAttachLicenseAndAddIps({\n    groupPool: groupPoolAddress,\n    maxAllowedRewardShare: 5,\n    ipIds: [ipId],\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "ac8b0d6b-d1a1-4edd-aa4f-06cd7a71e87c",
                  "parentUUID": "d85a335a-1481-4721-b5fb-ba84ff95f153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to add unregistered IP to group",
                  "fullTitle": "Group Functions Group Operations should fail when trying to add unregistered IP to group",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.groupClient.registerGroupAndAttachLicenseAndAddIps({\n    groupPool: groupPoolAddress,\n    maxAllowedRewardShare: 5,\n    ipIds: [viem_1.zeroAddress], // Invalid IP address\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n})).to.be.rejectedWith(\"Failed to register group and attach license and add ips\");",
                  "err": {},
                  "uuid": "00a5674e-2cef-40dd-bff7-eb08426f173c",
                  "parentUUID": "d85a335a-1481-4721-b5fb-ba84ff95f153",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "765380a1-721b-4113-9f49-01f3fb704e34",
                  "title": "Add IPs to Group and Remove IPs from Group",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
                  "file": "/test/integration/group.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully add multiple IPs to group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should successfully add multiple IPs to group",
                      "timedOut": false,
                      "duration": 13768,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const registerResult = await client.ipAsset.batchMintAndRegisterIpAssetWithPilTerms({\n    args: [\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n    ],\n});\nipIds = registerResult.results?.map((result) => result.ipId) ?? [];\nconst result = await client.groupClient.addIpsToGroup({\n    groupIpId: groupId,\n    ipIds: ipIds,\n    maxAllowedRewardSharePercentage: 5,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "fd7e3d18-5fc7-4e7e-b183-469f6ec34500",
                      "parentUUID": "765380a1-721b-4113-9f49-01f3fb704e34",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully remove IPs from group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should successfully remove IPs from group",
                      "timedOut": false,
                      "duration": 4408,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.groupClient.removeIpsFromGroup({\n    groupIpId: groupId,\n    ipIds: ipIds,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "22897fd5-4d13-429b-9bbd-9c139e680082",
                      "parentUUID": "765380a1-721b-4113-9f49-01f3fb704e34",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to remove IPs from a non-existent group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should fail when trying to remove IPs from a non-existent group",
                      "timedOut": false,
                      "duration": 4805,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const registerResult = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData,\n});\nconst testIpId = registerResult.ipId;\nconst nonExistentGroupId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.removeIpsFromGroup({\n    groupIpId: nonExistentGroupId,\n    ipIds: [testIpId],\n})).to.be.rejectedWith(\"Failed to remove IPs from group\");",
                      "err": {},
                      "uuid": "f9de5f09-0759-4eff-8bb0-bde3edb61e9e",
                      "parentUUID": "765380a1-721b-4113-9f49-01f3fb704e34",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to remove non-existent IPs from a group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should fail when trying to remove non-existent IPs from a group",
                      "timedOut": false,
                      "duration": 4482,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const groupResult = await client.groupClient.registerGroup({\n    groupPool: groupPoolAddress,\n});\nconst testGroupId = groupResult.groupId;\nconst nonExistentIpId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.removeIpsFromGroup({\n    groupIpId: testGroupId,\n    ipIds: [nonExistentIpId],\n})).to.be.rejectedWith(\"Failed to remove IPs from group\");",
                      "err": {},
                      "uuid": "4594900c-d581-4705-a335-ca618c084745",
                      "parentUUID": "765380a1-721b-4113-9f49-01f3fb704e34",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fd7e3d18-5fc7-4e7e-b183-469f6ec34500",
                    "22897fd5-4d13-429b-9bbd-9c139e680082",
                    "f9de5f09-0759-4eff-8bb0-bde3edb61e9e",
                    "4594900c-d581-4705-a335-ca618c084745"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 27463,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "1c0231a1-471a-4432-92f0-6f867c29e11c",
                "ff53a7e7-817b-4d6e-8c16-723766b7ee95",
                "8cd37c5d-8cde-4ada-9f1d-a625d9e48496",
                "50a6ff2f-faad-410b-a5c6-611ae7c911a9",
                "ac8b0d6b-d1a1-4edd-aa4f-06cd7a71e87c",
                "00a5674e-2cef-40dd-bff7-eb08426f173c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30904,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
              "title": "Collect Royalty and Claim Reward",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
              "file": "/test/integration/group.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Collect Royalty and Claim Reward\"",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward \"before all\" hook in \"Collect Royalty and Claim Reward\"",
                  "timedOut": false,
                  "duration": 13324,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Register IP id\nconst result1 = await mintAndRegisterIpAssetWithPilTermsHelper();\nipId = result1.ipId;\nlicenseTermsId = result1.licenseTermsIds[0];\n// Register group id\ngroupIpId = await registerGroupAndAttachLicenseHelper(licenseTermsId, [ipId]);",
                  "err": {},
                  "uuid": "7463e250-71bf-4eb2-b0d3-81ff54608658",
                  "parentUUID": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully collect royalties",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully collect royalties",
                  "timedOut": false,
                  "duration": 18148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mint and register child IP id\nconst childIpId = await mintAndRegisterIpAndMakeDerivativeHelper(groupIpId, licenseTermsId);\n// Pay royalties from child IP id to group IP id and transfer to vault\nawait payRoyaltyAndTransferToVaultHelper(childIpId, groupIpId, src_1.WIP_TOKEN_ADDRESS, 100n);\n// Collect royalties\nconst result = await client.groupClient.collectRoyalties({\n    groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.collectedRoyalties).to.equal(10n);",
                  "err": {},
                  "uuid": "d920f387-e98f-48b6-9847-d959b60330f8",
                  "parentUUID": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get claimable reward",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully get claimable reward",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.getClaimableReward({\n    groupIpId: groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n});\n(0, chai_1.expect)(result).to.deep.equal([10n]);",
                  "err": {},
                  "uuid": "7f04016b-897b-4244-8ab2-37992b66e908",
                  "parentUUID": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully claim reward",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully claim reward",
                  "timedOut": false,
                  "duration": 9046,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mint license tokens to the IP id which doesn't have a royalty vault\nawait client.license.mintLicenseTokens({\n    licensorIpId: ipId,\n    licenseTermsId,\n    amount: 100,\n    maxMintingFee: 1,\n    maxRevenueShare: 100,\n});\n// Claim reward\nconst result = await client.groupClient.claimReward({\n    groupIpId: groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.claimedReward?.[0].amount[0]).to.equal(10n);",
                  "err": {},
                  "uuid": "c0ab1063-247c-4264-9d8d-78f2e8ff8893",
                  "parentUUID": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to claim reward for a non-existent group",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should fail when trying to claim reward for a non-existent group",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nonExistentGroupId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.claimReward({\n    groupIpId: nonExistentGroupId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n})).to.be.rejectedWith(\"Failed to claim reward\");",
                  "err": {},
                  "uuid": "e5c59b92-dad4-46d2-8311-60ddf694b160",
                  "parentUUID": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to claim reward with invalid token address",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should fail when trying to claim reward with invalid token address",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidTokenAddress = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.claimReward({\n    groupIpId: groupIpId,\n    currencyToken: invalidTokenAddress,\n    memberIpIds: [ipId],\n})).to.be.rejectedWith(\"Failed to claim reward\");",
                  "err": {},
                  "uuid": "aaac5e50-c209-4538-9acf-b9250731eae0",
                  "parentUUID": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully collect royalties and claim reward in one transaction",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully collect royalties and claim reward in one transaction",
                  "timedOut": false,
                  "duration": 50214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ipIds = [];\nconst result1 = await mintAndRegisterIpAssetWithPilTermsHelper();\nconst result2 = await mintAndRegisterIpAssetWithPilTermsHelper();\nipIds.push(result1.ipId);\nipIds.push(result2.ipId);\nlicenseTermsId = result1.licenseTermsIds[0];\nconst groupId = await registerGroupAndAttachLicenseHelper(licenseTermsId, ipIds);\nconst childIpId1 = await mintAndRegisterIpAndMakeDerivativeHelper(groupId, licenseTermsId);\nconst childIpId2 = await mintAndRegisterIpAndMakeDerivativeHelper(groupId, licenseTermsId);\nawait payRoyaltyAndTransferToVaultHelper(childIpId1, groupId, src_1.WIP_TOKEN_ADDRESS, 100n);\nawait payRoyaltyAndTransferToVaultHelper(childIpId2, groupId, src_1.WIP_TOKEN_ADDRESS, 100n);\nconst result = await client.groupClient.collectAndDistributeGroupRoyalties({\n    groupIpId: groupId,\n    currencyTokens: [src_1.WIP_TOKEN_ADDRESS],\n    memberIpIds: ipIds,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.collectedRoyalties?.[0].amount).to.equal(20n);\n(0, chai_1.expect)(result.royaltiesDistributed?.[0].amount).to.equal(10n);\n(0, chai_1.expect)(result.royaltiesDistributed?.[1].amount).to.equal(10n);",
                  "err": {},
                  "uuid": "d8f25d24-69a5-4639-ba8e-f9afd0f01041",
                  "parentUUID": "c9a6e504-25df-43f3-934c-c087b6fb0a64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d920f387-e98f-48b6-9847-d959b60330f8",
                "7f04016b-897b-4244-8ab2-37992b66e908",
                "c0ab1063-247c-4264-9d8d-78f2e8ff8893",
                "e5c59b92-dad4-46d2-8311-60ddf694b160",
                "aaac5e50-c209-4538-9acf-b9250731eae0",
                "d8f25d24-69a5-4639-ba8e-f9afd0f01041"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77533,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6a16d599-a3d2-4fc6-a1c7-a76d35a5e591",
          "title": "IPAccount Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
          "file": "/test/integration/ipAccount.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"IPAccount Functions\"",
              "fullTitle": "IPAccount Functions \"before all\" hook in \"IPAccount Functions\"",
              "timedOut": false,
              "duration": 10248,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = registerResult.ipId;\ndata = (0, viem_1.encodeFunctionData)({\n    abi: generated_1.accessControllerAbi,\n    functionName: \"setTransientPermission\",\n    args: [\n        (0, viem_1.getAddress)(ipId),\n        (0, viem_1.getAddress)(util_1.TEST_WALLET_ADDRESS),\n        (0, viem_1.getAddress)(coreMetadataModule),\n        (0, viem_1.toFunctionSelector)(\"function setAll(address,string,bytes32,bytes32)\"),\n        src_1.AccessPermission.ALLOW,\n    ],\n});",
              "err": {},
              "uuid": "53c4ee46-c0ff-488c-ab46-7981cb4f157d",
              "parentUUID": "6a16d599-a3d2-4fc6-a1c7-a76d35a5e591",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully set ip metadata",
              "fullTitle": "IPAccount Functions should successfully set ip metadata",
              "timedOut": false,
              "duration": 4513,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const txHash = await client.ipAccount.setIpMetadata({\n    ipId: ipId,\n    metadataURI: \"https://example.com\",\n    metadataHash: (0, viem_1.toHex)(\"test\", { size: 32 }),\n});\n(0, chai_1.expect)(txHash).to.be.a(\"string\");",
              "err": {},
              "uuid": "88d45a72-1995-4602-a7a3-e21ed09798c2",
              "parentUUID": "6a16d599-a3d2-4fc6-a1c7-a76d35a5e591",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully transfer ERC20 tokens",
              "fullTitle": "IPAccount Functions should successfully transfer ERC20 tokens",
              "timedOut": false,
              "duration": 22238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const erc20 = new generated_1.Erc20Client(util_1.publicClient, util_1.walletClient);\n// 1. Query token balance of ipId and wallet before\nconst initialErc20BalanceOfIpId = await erc20.balanceOf({\n    account: ipId,\n});\nconst initialErc20BalanceOfWallet = await erc20.balanceOf({\n    account: util_1.TEST_WALLET_ADDRESS,\n});\nconst initialWipBalanceOfIpId = await client.wipClient.balanceOf(ipId);\nconst initialWipBalanceOfWallet = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n// 2. transfer erc20 token to the ip account\nconst txHash = await erc20.mint({\n    to: ipId,\n    amount: (0, viem_1.parseEther)(\"0.002\"),\n});\nawait util_1.publicClient.waitForTransactionReceipt({\n    hash: txHash,\n});\n// 3. transfer wip to the ip account\nawait client.wipClient.deposit({\n    amount: 1n,\n});\nawait client.wipClient.transfer({\n    to: ipId,\n    amount: 1n,\n});\n// 4. transfer token of ip account to wallet address\nconst ret = await client.ipAccount.transferErc20({\n    ipId,\n    tokens: [\n        {\n            address: src_1.WIP_TOKEN_ADDRESS,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: 1n,\n        },\n        {\n            address: erc20.address,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: (0, viem_1.parseEther)(\"0.001\"),\n        },\n        {\n            address: erc20.address,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: (0, viem_1.parseEther)(\"0.001\"),\n        },\n    ],\n});\n// 5. query token balance of ipId and wallet address after\nconst finalErc20BalanceOfIpId = await erc20.balanceOf({\n    account: ipId,\n});\nconst finalWipBalanceOfIpId = await client.wipClient.balanceOf(ipId);\nconst finalErc20BalanceOfWallet = await erc20.balanceOf({\n    account: util_1.TEST_WALLET_ADDRESS,\n});\nconst finalWipBalanceOfWallet = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(ret.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(finalErc20BalanceOfIpId).to.equal(initialErc20BalanceOfIpId);\n(0, chai_1.expect)(finalWipBalanceOfIpId).to.equal(initialWipBalanceOfIpId);\n(0, chai_1.expect)(finalErc20BalanceOfWallet).to.equal(initialErc20BalanceOfWallet + (0, viem_1.parseEther)(\"0.002\"));\n(0, chai_1.expect)(finalWipBalanceOfWallet).to.equal(initialWipBalanceOfWallet + 1n);",
              "err": {},
              "uuid": "bfe4746a-e804-4cd8-902e-dd326688e088",
              "parentUUID": "6a16d599-a3d2-4fc6-a1c7-a76d35a5e591",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0960c954-cb98-48f4-853c-991c235856df",
              "title": "execute",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully execute a transaction",
                  "fullTitle": "IPAccount Functions execute should successfully execute a transaction",
                  "timedOut": false,
                  "duration": 4410,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.execute({\n    to: permissionAddress,\n    value: 0,\n    data: data,\n    ipId: ipId,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "5ad7f19a-7d0b-4673-aaae-b77ae20f288c",
                  "parentUUID": "0960c954-cb98-48f4-853c-991c235856df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions execute should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.execute({\n    to: permissionAddress,\n    value: 0,\n    data: data,\n    ipId: \"0x0000000000000000000000000000000000000000\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "f2ab9d89-34bf-4f5d-a32a-169cb46d036e",
                  "parentUUID": "0960c954-cb98-48f4-853c-991c235856df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ad7f19a-7d0b-4673-aaae-b77ae20f288c",
                "f2ab9d89-34bf-4f5d-a32a-169cb46d036e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4459,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b984a153-6d33-459f-a0e4-3e4f7ad91e09",
              "title": "executeWithSig",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail with expired deadline",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with expired deadline",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: EXPIRED_DEADLINE,\n    signature: \"0x\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "7bb67826-efc4-4c7c-b9e6-046352482c09",
                  "parentUUID": "b984a153-6d33-459f-a0e4-3e4f7ad91e09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bb67826-efc4-4c7c-b9e6-046352482c09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "316c8b9b-2a97-426b-92ca-51f8427e4835",
              "title": "getIpAccountNonce",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully return account nonce",
                  "fullTitle": "IPAccount Functions getIpAccountNonce should successfully return account nonce",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.getIpAccountNonce(ipId);\n(0, chai_1.expect)(response).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "09c95113-501e-455a-af6e-8fd5e845cdcb",
                  "parentUUID": "316c8b9b-2a97-426b-92ca-51f8427e4835",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions getIpAccountNonce should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.getIpAccountNonce(\"0x0000000000000000000000000000000000000000\"))\n    .to.be.rejected;",
                  "err": {},
                  "uuid": "4f19d210-3f6f-4e12-8abd-6bc8a036588b",
                  "parentUUID": "316c8b9b-2a97-426b-92ca-51f8427e4835",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09c95113-501e-455a-af6e-8fd5e845cdcb",
                "4f19d210-3f6f-4e12-8abd-6bc8a036588b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b589239a-f3b3-4666-98eb-852fc5b168f5",
              "title": "getToken",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully return token information",
                  "fullTitle": "IPAccount Functions getToken should successfully return token information",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.getToken(ipId);\n(0, chai_1.expect)(response.chainId).to.be.a(\"bigint\");\n(0, chai_1.expect)(response.tokenContract).to.be.a(\"string\");\n(0, chai_1.expect)(response.tokenId).to.be.a(\"bigint\");\n(0, chai_1.expect)(response.tokenContract).to.equal(util_1.mockERC721);",
                  "err": {},
                  "uuid": "1889a166-5f3b-4d01-9129-b408498b2856",
                  "parentUUID": "b589239a-f3b3-4666-98eb-852fc5b168f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions getToken should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.getToken(\"0x0000000000000000000000000000000000000000\")).to.be\n    .rejected;",
                  "err": {},
                  "uuid": "a75dbcec-e00c-4973-b26c-2a65c395ab87",
                  "parentUUID": "b589239a-f3b3-4666-98eb-852fc5b168f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1889a166-5f3b-4d01-9129-b408498b2856",
                "a75dbcec-e00c-4973-b26c-2a65c395ab87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 72,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "88d45a72-1995-4602-a7a3-e21ed09798c2",
            "bfe4746a-e804-4cd8-902e-dd326688e088"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26751,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b921d1ae-54c3-435b-9456-73e2e5981c58",
          "title": "IP Asset Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
          "file": "/test/integration/ipAsset.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"IP Asset Functions\"",
              "fullTitle": "IP Asset Functions \"before all\" hook in \"IP Asset Functions\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst res = await client.license.registerNonComSocialRemixingPIL();\nnoCommercialLicenseTermsId = res.licenseTermsId;",
              "err": {},
              "uuid": "9cd1354b-1d5a-4eea-b930-d3e3f69a9131",
              "parentUUID": "b921d1ae-54c3-435b-9456-73e2e5981c58",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
              "title": "Basic IP Asset Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register an IP Asset",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register an IP Asset",
                  "timedOut": false,
                  "duration": 8951,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nchildIpId = response.ipId;\n(0, chai_1.expect)(childIpId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "307ae0dc-b249-4f32-a7cc-caf8d27f8ebe",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register an IP Asset with multiple metadata fields",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register an IP Asset with multiple metadata fields",
                  "timedOut": false,
                  "duration": 13109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    ipMetadata: {\n        ipMetadataURI: \"ipfs://test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataURI: \"ipfs://test-nft-uri\",\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\nchildIpId2 = response.ipId;\n(0, chai_1.expect)(response.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(response.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "47b12c46-49d3-47e3-8436-d0410f8e429a",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register with invalid metadata hash length",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should not register with invalid metadata hash length",
                  "timedOut": false,
                  "duration": 4646,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    ipMetadata: {\n        ipMetadataHash: \"0x123\", // Invalid length hash\n        nftMetadataHash: (0, viem_1.toHex)(\"valid-hash\", { size: 32 }),\n    },\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "c33decff-4f86-4425-ad30-6d5fbfe71a0f",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register with non-existent token ID",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should not register with non-existent token ID",
                  "timedOut": false,
                  "duration": 145,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: BigInt(Number.MAX_SAFE_INTEGER),\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "1dad8f60-9fc4-4868-894c-f5ff06c1a5b2",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with Non-Commercial Remix PIL",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with Non-Commercial Remix PIL",
                  "timedOut": false,
                  "duration": 18513,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nparentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: childIpId,\n    parentIpIds: [parentIpId],\n    licenseTermsIds: [noCommercialLicenseTermsId],\n    maxMintingFee: 0n,\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"0\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "f83cb007-a4da-4bca-a88b-e693919ee1ca",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with Commercial Remix PIL",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with Commercial Remix PIL",
                  "timedOut": false,
                  "duration": 22440,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Register commercial remix PIL\nconst licenseResponse = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 10n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n// Register parent IP\nconst tokenId = await (0, util_1.getTokenId)();\nconst commercialParentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\n// Attach license terms to parent IP\nawait client.license.attachLicenseTerms({\n    ipId: commercialParentIpId,\n    licenseTermsId: licenseResponse.licenseTermsId,\n});\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: childIpId2,\n    parentIpIds: [commercialParentIpId],\n    licenseTermsIds: [licenseResponse.licenseTermsId],\n    maxMintingFee: 100n,\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "ca5bade7-ad16-4725-859a-3f5c9150e601",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with multiple parent IPs",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with multiple parent IPs",
                  "timedOut": false,
                  "duration": 45040,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create first parent IP\nconst tokenId1 = await (0, util_1.getTokenId)();\nconst parentIpId1 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId1,\n})).ipId;\n// Create second parent IP\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst parentIpId2 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId2,\n})).ipId;\n// Attach license terms to both parents\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId1,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId2,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\n// Create child IP\nconst childTokenId = await (0, util_1.getTokenId)();\nconst newChildIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId,\n})).ipId;\n// Register derivative with multiple parents\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: newChildIpId,\n    parentIpIds: [parentIpId1, parentIpId2],\n    licenseTermsIds: [noCommercialLicenseTermsId, noCommercialLicenseTermsId],\n    maxMintingFee: 0n,\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"0\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "3abb7cf8-7bff-4b55-b013-438de62a77ae",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with license tokens",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with license tokens",
                  "timedOut": false,
                  "duration": 18330,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst ipId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nconst mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: noCommercialLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 1,\n});\nconst response = await client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d5a3600b-3dc8-4173-a6a9-c942cbe5c15c",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if IP asset is registered",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should return true if IP asset is registered",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isRegistered = await client.ipAsset.isRegistered(parentIpId);\n(0, chai_1.expect)(isRegistered).to.equal(true);",
                  "err": {},
                  "uuid": "6dc6e206-1f36-4d38-9878-1fc2c69c3508",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if IP asset is not registered",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should return false if IP asset is not registered",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isRegistered = await client.ipAsset.isRegistered(\"0x1234567890123456789012345678901234567890\");\n(0, chai_1.expect)(isRegistered).to.equal(false);",
                  "err": {},
                  "uuid": "00375d34-e77a-459e-94f2-fe0d92c5a9c9",
                  "parentUUID": "da80f3a1-ae53-4ad9-8a90-9e7fcd701674",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "307ae0dc-b249-4f32-a7cc-caf8d27f8ebe",
                "47b12c46-49d3-47e3-8436-d0410f8e429a",
                "c33decff-4f86-4425-ad30-6d5fbfe71a0f",
                "1dad8f60-9fc4-4868-894c-f5ff06c1a5b2",
                "f83cb007-a4da-4bca-a88b-e693919ee1ca",
                "ca5bade7-ad16-4725-859a-3f5c9150e601",
                "3abb7cf8-7bff-4b55-b013-438de62a77ae",
                "d5a3600b-3dc8-4173-a6a9-c942cbe5c15c",
                "6dc6e206-1f36-4d38-9878-1fc2c69c3508",
                "00375d34-e77a-459e-94f2-fe0d92c5a9c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131251,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "49853d87-2059-4c60-a04c-89038e039685",
              "title": "SPG NFT Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"SPG NFT Operations\"",
                  "fullTitle": "IP Asset Functions SPG NFT Operations \"before all\" hook in \"SPG NFT Operations\"",
                  "timedOut": false,
                  "duration": 10218,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup NFT collection\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\n// Setup license terms\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContract,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];\n// Setup ERC20\nconst mockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\nawait mockERC20.approve(generated_1.derivativeWorkflowsAddress[util_1.aeneid], viem_1.maxUint256);\nawait mockERC20.approve(generated_1.royaltyTokenDistributionWorkflowsAddress[util_1.aeneid], viem_1.maxUint256);\nawait mockERC20.mint(util_1.TEST_WALLET_ADDRESS, 100000n);",
                  "err": {},
                  "uuid": "0766a0f8-682f-4537-aa32-be078d2e2873",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register IP Asset with metadata",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP Asset with metadata",
                  "timedOut": false,
                  "duration": 8988,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst response = await client.ipAsset.register({\n    nftContract,\n    tokenId,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(response.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "395293a7-1f25-447e-8054-aa3201efd70d",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative IP",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register derivative IP",
                  "timedOut": false,
                  "duration": 9380,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenChildId = await (0, util_1.mintBySpg)(nftContract);\nconst result = await client.ipAsset.registerDerivativeIp({\n    nftContract: nftContract,\n    tokenId: tokenChildId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: \"0\",\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "396c122c-a6a8-463b-91c7-c8f3885eb823",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach PIL terms",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach PIL terms",
                  "timedOut": false,
                  "duration": 9508,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: nftContract,\n    tokenId,\n    deadline: 1000n,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 10000n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "5ffd2a17-de47-4e25-88b9-870c9457a009",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach PIL terms with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach PIL terms with license terms max limit",
                  "timedOut": false,
                  "duration": 9743,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 10000n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                  "err": {},
                  "uuid": "3d5f9dc6-df76-4973-a5d6-dc4dbc253d28",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and make derivative",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and make derivative",
                  "timedOut": false,
                  "duration": 4889,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "bc45e9aa-c3ec-4178-9956-d9bc3ead0973",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP",
                  "timedOut": false,
                  "duration": 4499,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: nftContract,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    allowDuplicates: false,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "4576b2c1-507a-460f-9590-71f77c86786e",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register PIL terms and attach",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register PIL terms and attach",
                  "timedOut": false,
                  "duration": 4671,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.registerPilTermsAndAttach({\n    ipId: parentIpId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "3ed78583-a7cb-43e7-9318-0f09250a0e6f",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register PIL terms and attach with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register PIL terms and attach with license terms max limit",
                  "timedOut": false,
                  "duration": 5397,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.registerPilTermsAndAttach({\n    ipId: parentIpId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "2dae2438-e111-4398-9322-b515714b3207",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 18066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], mintLicenseTokensResult.licenseTokenIds[0]);\nconst result = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: nftContract,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "e800c358-d74b-4c20-8002-81fc98ddd615",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 18198,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], mintLicenseTokensResult.licenseTokenIds[0]);\nconst result = await client.ipAsset.registerIpAndMakeDerivativeWithLicenseTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "a3028235-7631-42a0-b518-55832bd011ba",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 13889,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 1,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "89662da2-caa4-4361-b813-5b091a0ebe79",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens with license terms max limit",
                  "timedOut": false,
                  "duration": 19163,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 1,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "31c6b622-67ec-41f8-adf7-1ce5545211d7",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens with complex royalty shares",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens with complex royalty shares",
                  "timedOut": false,
                  "duration": 13916,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: generated_1.erc20Address[util_1.aeneid],\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 43,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 17,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 2,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 38,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "41c887f3-2dbd-4ece-8ecc-5ff7c98b995b",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative and attach license terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register derivative and attach license terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 17940,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: \"0\",\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "0a4c3d4b-d51a-4eab-95d9-800bea5f62f6",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and attach PIL terms and distribute royalty tokens without licensing config",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and attach PIL terms and distribute royalty tokens without licensing config",
                  "timedOut": false,
                  "duration": 4894,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: nftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "91aaa454-4e96-4c82-b0a9-edeccc6cb075",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and attach PIL terms and distribute royalty tokens with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and attach PIL terms and distribute royalty tokens with license terms max limit",
                  "timedOut": false,
                  "duration": 5464,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: nftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            maxLicenseTokens: 100,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 11n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                  "err": {},
                  "uuid": "144eec40-e3ad-4eed-a063-7ab1eff1bad3",
                  "parentUUID": "49853d87-2059-4c60-a04c-89038e039685",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "395293a7-1f25-447e-8054-aa3201efd70d",
                "396c122c-a6a8-463b-91c7-c8f3885eb823",
                "5ffd2a17-de47-4e25-88b9-870c9457a009",
                "3d5f9dc6-df76-4973-a5d6-dc4dbc253d28",
                "bc45e9aa-c3ec-4178-9956-d9bc3ead0973",
                "4576b2c1-507a-460f-9590-71f77c86786e",
                "3ed78583-a7cb-43e7-9318-0f09250a0e6f",
                "2dae2438-e111-4398-9322-b515714b3207",
                "e800c358-d74b-4c20-8002-81fc98ddd615",
                "a3028235-7631-42a0-b518-55832bd011ba",
                "89662da2-caa4-4361-b813-5b091a0ebe79",
                "31c6b622-67ec-41f8-adf7-1ce5545211d7",
                "41c887f3-2dbd-4ece-8ecc-5ff7c98b995b",
                "0a4c3d4b-d51a-4eab-95d9-800bea5f62f6",
                "91aaa454-4e96-4c82-b0a9-edeccc6cb075",
                "144eec40-e3ad-4eed-a063-7ab1eff1bad3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 168605,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "467059fd-8592-4925-96e7-3dd86100e2b4",
              "title": "SPG With Minting Fees with Public Minting SPG NFT Contract",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"SPG With Minting Fees with Public Minting SPG NFT Contract\"",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract \"before all\" hook in \"SPG With Minting Fees with Public Minting SPG NFT Contract\"",
                  "timedOut": false,
                  "duration": 13942,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// ensure we start with no wip since we will be wrapping them\nconst wipBalance = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nif (wipBalance > 0n) {\n    await client.wipClient.withdraw({\n        amount: wipBalance,\n    });\n}\n// create a nft collection that requires minting fee\nconst rsp = await client.nftClient.createNFTCollection({\n    name: \"Premium Collection\",\n    symbol: \"PC\",\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n    mintFee: 100n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n});\nnftContractWithMintingFee = rsp.spgNftContract;\n// create parent ip with minting fee\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContractWithMintingFee,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 150n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: true,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: BigInt(0),\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: BigInt(0),\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 150n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "bed6adaa-54cb-4c0a-9571-5a7bf4e1896a",
                  "parentUUID": "467059fd-8592-4925-96e7-3dd86100e2b4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should auto wrap ip when mint and register derivative",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative",
                  "timedOut": false,
                  "duration": 5236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalanceBefore = await client.getWalletBalance();\nconst rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContractWithMintingFee, // pay 100 here\n    derivData: {\n        parentIpIds: [parentIpId], // pay 150 here\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst userBalanceAfter = await client.getWalletBalance();\nconst cost = 150n + 100n;\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - cost));\n// user should not have any WIP tokens since we swap the exact amount\nconst wipBalance = await client.ipAsset.wipClient.balanceOf({\n    owner: util_1.TEST_WALLET_ADDRESS,\n});\n(0, chai_1.expect)(wipBalance.result).to.be.equal(0n);",
                  "err": {},
                  "uuid": "fcbdffb1-423c-4a33-8f9d-30383e146c51",
                  "parentUUID": "467059fd-8592-4925-96e7-3dd86100e2b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when mint and register derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative with license tokens",
                  "timedOut": false,
                  "duration": 26766,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { licenseTokenIds } = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenIds[0]);\n(0, chai_1.expect)(licenseTokenIds).to.be.an(\"array\");\nconst { txHash, ipId } = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: nftContractWithMintingFee,\n    licenseTokenIds: licenseTokenIds,\n    maxRts: common_1.MAX_ROYALTY_TOKEN,\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n});\n(0, chai_1.expect)(txHash).to.be.a(\"string\");\n(0, chai_1.expect)(ipId).to.be.a(\"string\");\nconst isRegistered = await client.ipAsset.isRegistered(ipId);\n(0, chai_1.expect)(isRegistered).to.equal(true);",
                  "err": {},
                  "uuid": "f6749bf6-c0a6-439d-ad46-7fb1919725f1",
                  "parentUUID": "467059fd-8592-4925-96e7-3dd86100e2b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when registering derivative",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when registering derivative",
                  "timedOut": false,
                  "duration": 13909,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst balanceBefore = await client.getWalletBalance();\nconst rsp = await client.ipAsset.registerDerivativeIp({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 150n));",
                  "err": {},
                  "uuid": "7b757ce8-21fb-4ddb-bfda-0e68b202105d",
                  "parentUUID": "467059fd-8592-4925-96e7-3dd86100e2b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should spend existing wip when register derivative and distribute loyalty tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should spend existing wip when register derivative and distribute loyalty tokens",
                  "timedOut": false,
                  "duration": 22511,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nawait client.wipClient.deposit({\n    amount: 150n,\n});\nconst rsp = await client.ipAsset.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipRoyaltyVault).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.be.equal(0n);",
                  "err": {},
                  "uuid": "a1de6750-e90a-4b83-b924-6e6a79e83abb",
                  "parentUUID": "467059fd-8592-4925-96e7-3dd86100e2b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when mint and register derivative and distribute loyalty tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative and distribute loyalty tokens",
                  "timedOut": false,
                  "duration": 5048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens({\n    spgNftContract: nftContractWithMintingFee,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d2a83dbe-4e71-4620-806c-2cb3aeea10e7",
                  "parentUUID": "467059fd-8592-4925-96e7-3dd86100e2b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcbdffb1-423c-4a33-8f9d-30383e146c51",
                "f6749bf6-c0a6-439d-ad46-7fb1919725f1",
                "7b757ce8-21fb-4ddb-bfda-0e68b202105d",
                "a1de6750-e90a-4b83-b924-6e6a79e83abb",
                "d2a83dbe-4e71-4620-806c-2cb3aeea10e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73470,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
              "title": "IP Asset Registration with Private Minting SPG NFT Contracts",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"IP Asset Registration with Private Minting SPG NFT Contracts\"",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts \"before all\" hook in \"IP Asset Registration with Private Minting SPG NFT Contracts\"",
                  "timedOut": false,
                  "duration": 4387,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const privateMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Private Minting Collection\",\n    symbol: \"PMC\",\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 3n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPrivateMinting = privateMintingCollectionResult.spgNftContract;",
                  "err": {},
                  "uuid": "b50ca062-e4da-4055-87ff-331561d6d3e9",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully when call mint and register ip asset with pil terms",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip asset with pil terms",
                  "timedOut": false,
                  "duration": 21983,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "1250b52c-265f-41ca-ac52-f27fda61e59c",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip asset with pil terms with license terms max limit",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip asset with pil terms with license terms max limit",
                  "timedOut": false,
                  "duration": 10390,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 5n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 5n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n    ipMetadata: {\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "0e19a00b-5342-4318-a075-3c1ecfe0d0e8",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and make derivative",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and make derivative",
                  "timedOut": false,
                  "duration": 9571,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 100n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "112bb385-832a-42ca-b0d6-e0a45fc31270",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip",
                  "timedOut": false,
                  "duration": 9029,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    allowDuplicates: false,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "0b983885-408b-4f15-ae12-c03a1d7f51fd",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 18312,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nconst licenseTokenId = mintLicenseTokensResult.licenseTokenIds[0];\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenId);\nconst result = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    licenseTokenIds: [licenseTokenId],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "3aa9fb1d-b827-4aff-803f-951f064ffd8e",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and attach pil terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and attach pil terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 9534,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "7059914c-eab8-49be-82fc-227f5d8a3de0",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should succeed when call mint and register ip and make derivative and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should succeed when call mint and register ip and make derivative and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 22876,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: true,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\nconst newParentIpId = result.ipId;\nconst licenseId = result.licenseTermsIds[0];\nconst rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    derivData: {\n        parentIpIds: [newParentIpId],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "f977e2b7-c103-416f-a054-9a599ff29b14",
                  "parentUUID": "144437d8-835b-4b43-94cf-1c2e5aa8b513",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1250b52c-265f-41ca-ac52-f27fda61e59c",
                "0e19a00b-5342-4318-a075-3c1ecfe0d0e8",
                "112bb385-832a-42ca-b0d6-e0a45fc31270",
                "0b983885-408b-4f15-ae12-c03a1d7f51fd",
                "3aa9fb1d-b827-4aff-803f-951f064ffd8e",
                "7059914c-eab8-49be-82fc-227f5d8a3de0",
                "f977e2b7-c103-416f-a054-9a599ff29b14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101695,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "6bb4044a-eec5-487a-9ea7-b2029817ba49",
              "title": "Batch Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Batch Operations\"",
                  "fullTitle": "IP Asset Functions Batch Operations \"before all\" hook in \"Batch Operations\"",
                  "timedOut": false,
                  "duration": 13362,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\nconst tokenId = await (0, util_1.getTokenId)();\nparentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;",
                  "err": {},
                  "uuid": "9484a1a4-f7f9-4223-939c-b7489e8fed09",
                  "parentUUID": "6bb4044a-eec5-487a-9ea7-b2029817ba49",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should batch register derivative",
                  "fullTitle": "IP Asset Functions Batch Operations should batch register derivative",
                  "timedOut": false,
                  "duration": 27516,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const childTokenId = await (0, util_1.getTokenId)();\nconst childIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId,\n})).ipId;\nconst childTokenId2 = await (0, util_1.getTokenId)();\nconst childIpId2 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId2,\n})).ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nconst result = await client.ipAsset.batchRegisterDerivative({\n    args: [\n        {\n            childIpId: childIpId,\n            parentIpIds: [parentIpId],\n            licenseTermsIds: [noCommercialLicenseTermsId],\n            maxMintingFee: 0n,\n            maxRts: 5 * 10 ** 6,\n            maxRevenueShare: \"0\",\n        },\n        {\n            childIpId: childIpId2,\n            parentIpIds: [parentIpId],\n            licenseTermsIds: [noCommercialLicenseTermsId],\n            maxMintingFee: 0n,\n            maxRts: 5 * 10 ** 6,\n            maxRevenueShare: \"0\",\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "e4c27e34-aaff-4ceb-908a-a225b74653b2",
                  "parentUUID": "6bb4044a-eec5-487a-9ea7-b2029817ba49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch mint and register IP asset with PIL terms",
                  "fullTitle": "IP Asset Functions Batch Operations should batch mint and register IP asset with PIL terms",
                  "timedOut": false,
                  "duration": 9933,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.batchMintAndRegisterIpAssetWithPilTerms({\n    args: [\n        {\n            spgNftContract: nftContract,\n            licenseTermsData: [\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 8n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 8n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                    maxLicenseTokens: 100,\n                },\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 80n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 100n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                },\n            ],\n        },\n        {\n            spgNftContract: nftContract,\n            licenseTermsData: [\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 8n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 8n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                    maxLicenseTokens: 100,\n                },\n            ],\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.results).to.be.an(\"array\");\n(0, chai_1.expect)(result.results[0].licenseTermsIds).to.be.an(\"array\").and.length(2);\n(0, chai_1.expect)(result.results[0].maxLicenseTokensTxHashes).to.be.an(\"array\").and.length(1);\n(0, chai_1.expect)(result.results[1].licenseTermsIds).to.be.an(\"array\").and.length(1);\n(0, chai_1.expect)(result.results[1].maxLicenseTokensTxHashes).to.be.an(\"array\").and.length(1);",
                  "err": {},
                  "uuid": "cf253d7b-b5f3-43e9-a30a-41de5abb12c6",
                  "parentUUID": "6bb4044a-eec5-487a-9ea7-b2029817ba49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch mint and register IP asset and make derivative",
                  "fullTitle": "IP Asset Functions Batch Operations should batch mint and register IP asset and make derivative",
                  "timedOut": false,
                  "duration": 5036,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract: nftContract,\n            derivData: {\n                parentIpIds: [parentIpId],\n                licenseTermsIds: [noCommercialLicenseTermsId],\n                maxMintingFee: 0n,\n                maxRts: 5 * 10 ** 6,\n                maxRevenueShare: \"0\",\n            },\n        },\n        {\n            spgNftContract: nftContract,\n            derivData: {\n                parentIpIds: [parentIpId],\n                licenseTermsIds: [noCommercialLicenseTermsId],\n                maxMintingFee: 0n,\n                maxRts: 5 * 10 ** 6,\n                maxRevenueShare: \"0\",\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.results).to.be.an(\"array\");",
                  "err": {},
                  "uuid": "e4b4b1e9-4c6e-4cea-b6cd-0002580d9c05",
                  "parentUUID": "6bb4044a-eec5-487a-9ea7-b2029817ba49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch register giving parameters",
                  "fullTitle": "IP Asset Functions Batch Operations should batch register giving parameters",
                  "timedOut": false,
                  "duration": 23007,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst spgTokenId1 = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst spgTokenId2 = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.batchRegister({\n    args: [\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId,\n        },\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId2,\n        },\n        {\n            nftContract,\n            tokenId: spgTokenId1,\n            ipMetadata: {\n                ipMetadataURI: \"test-uri2\",\n                ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash2\", { size: 32 }),\n                nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash2\", { size: 32 }),\n            },\n        },\n        {\n            nftContract,\n            tokenId: spgTokenId2,\n            ipMetadata: {\n                ipMetadataURI: \"test-uri\",\n                ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n                nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.results).to.be.an(\"array\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "b5e157c0-bf88-4d9d-ae7f-71653d016d91",
                  "parentUUID": "6bb4044a-eec5-487a-9ea7-b2029817ba49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4c27e34-aaff-4ceb-908a-a225b74653b2",
                "cf253d7b-b5f3-43e9-a30a-41de5abb12c6",
                "e4b4b1e9-4c6e-4cea-b6cd-0002580d9c05",
                "b5e157c0-bf88-4d9d-ae7f-71653d016d91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65492,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a548bab4-4b62-40b5-bc78-48331b125b9b",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Error Cases\"",
                  "fullTitle": "IP Asset Functions Error Cases \"before all\" hook in \"Error Cases\"",
                  "timedOut": false,
                  "duration": 4469,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;",
                  "err": {},
                  "uuid": "af56a7f3-2a6f-4aef-ad61-017e47523080",
                  "parentUUID": "a548bab4-4b62-40b5-bc78-48331b125b9b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail to register unowned NFT",
                  "fullTitle": "IP Asset Functions Error Cases should fail to register unowned NFT",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: nftContract,\n    tokenId: 999999n, // Non-existent token\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "e4b97b79-8b98-45b7-b66a-bc0cdc72d06e",
                  "parentUUID": "a548bab4-4b62-40b5-bc78-48331b125b9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4b97b79-8b98-45b7-b66a-bc0cdc72d06e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "70148ae3-a75c-4a8d-ae11-e82785f5a3f8",
              "title": "Other Edge Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Other Edge Cases\"",
                  "fullTitle": "IP Asset Functions Other Edge Cases \"before all\" hook in \"Other Edge Cases\"",
                  "timedOut": false,
                  "duration": 17783,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst parentIpResponse = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nparentIpId = parentIpResponse.ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});",
                  "err": {},
                  "uuid": "e671da1b-d80f-474e-82aa-0b741a8f2107",
                  "parentUUID": "70148ae3-a75c-4a8d-ae11-e82785f5a3f8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4bff30b5-e4a2-4034-9e37-e76a6229645e",
                  "title": "License Token Edge Cases",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail when trying to use non-existent license token",
                      "fullTitle": "IP Asset Functions Other Edge Cases License Token Edge Cases should fail when trying to use non-existent license token",
                      "timedOut": false,
                      "duration": 9122,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId,\n    })).ipId,\n    licenseTokenIds: [BigInt(999999)], // Non-existent token\n    maxRts: 5 * 10 ** 6,\n})).to.be.rejected;",
                      "err": {},
                      "uuid": "12f76f9e-d511-4116-9213-ea1bd546646f",
                      "parentUUID": "4bff30b5-e4a2-4034-9e37-e76a6229645e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to use same license token twice",
                      "fullTitle": "IP Asset Functions Other Edge Cases License Token Edge Cases should fail when trying to use same license token twice",
                      "timedOut": false,
                      "duration": 31661,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: noCommercialLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 1,\n});\nconst tokenId1 = await (0, util_1.getTokenId)();\nawait client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n    })).ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n});\nconst tokenId2 = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n    })).ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n})).to.be.rejected; // Should fail as token already used",
                      "err": {},
                      "uuid": "8ad70485-010d-492b-bb51-d553abdd5160",
                      "parentUUID": "4bff30b5-e4a2-4034-9e37-e76a6229645e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "12f76f9e-d511-4116-9213-ea1bd546646f",
                    "8ad70485-010d-492b-bb51-d553abdd5160"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 40783,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "67c26618-858e-45a2-a03d-8973faab6a2d",
                  "title": "Batch Operation Edge Cases",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle partial failures in batch registration",
                      "fullTitle": "IP Asset Functions Other Edge Cases Batch Operation Edge Cases should handle partial failures in batch registration",
                      "timedOut": false,
                      "duration": 13856,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nawait client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId1,\n});\nawait (0, chai_1.expect)(client.ipAsset.batchRegister({\n    args: [\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId1, // Already registered\n        },\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId2, // New registration\n        },\n    ],\n})).to.be.rejected;",
                      "err": {},
                      "uuid": "242e8863-94e5-4592-b4cb-701dd9689dbb",
                      "parentUUID": "67c26618-858e-45a2-a03d-8973faab6a2d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "242e8863-94e5-4592-b4cb-701dd9689dbb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13856,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "15c9f3ee-cf33-4689-abe8-655b42388b6a",
              "title": "Batch Register IP Assets With Optimized Workflows",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Batch Register IP Assets With Optimized Workflows\"",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows \"before all\" hook in \"Batch Register IP Assets With Optimized Workflows\"",
                  "timedOut": false,
                  "duration": 40599,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a public minting NFT collection\nconst publicMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Public Minting Collection\",\n    symbol: \"PMC\",\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 10n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPublicMinting = publicMintingCollectionResult.spgNftContract;\n// Create a private minting NFT collection\nconst privateMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Private Minting Collection\",\n    symbol: \"PRC\",\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPrivateMinting = privateMintingCollectionResult.spgNftContract;\n// Register a commercial remix PIL license\nconst commercialRemixPILResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 10n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\nlicenseTermsId1 = commercialRemixPILResult.licenseTermsId;\n// Register a commercial use PIL license\nconst commercialUsePILResult = await client.license.registerPILTerms({\n    transferable: true,\n    royaltyPolicy: \"0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E\",\n    defaultMintingFee: 5n,\n    expiration: 0n,\n    commercialUse: true,\n    commercialAttribution: true,\n    commercializerChecker: viem_1.zeroAddress,\n    commercializerCheckerData: viem_1.zeroAddress,\n    commercialRevShare: 10,\n    commercialRevCeiling: 0n,\n    derivativesAllowed: true,\n    derivativesAttribution: true,\n    derivativesApproval: false,\n    derivativesReciprocal: true,\n    derivativeRevCeiling: 0n,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    uri: \"https://github.com/piplabs/pil-document/blob/ad67bb632a310d2557f8abcccd428e4c9c798db1/off-chain-terms/CommercialRemix.json\",\n});\nlicenseTermsId2 = commercialUsePILResult.licenseTermsId;\n// Mint and register IP with public minting contract\nconst publicMintingIpResult = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPublicMinting,\n});\nparentIpId1 = publicMintingIpResult.ipId;\n// Attach license terms to the first IP\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId1,\n    licenseTermsId: licenseTermsId1,\n});\n// Mint and register IP with private minting contract\nconst privateMintingIpResult = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPrivateMinting,\n});\nparentIpId2 = privateMintingIpResult.ipId;\n// Attach license terms to the second IP\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId2,\n    licenseTermsId: licenseTermsId2,\n});",
                  "err": {},
                  "uuid": "0569a0b9-3f12-4160-bed5-1fbeae51b078",
                  "parentUUID": "15c9f3ee-cf33-4689-abe8-655b42388b6a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully batch register multiple IP assets with SPG NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully batch register multiple IP assets with SPG NFT contracts",
                  "timedOut": false,
                  "duration": 44177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall due to the private minting\n     * - `maxLicenseTokens` is set to 1000n for first license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 1000n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 3n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 3n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     * - `maxLicenseTokens` is set to 100n for license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 100n,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 20(10+10) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5(0+5) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the mint tokens is given `msg.sender` as the recipient\n     * - `maxLicenseTokens` is set to 80n and 10n for license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                maxLicenseTokens: 80n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 100n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the mint tokens is given `msg.sender` as the recipient\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n            },\n        ],\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n];\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst totalFees = 10 + 15 + 0 + 10 + 20 + 5 + 10 + 0;\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n *\n * 1. derivativeWorkflowsClient: 1 transaction\n *    - No license terms attached\n *\n * 2. multicall3Client: 3 transactions\n *    - Second transaction includes license terms with maxLicenseTokens: 1000n\n *\n * 3. licenseAttachmentWorkflowsClient: 1 transaction\n *    - Two license terms attached\n *    - First license terms: maxLicenseTokens: 1000n\n *\n * 4. royaltyTokenDistributionWorkflowsClient: 3 transactions\n *    - Second transaction includes two license terms:\n *    -  First license terms: maxLicenseTokens: 80n\n *    - Second license terms: maxLicenseTokens: 10n\n *   - Third transaction includes a license terms\n *\n * Summary:\n * - Total transactions: 4 (4 unique transaction hashes)\n * - Total IP assets registered: 8\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(4);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes?.length).equal(2);",
                  "err": {},
                  "uuid": "50bf45d0-3dd7-418c-8610-c210896a430f",
                  "parentUUID": "15c9f3ee-cf33-4689-abe8-655b42388b6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully batch register multiple IP assets with NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully batch register multiple IP assets with NFT contracts",
                  "timedOut": false,
                  "duration": 65953,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst tokenId3 = await (0, util_1.getTokenId)();\nconst tokenId4 = await (0, util_1.getTokenId)();\nconst tokenId5 = await (0, util_1.getTokenId)();\nconst tokenId6 = await (0, util_1.getTokenId)();\nconst tokenId7 = await (0, util_1.getTokenId)();\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst requests = [\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerIpAndAttachPilTerms  workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall\n     * - `maxLicenseTokens` is set to 100n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId3,\n        deadline: 1000n,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: viem_1.zeroAddress,\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: false,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 10000n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 100n,\n            },\n        ],\n    },\n    /**\n     * registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     * - `maxLicenseTokens` is set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId4,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 1n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 6n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n        ],\n        ipMetadata: {\n            ipMetadataURI: \"test-uri\",\n            ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n            nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 43,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 17,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 2,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 38,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId5,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId6,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId7,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n];\nconst totalFees = 10 + 5 + 0 + 0 + 5 + 10 + 5;\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. royaltyTokenDistributionWorkflowsClient: 4 args\n *  - The third request has two license terms, first one has `maxLicenseTokens` set to 10n\n *\n * 2.licenseAttachmentWorkflowsClient: 1 arg\n *  - The first request have two license terms, second one has `maxLicenseTokens` set to 100n\n *\n * 3.derivativeWorkflowsClient: 2 args\n *  - None license terms and no `maxLicenseTokens` set\n *\n * Summary:\n * - Total transactions: 3 (3 unique transaction hashes)\n * - Total IP assets registered: 7\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(3);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).greaterThan(0);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(4);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[2].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[2].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);",
                  "err": {},
                  "uuid": "5c83dfea-dad2-40b6-b693-2c61a9be563a",
                  "parentUUID": "15c9f3ee-cf33-4689-abe8-655b42388b6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register IP assets using a combination of NFT contracts and SPG NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully register IP assets using a combination of NFT contracts and SPG NFT contracts",
                  "timedOut": false,
                  "duration": 57191,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst tokenId3 = await (0, util_1.getTokenId)();\nconst tokenId4 = await (0, util_1.getTokenId)();\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5(0+5) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 20(10+10) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n    /**\n     * registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     * - `maxLicenseTokens` is set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 1n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n        ipMetadata: {\n            ipMetadataURI: \"test-uri\",\n            ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n            nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 43,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 17,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 2,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 38,\n            },\n        ],\n    },\n    /**\n     * registerIpAndAttachPilTerms  workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall\n     * - the second request has `maxLicenseTokens` set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId3,\n        deadline: 1000n,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: viem_1.zeroAddress,\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: false,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 10000n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId4,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n];\nconst totalFees = 15 + 5 + 20 + 10 + 5 + 0 + 0 + 10;\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. multicall3Client: 2 args\n *  - No license terms and no `maxLicenseTokens` set\n *\n * 2. royaltyTokenDistributionWorkflowsClient: 3 args\n *  - The third request has a license terms and `maxLicenseTokens` set to 10n\n *\n * 3. derivativeWorkflowsClient: 2 args\n *  - None license terms and no `maxLicenseTokens` set\n *\n * 4. licenseAttachmentWorkflowsClient: 1 arg\n *  - The first request have two license terms, second one has `maxLicenseTokens` set to 10n\n *\n * Summary:\n * - Total transactions: 4 (4 unique transaction hashes)\n * - Total IP assets registered: 8\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(4);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).greaterThan(0);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[1].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[2].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[2].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);",
                  "err": {},
                  "uuid": "1123c0ed-48e1-4b95-accf-64772af35e9e",
                  "parentUUID": "15c9f3ee-cf33-4689-abe8-655b42388b6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register IP assets with multicall disabled",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully register IP assets with multicall disabled",
                  "timedOut": false,
                  "duration": 47711,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `derivativeWorkflowsClient` to call the this method\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` to call the this method\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` to call the this method\n     * - the first request has `maxLicenseTokens` set to 10n\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 10n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient`to call the this method\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient`to call the this method\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n];\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst totalFees = 15 + 0 + 10 + 5 + 5;\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n    options: {\n        wipOptions: {\n            useMulticallWhenPossible: false,\n        },\n    },\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. None license terms and no `maxLicenseTokens` set\n * 2. The request have one license terms and no `maxLicenseTokens` set\n * 3. The request have two license terms, first one has `maxLicenseTokens` set to 10n\n * 4. The requests have no license terms and no `maxLicenseTokens` set\n * 5. The requests have no license terms and no `maxLicenseTokens` set\n * Summary:\n * - Total transactions: 5 (5 unique transaction hashes)\n * - Total IP assets registered: 5\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(requests.length);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);",
                  "err": {},
                  "uuid": "eb521947-18ea-49fa-802b-db3ec7758386",
                  "parentUUID": "15c9f3ee-cf33-4689-abe8-655b42388b6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50bf45d0-3dd7-418c-8610-c210896a430f",
                "5c83dfea-dad2-40b6-b693-2c61a9be563a",
                "1123c0ed-48e1-4b95-accf-64772af35e9e",
                "eb521947-18ea-49fa-802b-db3ec7758386"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 215032,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c078aa70-2970-46d9-a937-64bb9e95da11",
          "title": "License Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
          "file": "/test/integration/license.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"License Functions\"",
              "fullTitle": "License Functions \"before all\" hook in \"License Functions\"",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nclientB = derivedClient.clientB;",
              "err": {},
              "uuid": "307c0fb5-04ce-4518-818e-3d49aa5f88d7",
              "parentUUID": "c078aa70-2970-46d9-a937-64bb9e95da11",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b32feefd-c105-49ca-9575-2f7991f5756d",
              "title": "register license with different types",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register license ",
                  "fullTitle": "License Functions register license with different types should register license ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerPILTerms({\n    defaultMintingFee: 0,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    transferable: false,\n    royaltyPolicy: viem_1.zeroAddress,\n    commercialUse: false,\n    commercialAttribution: false,\n    commercializerChecker: viem_1.zeroAddress,\n    commercializerCheckerData: \"0x\",\n    commercialRevShare: 0,\n    derivativesAllowed: false,\n    derivativesAttribution: false,\n    derivativesApproval: false,\n    derivativesReciprocal: false,\n    uri: \"\",\n    expiration: \"\",\n    commercialRevCeiling: 0n,\n    derivativeRevCeiling: 0n,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "3b19ea45-36c0-425d-b236-8646a569cecf",
                  "parentUUID": "b32feefd-c105-49ca-9575-2f7991f5756d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with non commercial social remixing PIL",
                  "fullTitle": "License Functions register license with different types should register license with non commercial social remixing PIL",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerNonComSocialRemixingPIL();\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "f57ff91f-30f7-4960-99d3-cbf7b551b972",
                  "parentUUID": "b32feefd-c105-49ca-9575-2f7991f5756d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with commercial use",
                  "fullTitle": "License Functions register license with different types should register license with commercial use",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCommercialUsePIL({\n    defaultMintingFee: 1n,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "fed9a5ff-befb-4677-a833-6f96bd3207eb",
                  "parentUUID": "b32feefd-c105-49ca-9575-2f7991f5756d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with commercial Remix use",
                  "fullTitle": "License Functions register license with different types should register license with commercial Remix use",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 1n,\n    commercialRevShare: 100,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "578e6381-36d9-4589-b315-a5cfa64bc487",
                  "parentUUID": "b32feefd-c105-49ca-9575-2f7991f5756d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with creative commons attribution PIL",
                  "fullTitle": "License Functions register license with different types should register license with creative commons attribution PIL",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCreativeCommonsAttributionPIL({\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    royaltyPolicyAddress: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "6df68479-67bc-47bb-ba19-2681228b6cf9",
                  "parentUUID": "b32feefd-c105-49ca-9575-2f7991f5756d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b19ea45-36c0-425d-b236-8646a569cecf",
                "f57ff91f-30f7-4960-99d3-cbf7b551b972",
                "fed9a5ff-befb-4677-a833-6f96bd3207eb",
                "578e6381-36d9-4589-b315-a5cfa64bc487",
                "6df68479-67bc-47bb-ba19-2681228b6cf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 221,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2f9d320d-8392-4491-991e-5951070bc276",
              "title": "attach License Terms and mint license tokens",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"attach License Terms and mint license tokens\"",
                  "fullTitle": "License Functions attach License Terms and mint license tokens \"before all\" hook in \"attach License Terms and mint license tokens\"",
                  "timedOut": false,
                  "duration": 9356,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tokenId = await (0, util_1.getTokenId)();\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nconst mockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\nawait mockERC20.approve(generated_1.licensingModuleAddress[util_1.aeneid], viem_1.maxUint256);\nipId = registerResult.ipId;\nconst registerLicenseResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 0,\n    commercialRevShare: 100,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\nlicenseId = registerLicenseResult.licenseTermsId;\nconst paidLicenseResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 100n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\npaidLicenseId = paidLicenseResult.licenseTermsId;",
                  "err": {},
                  "uuid": "3c9e7418-2bea-4c52-82ce-9b20be96a033",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should attach License Terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should attach License Terms",
                  "timedOut": false,
                  "duration": 8583,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "60082589-fadc-4c52-ba9b-96d159bf9982",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to attach another license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should be able to attach another license terms",
                  "timedOut": false,
                  "duration": 4616,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: paidLicenseId,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "93bf69b4-cf92-4bb4-866b-c5def85d40d3",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with ip owner",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with ip owner",
                  "timedOut": false,
                  "duration": 4589,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseId,\n    licensorIpId: ipId,\n    maxMintingFee: 1n,\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "9ffa4d0c-6e62-4a16-8a77-4f87c8468eb4",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with non ip owner",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with non ip owner",
                  "timedOut": false,
                  "duration": 18066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// register ip with another wallet account\nconst tokenIdB = await (0, util_1.getTokenId)();\nconst registerResult = await clientB.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenIdB,\n});\nconst ipIdB = registerResult.ipId;\n// attach license terms to the ip\nawait client.license.attachLicenseTerms({\n    ipId: ipIdB,\n    licenseTermsId: licenseId,\n});\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseId,\n    licensorIpId: ipIdB,\n    maxMintingFee: 1n,\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "0b6d727f-77c9-4471-9938-447c6bb72727",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license token with default license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license token with default license terms",
                  "timedOut": false,
                  "duration": 4720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// get default license terms id\nconst licenseRegistryReadOnlyClient = new generated_1.LicenseRegistryReadOnlyClient(util_1.publicClient);\nconst { licenseTermsId: defaultLicenseTermsId } = await licenseRegistryReadOnlyClient.getDefaultLicenseTerms();\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: defaultLicenseTermsId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 1,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "89ff0e62-c1cf-4155-9414-cdeafe75f75c",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with fee and pay with IP",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with fee and pay with IP",
                  "timedOut": false,
                  "duration": 4835,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: paidLicenseId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 50,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 100n));",
                  "err": {},
                  "uuid": "7a4ac91f-aef1-4eb1-90d0-bccc6480e3a2",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should get license terms",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.getLicenseTerms(licenseId);\n(0, chai_1.expect)(result).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "449452c1-83bb-4a63-95c1-d72cbd4d7e3d",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should predict minting license fee",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should predict minting license fee",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.predictMintingLicenseFee({\n    licenseTermsId: licenseId,\n    licensorIpId: ipId,\n    amount: 1,\n});\n(0, chai_1.expect)(result.currencyToken).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenAmount).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "6f659b7e-23fe-4c36-a297-58c4dc41afdd",
                  "parentUUID": "2f9d320d-8392-4491-991e-5951070bc276",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "4a642137-c0c9-4ec9-a416-0dfec5f2c103",
                  "title": "licensing config and max license tokens",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
                  "file": "/test/integration/license.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should set licensing config",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should set licensing config",
                      "timedOut": false,
                      "duration": 4618,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.setLicensingConfig({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n    licensingConfig,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "8f51e3a0-bbef-4e8a-a410-43e3d0804616",
                      "parentUUID": "4a642137-c0c9-4ec9-a416-0dfec5f2c103",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should get licensing config",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should get licensing config",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.getLicensingConfig({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n});\n(0, chai_1.expect)(result).to.deep.equal(licensingConfig);",
                      "err": {},
                      "uuid": "0e316e7f-6eb1-4f34-be02-bec546c5d205",
                      "parentUUID": "4a642137-c0c9-4ec9-a416-0dfec5f2c103",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should set max license tokens",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should set max license tokens",
                      "timedOut": false,
                      "duration": 9075,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.setMaxLicenseTokens({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n    maxLicenseTokens: 100,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "091dedc6-d6e0-4f95-b63e-6264debffab1",
                      "parentUUID": "4a642137-c0c9-4ec9-a416-0dfec5f2c103",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8f51e3a0-bbef-4e8a-a410-43e3d0804616",
                    "0e316e7f-6eb1-4f34-be02-bec546c5d205",
                    "091dedc6-d6e0-4f95-b63e-6264debffab1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13756,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "60082589-fadc-4c52-ba9b-96d159bf9982",
                "93bf69b4-cf92-4bb4-866b-c5def85d40d3",
                "9ffa4d0c-6e62-4a16-8a77-4f87c8468eb4",
                "0b6d727f-77c9-4471-9938-447c6bb72727",
                "89ff0e62-c1cf-4155-9414-cdeafe75f75c",
                "7a4ac91f-aef1-4eb1-90d0-bccc6480e3a2",
                "449452c1-83bb-4a63-95c1-d72cbd4d7e3d",
                "6f659b7e-23fe-4c36-a297-58c4dc41afdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45589,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b4673d19-d893-40e7-8730-aef845efdf44",
              "title": "Creative Commons Attribution License Tests",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Creative Commons Attribution License Tests\"",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests \"before all\" hook in \"Creative Commons Attribution License Tests\"",
                  "timedOut": false,
                  "duration": 13116,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tokenId = await (0, util_1.getTokenId)();\n// Register an IP asset\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = registerResult.ipId;\n// Create a Creative Commons Attribution license\nconst ccLicenseResult = await client.license.registerCreativeCommonsAttributionPIL({\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    royaltyPolicyAddress: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n});\nccLicenseTermsId = ccLicenseResult.licenseTermsId;",
                  "err": {},
                  "uuid": "1f7106bb-7c08-4c82-abb9-bf9bdc7dae84",
                  "parentUUID": "b4673d19-d893-40e7-8730-aef845efdf44",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify the license terms match Creative Commons Attribution specifications",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should verify the license terms match Creative Commons Attribution specifications",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const licenseTerms = await client.license.getLicenseTerms(ccLicenseTermsId);\n(0, chai_1.expect)(licenseTerms.terms.transferable).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.commercialUse).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesAllowed).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesAttribution).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesReciprocal).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesApproval).to.equal(false);\n(0, chai_1.expect)(licenseTerms.terms.commercialAttribution).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.commercialRevShare).to.equal(0);\n(0, chai_1.expect)(licenseTerms.terms.defaultMintingFee).to.equal(0n);\n(0, chai_1.expect)(licenseTerms.terms.royaltyPolicy).to.equal(generated_1.royaltyPolicyLapAddress[util_1.aeneid]);\n(0, chai_1.expect)(licenseTerms.terms.expiration).to.equal(0n);",
                  "err": {},
                  "uuid": "e339cef4-c654-4cd6-89ca-5817b59bf0db",
                  "parentUUID": "b4673d19-d893-40e7-8730-aef845efdf44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should attach Creative Commons Attribution license to an IP",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should attach Creative Commons Attribution license to an IP",
                  "timedOut": false,
                  "duration": 4520,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attachResult = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: ccLicenseTermsId,\n});\n(0, chai_1.expect)(attachResult.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(attachResult.success).to.equal(true);\nconst licenseRegistryReadOnlyClient = new generated_1.LicenseRegistryReadOnlyClient(util_1.publicClient);\nconst hasLicense = await licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({\n    ipId: ipId,\n    licenseTemplate: client.ipAsset.licenseTemplateClient.address,\n    licenseTermsId: ccLicenseTermsId,\n});\n(0, chai_1.expect)(hasLicense).to.equal(true);",
                  "err": {},
                  "uuid": "c67812b6-5379-47fd-904b-0ffd384d4831",
                  "parentUUID": "b4673d19-d893-40e7-8730-aef845efdf44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint CC-BY license tokens with no minting fee",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should mint CC-BY license tokens with no minting fee",
                  "timedOut": false,
                  "duration": 4962,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Get wallet balance before minting\nconst balanceBefore = await client.getWalletBalance();\n// Predict the minting fee (should be zero for CC-BY)\nconst feePredict = await client.license.predictMintingLicenseFee({\n    licenseTermsId: ccLicenseTermsId,\n    licensorIpId: ipId,\n    amount: 1,\n});\n// CC-BY licenses should have zero minting fee\n(0, chai_1.expect)(feePredict.tokenAmount).to.equal(0n);\nconst mintResult = await client.license.mintLicenseTokens({\n    licenseTermsId: ccLicenseTermsId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 0,\n});\n(0, chai_1.expect)(mintResult.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(mintResult.licenseTokenIds).to.be.a(\"array\");\nconst balanceAfter = await client.getWalletBalance();\n// Verify no fee was charged just gas\n// This checks that any difference is very small (just gas costs)\nconst balanceDiff = balanceBefore - balanceAfter;\nconst gasUsed = mintResult.receipt.gasUsed;\nconst effectiveGasPrice = mintResult.receipt.effectiveGasPrice;\nconst totalGas = gasUsed * effectiveGasPrice;\n// Confirms the balance diff only reflects gas cost, since license fee is zero.\n(0, chai_1.expect)(balanceDiff).to.equal(totalGas); // Small amount for gas",
                  "err": {},
                  "uuid": "d9f85235-be0f-42e0-80df-532188ed76a3",
                  "parentUUID": "b4673d19-d893-40e7-8730-aef845efdf44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e339cef4-c654-4cd6-89ca-5817b59bf0db",
                "c67812b6-5379-47fd-904b-0ffd384d4831",
                "d9f85235-be0f-42e0-80df-532188ed76a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9517,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e097eb3b-fb56-4d50-ad40-cb378d98eac5",
          "title": "nftClient Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
          "file": "/test/integration/nftClient.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"nftClient Functions\"",
              "fullTitle": "nftClient Functions \"before all\" hook in \"nftClient Functions\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();",
              "err": {},
              "uuid": "893ec186-74d5-4b57-bef1-5ea4acdfb7d7",
              "parentUUID": "e097eb3b-fb56-4d50-ad40-cb378d98eac5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d6026abf-b18b-4cc1-946b-ec122201f79f",
              "title": "createNFTCollection",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully create public nft collection with minimal params",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create public nft collection with minimal params",
                  "timedOut": false,
                  "duration": 4513,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");\n(0, chai_1.expect)(txData.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d2eb9220-c1af-4735-a803-e0adf65f81ce",
                  "parentUUID": "d6026abf-b18b-4cc1-946b-ec122201f79f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with custom mint fee",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with custom mint fee",
                  "timedOut": false,
                  "duration": 4483,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"paid-collection\",\n    symbol: \"PAID\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFee: 10000000n,\n    mintFeeToken: generated_1.erc20Address[mockData_1.aeneid],\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");\nspgNftContract = txData.spgNftContract;",
                  "err": {},
                  "uuid": "aad689eb-bb41-4617-9f0c-71b408687916",
                  "parentUUID": "d6026abf-b18b-4cc1-946b-ec122201f79f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create private collection",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create private collection",
                  "timedOut": false,
                  "duration": 4427,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"private-collection\",\n    symbol: \"PRIV\",\n    maxSupply: 100,\n    isPublicMinting: false, // private minting\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: false, // starts closed\n    contractURI: \"test-uri\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "7e35f202-bf01-4f2a-97cd-132b0fa602b0",
                  "parentUUID": "d6026abf-b18b-4cc1-946b-ec122201f79f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with baseURI",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with baseURI",
                  "timedOut": false,
                  "duration": 4543,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"uri-collection\",\n    symbol: \"URI\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    baseURI: \"ipfs://QmTest/\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "9cbdc0d5-5551-4dfe-a867-04db41ebda04",
                  "parentUUID": "d6026abf-b18b-4cc1-946b-ec122201f79f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with custom owner",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with custom owner",
                  "timedOut": false,
                  "duration": 4408,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"owned-collection\",\n    symbol: \"OWN\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    owner: util_1.TEST_WALLET_ADDRESS,\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "c2521431-cac7-4599-a464-feac69114a19",
                  "parentUUID": "d6026abf-b18b-4cc1-946b-ec122201f79f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get encoded transaction data",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully get encoded transaction data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"encoded-collection\",\n    symbol: \"ENC\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    txOptions: {\n        encodedTxDataOnly: true,\n    },\n});\n(0, chai_1.expect)(txData.encodedTxData).to.be.an(\"object\");\n(0, chai_1.expect)(txData.encodedTxData?.data).to.be.a(\"string\");\n(0, chai_1.expect)(txData.encodedTxData?.to).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "cdef5270-e6cc-4a2b-a9c8-ec13aa744059",
                  "parentUUID": "d6026abf-b18b-4cc1-946b-ec122201f79f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid mint fee token",
                  "fullTitle": "nftClient Functions createNFTCollection should fail with invalid mint fee token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.nftClient.createNFTCollection({\n    name: \"invalid-fee-collection\",\n    symbol: \"INV\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFee: 1000000000000000000n,\n    mintFeeToken: \"0x0000000000000000000000000000000000000000\",\n})).to.be.rejectedWith(\"Invalid mint fee token address\");",
                  "err": {},
                  "uuid": "51535c71-8b87-4e25-937a-3805cfae5768",
                  "parentUUID": "d6026abf-b18b-4cc1-946b-ec122201f79f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2eb9220-c1af-4735-a803-e0adf65f81ce",
                "aad689eb-bb41-4617-9f0c-71b408687916",
                "7e35f202-bf01-4f2a-97cd-132b0fa602b0",
                "9cbdc0d5-5551-4dfe-a867-04db41ebda04",
                "c2521431-cac7-4599-a464-feac69114a19",
                "cdef5270-e6cc-4a2b-a9c8-ec13aa744059",
                "51535c71-8b87-4e25-937a-3805cfae5768"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22377,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "d5c5d13c-d477-4ea6-b1ba-5eacd6ff3872",
              "title": "Mint Fee",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully get mint fee token",
                  "fullTitle": "nftClient Functions Mint Fee should successfully get mint fee token",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintFeeToken = await client.nftClient.getMintFeeToken(spgNftContract);\n(0, chai_1.expect)(mintFeeToken).to.equal(generated_1.erc20Address[mockData_1.aeneid]);",
                  "err": {},
                  "uuid": "86ab1868-9e4c-420e-ad19-06c15a332c58",
                  "parentUUID": "d5c5d13c-d477-4ea6-b1ba-5eacd6ff3872",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get mint fee",
                  "fullTitle": "nftClient Functions Mint Fee should successfully get mint fee",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintFee = await client.nftClient.getMintFee(spgNftContract);\n(0, chai_1.expect)(mintFee).to.equal(10000000n);",
                  "err": {},
                  "uuid": "b93416f1-baa3-4342-858c-44528a9376d5",
                  "parentUUID": "d5c5d13c-d477-4ea6-b1ba-5eacd6ff3872",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86ab1868-9e4c-420e-ad19-06c15a332c58",
                "b93416f1-baa3-4342-858c-44528a9376d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "831906e2-3485-44f0-b90e-c07bbcd966f7",
              "title": "set and get tokenURI",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully set token URI",
                  "fullTitle": "nftClient Functions set and get tokenURI should successfully set token URI",
                  "timedOut": false,
                  "duration": 13385,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup: Approve the contract for ERC20 transfers\nconst erc20Client = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[mockData_1.aeneid]);\nconst txHash = await erc20Client.approve(spgNftContract, viem_1.maxUint256);\nawait util_1.publicClient.waitForTransactionReceipt({ hash: txHash });\n// Mint a new token with initial metadata\nconst tokenId = await (0, util_1.mintBySpg)(spgNftContract, \"ipfs://QmTest/\");\n(0, chai_1.expect)(tokenId).to.be.a(\"bigint\");\n// Update the token URI\nconst updatedMetadata = \"ipfs://QmUpdated/metadata.json\";\nconst result = await client.nftClient.setTokenURI({\n    tokenId: tokenId,\n    tokenURI: updatedMetadata,\n    spgNftContract,\n});\n// Verify the transaction\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n// Verification that the URI was updated\nconst tokenURI = await client.nftClient.getTokenURI({\n    tokenId,\n    spgNftContract,\n});\n(0, chai_1.expect)(tokenURI).to.equal(updatedMetadata);",
                  "err": {},
                  "uuid": "42f1dc35-797c-4e8a-9278-dadc7ea8b231",
                  "parentUUID": "831906e2-3485-44f0-b90e-c07bbcd966f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42f1dc35-797c-4e8a-9278-dadc7ea8b231"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13385,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "53c6c977-9004-4f21-9350-e6cc10edd8fb",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "fails with invalid token ID",
                  "fullTitle": "nftClient Functions Error Cases fails with invalid token ID",
                  "timedOut": false,
                  "duration": 8586,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const erc20Client = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[mockData_1.aeneid]);\nconst txHash = await erc20Client.approve(spgNftContract, viem_1.maxUint256);\nawait util_1.publicClient.waitForTransactionReceipt({ hash: txHash });\nconst invalidTokenId = 999999999999999n;\nconst updatedMetadata = \"ipfs://QmUpdated/metadata.json\";\nawait (0, chai_1.expect)(client.nftClient.setTokenURI({\n    tokenId: invalidTokenId,\n    tokenURI: updatedMetadata,\n    spgNftContract,\n})).to.be.rejectedWith(\"Failed to set token URI\");",
                  "err": {},
                  "uuid": "df90a6b0-2226-40ca-b7e7-d8fe93c40eef",
                  "parentUUID": "53c6c977-9004-4f21-9350-e6cc10edd8fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df90a6b0-2226-40ca-b7e7-d8fe93c40eef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8586,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2deab185-9dcd-42cb-8a1d-38769ea1d1c2",
          "title": "Permission Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
          "file": "/test/integration/permission.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Permission Functions\"",
              "fullTitle": "Permission Functions \"before all\" hook in \"Permission Functions\"",
              "timedOut": false,
              "duration": 8993,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = response.ipId;",
              "err": {},
              "uuid": "302fb195-6e8e-4e03-8c70-58784bb2de9e",
              "parentUUID": "2deab185-9dcd-42cb-8a1d-38769ea1d1c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31b1da64-850c-4976-ade1-fe105e6c1af4",
              "title": "Single Permission Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set permission successfully",
                  "fullTitle": "Permission Functions Single Permission Operations should set permission successfully",
                  "timedOut": false,
                  "duration": 4452,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setPermission({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n    func: \"function setAll(address,string,bytes32,bytes32)\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "da67b85a-526e-4d61-bf38-149321e3433c",
                  "parentUUID": "31b1da64-850c-4976-ade1-fe105e6c1af4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set all permissions successfully",
                  "fullTitle": "Permission Functions Single Permission Operations should set all permissions successfully",
                  "timedOut": false,
                  "duration": 4479,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setAllPermissions({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    permission: permission_1.AccessPermission.ALLOW,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "6d97782b-3002-413b-89c4-26775a5c5246",
                  "parentUUID": "31b1da64-850c-4976-ade1-fe105e6c1af4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da67b85a-526e-4d61-bf38-149321e3433c",
                "6d97782b-3002-413b-89c4-26775a5c5246"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8931,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2f38c513-a916-4add-a0f3-70d31386e1ac",
              "title": "Permission Signatures",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create set permission signature",
                  "fullTitle": "Permission Functions Permission Signatures should create set permission signature",
                  "timedOut": false,
                  "duration": 4500,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.createSetPermissionSignature({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    func: \"function setAll(address,string,bytes32,bytes32)\",\n    permission: permission_1.AccessPermission.ALLOW,\n    deadline: 60000n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "4fc4fd6e-079e-4ab0-98d6-ea827c11c274",
                  "parentUUID": "2f38c513-a916-4add-a0f3-70d31386e1ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fc4fd6e-079e-4ab0-98d6-ea827c11c274"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4500,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "6df2fc63-a0a0-4874-9e73-9ef9b635b79b",
              "title": "Batch Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set batch permissions successfully",
                  "fullTitle": "Permission Functions Batch Operations should set batch permissions successfully",
                  "timedOut": false,
                  "duration": 4508,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setBatchPermissions({\n    permissions: [\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.ALLOW,\n            func: \"function setAll(address,string,bytes32,bytes32)\",\n        },\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.DENY,\n            func: \"function freezeMetadata(address)\",\n        },\n    ],\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "1f118a7b-43db-4b5d-87b1-0d33ca575d86",
                  "parentUUID": "6df2fc63-a0a0-4874-9e73-9ef9b635b79b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create batch permission signature",
                  "fullTitle": "Permission Functions Batch Operations should create batch permission signature",
                  "timedOut": false,
                  "duration": 4623,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.createBatchPermissionSignature({\n    ipId: ipId,\n    permissions: [\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.ALLOW,\n            func: \"function setAll(address,string,bytes32,bytes32)\",\n        },\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.DENY,\n            func: \"function freezeMetadata(address)\",\n        },\n    ],\n    deadline: 60000n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "887478da-dfef-43c5-bff0-384a13a21103",
                  "parentUUID": "6df2fc63-a0a0-4874-9e73-9ef9b635b79b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f118a7b-43db-4b5d-87b1-0d33ca575d86",
                "887478da-dfef-43c5-bff0-384a13a21103"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a41f4d22-0065-4727-a717-96c564e7278a",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail when setting permission for unregistered IP",
                  "fullTitle": "Permission Functions Error Cases should fail when setting permission for unregistered IP",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.permission.setPermission({\n    ipId: unregisteredIpId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n})).to.be.rejectedWith(`IP id with ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "eb05b67e-3dd1-432d-b9d6-cc29b8b78a0a",
                  "parentUUID": "a41f4d22-0065-4727-a717-96c564e7278a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid function signature",
                  "fullTitle": "Permission Functions Error Cases should fail with invalid function signature",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.permission.setPermission({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n    func: \"invalid_function_signature\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "67c2f170-8252-4304-bc35-8d3d8a177730",
                  "parentUUID": "a41f4d22-0065-4727-a717-96c564e7278a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb05b67e-3dd1-432d-b9d6-cc29b8b78a0a",
                "67c2f170-8252-4304-bc35-8d3d8a177730"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 110,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "65c1bc59-776d-4858-9b63-9563dd6f99b9",
          "title": "Royalty Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
          "file": "/test/integration/royalty.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Royalty Functions\"",
              "fullTitle": "Royalty Functions \"before all\" hook in \"Royalty Functions\"",
              "timedOut": false,
              "duration": 31855,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nmockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\n// Setup initial state\nparentIpId = await getIpId();\nchildIpId = await getIpId();\nlicenseTermsId = await getCommercialPolicyId();\n// Setup relationships and approvals\nawait attachLicenseTerms(parentIpId, licenseTermsId);\nawait mockERC20.mint(util_1.TEST_WALLET_ADDRESS, (0, viem_1.parseEther)(\"10\"));\nawait mockERC20.approve(generated_1.royaltyModuleAddress[util_1.aeneid], viem_1.maxUint256);\n// Register derivative\nawait client.ipAsset.registerDerivative({\n    childIpId: childIpId,\n    parentIpIds: [parentIpId],\n    licenseTermsIds: [licenseTermsId],\n    maxMintingFee: 0n,\n    maxRts: \"0\",\n    maxRevenueShare: \"0\",\n});",
              "err": {},
              "uuid": "a34dcc3f-124b-4bf3-a087-44b43622b598",
              "parentUUID": "65c1bc59-776d-4858-9b63-9563dd6f99b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0d7ffdd0-6184-4aef-a45d-087d85d5dfe4",
              "title": "Royalty Payments",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully pay royalty on behalf",
                  "fullTitle": "Royalty Functions Royalty Payments should successfully pay royalty on behalf",
                  "timedOut": false,
                  "duration": 4604,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: parentIpId,\n    payerIpId: childIpId,\n    token: generated_1.erc20Address[util_1.aeneid],\n    amount: 1,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "dc15f6c3-490d-4e30-be31-cc3d51b7b014",
                  "parentUUID": "0d7ffdd0-6184-4aef-a45d-087d85d5dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto convert IP to WIP when paying WIP on behalf",
                  "fullTitle": "Royalty Functions Royalty Payments should auto convert IP to WIP when paying WIP on behalf",
                  "timedOut": false,
                  "duration": 8808,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst response = await client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: parentIpId,\n    payerIpId: childIpId,\n    token: common_1.WIP_TOKEN_ADDRESS,\n    amount: 100n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 100n));",
                  "err": {},
                  "uuid": "179e7a34-3ca8-4089-8a31-170e1c4c62e9",
                  "parentUUID": "0d7ffdd0-6184-4aef-a45d-087d85d5dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to pay royalty with unregistered receiver",
                  "fullTitle": "Royalty Functions Royalty Payments should fail to pay royalty with unregistered receiver",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: unregisteredIpId,\n    payerIpId: childIpId,\n    token: generated_1.erc20Address[util_1.aeneid],\n    amount: 10 * 10 ** 2,\n})).to.be.rejectedWith(`The receiver IP with id ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "b91fdb68-f8fd-45d4-a2c5-0e11df6703b2",
                  "parentUUID": "0d7ffdd0-6184-4aef-a45d-087d85d5dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the royalty vault to transfer its native tokens to a wallet address",
                  "fullTitle": "Royalty Functions Royalty Payments should allow the royalty vault to transfer its native tokens to a wallet address",
                  "timedOut": false,
                  "duration": 4637,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const royaltyVaultAddress = await client.royalty.getRoyaltyVaultAddress(parentIpId);\nconst royaltyVaultToken = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, royaltyVaultAddress);\nconst transferAmount = BigInt(10 * 10 ** 6); // 10 million tokens\n// Check initial balances of the vault token\nconst initialTargetBalance = await royaltyVaultToken.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst initialParentBalance = await royaltyVaultToken.balanceOf(parentIpId);\n(0, chai_1.expect)(Number(initialParentBalance)).greaterThanOrEqual(Number(transferAmount));\nconst transferResult = await client.ipAccount.execute({\n    to: royaltyVaultAddress,\n    value: 0,\n    ipId: parentIpId,\n    data: (0, viem_1.encodeFunctionData)({\n        abi: viem_1.erc20Abi,\n        functionName: \"transfer\",\n        args: [util_1.TEST_WALLET_ADDRESS, transferAmount],\n    }),\n});\n(0, chai_1.expect)(transferResult.txHash).to.be.a(\"string\");\n// Check final balances to confirm the transfer worked\nconst finalTargetBalance = await royaltyVaultToken.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst finalParentBalance = await royaltyVaultToken.balanceOf(parentIpId);\n(0, chai_1.expect)(finalTargetBalance).to.equal(initialTargetBalance + transferAmount, \"Target wallet balance should increase by the transfer amount\");\n(0, chai_1.expect)(Number(finalParentBalance)).equal(Number(initialParentBalance - transferAmount));",
                  "err": {},
                  "uuid": "dfa08b6a-40f3-4fcb-abb8-a30bff8ec43e",
                  "parentUUID": "0d7ffdd0-6184-4aef-a45d-087d85d5dfe4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc15f6c3-490d-4e30-be31-cc3d51b7b014",
                "179e7a34-3ca8-4089-8a31-170e1c4c62e9",
                "b91fdb68-f8fd-45d4-a2c5-0e11df6703b2",
                "dfa08b6a-40f3-4fcb-abb8-a30bff8ec43e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18090,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "81583d68-01e4-4ab3-ba47-8848127b3475",
              "title": "Revenue Queries",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return claimable revenue amount",
                  "fullTitle": "Royalty Functions Revenue Queries should return claimable revenue amount",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.claimableRevenue({\n    ipId: parentIpId,\n    claimer: util_1.TEST_WALLET_ADDRESS,\n    token: generated_1.erc20Address[util_1.aeneid],\n});\n(0, chai_1.expect)(response).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "ea9dbab3-b9d6-4bd3-bc68-608d08635f57",
                  "parentUUID": "81583d68-01e4-4ab3-ba47-8848127b3475",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to get royalty vault address for unregistered IP",
                  "fullTitle": "Royalty Functions Revenue Queries should fail to get royalty vault address for unregistered IP",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.royalty.getRoyaltyVaultAddress(unregisteredIpId)).to.be.rejectedWith(`The royalty vault IP with id ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "a3832f88-cf36-45be-aef7-8dc49bd64923",
                  "parentUUID": "81583d68-01e4-4ab3-ba47-8848127b3475",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea9dbab3-b9d6-4bd3-bc68-608d08635f57",
                "a3832f88-cf36-45be-aef7-8dc49bd64923"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 141,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "9adf3268-25b4-44e2-9fe2-ef8ca7b7eebc",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return zero for claimable revenue with invalid token",
                  "fullTitle": "Royalty Functions Error Cases should return zero for claimable revenue with invalid token",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.claimableRevenue({\n    ipId: parentIpId,\n    claimer: util_1.TEST_WALLET_ADDRESS,\n    token: \"0x0000000000000000000000000000000000000000\",\n});\n(0, chai_1.expect)(response).to.equal(0n);",
                  "err": {},
                  "uuid": "00ccc26f-80f1-4db5-b8c8-87f5ce0a2a0b",
                  "parentUUID": "9adf3268-25b4-44e2-9fe2-ef8ca7b7eebc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00ccc26f-80f1-4db5-b8c8-87f5ce0a2a0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 132,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "3701eca5-62bf-4f91-942f-3af0a674e4ca",
              "title": "ClaimAllRevenue With WIP",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"ClaimAllRevenue With WIP\"",
                  "fullTitle": "Royalty Functions ClaimAllRevenue With WIP \"before all\" hook in \"ClaimAllRevenue With WIP\"",
                  "timedOut": false,
                  "duration": 24650,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// set up\n// minting Fee: 100, 10% LAP rev share, A expect to get 120 WIP\n// A -> B -> C -> D\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"free-collection\",\n    symbol: \"FREE\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: viem_1.zeroAddress,\n});\nspgNftContract = txData.spgNftContract;\nconst retA = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 100n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 100n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nipA = retA.ipId;\nlicenseId = retA.licenseTermsIds[0];\nconst retB = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipA],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\nipB = retB.ipId;\nconst retC = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipB],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\nipC = retC.ipId;\nawait client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipC],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});",
                  "err": {},
                  "uuid": "010849ec-5d30-462b-b29e-9ee243463d14",
                  "parentUUID": "3701eca5-62bf-4f91-942f-3af0a674e4ca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should claim all revenue",
                  "fullTitle": "Royalty Functions ClaimAllRevenue With WIP should claim all revenue",
                  "timedOut": false,
                  "duration": 17348,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ret = await client.royalty.claimAllRevenue({\n    ancestorIpId: ipA,\n    claimer: ipA,\n    childIpIds: [ipB, ipC],\n    royaltyPolicies: [generated_1.royaltyPolicyLapAddress[util_1.aeneid], generated_1.royaltyPolicyLapAddress[util_1.aeneid]],\n    currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n});\n(0, chai_1.expect)(ret.txHashes).to.be.an(\"array\");\n(0, chai_1.expect)(ret.claimedTokens[0].amount).to.equal(120n);",
                  "err": {},
                  "uuid": "1efe36ca-89ae-454b-8cef-789026aec89e",
                  "parentUUID": "3701eca5-62bf-4f91-942f-3af0a674e4ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1efe36ca-89ae-454b-8cef-789026aec89e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "92049189-2032-451f-857d-b7fe66fea01b",
              "title": "BatchClaimAllRevenue With WIP",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"BatchClaimAllRevenue With WIP\"",
                  "fullTitle": "Royalty Functions BatchClaimAllRevenue With WIP \"before all\" hook in \"BatchClaimAllRevenue With WIP\"",
                  "timedOut": false,
                  "duration": 47066,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nanotherAddress = derivedClient.address;\nawait client.wipClient.deposit({\n    amount: (0, viem_1.parseEther)(\"5\"),\n});\n/**\n * Asset Hierarchy Setup for Revenue Collection Tests\n *\n * Overview:\n * This test setup creates two distinct IP asset hierarchies (IpA and IpB) to demonstrate\n * different revenue collection scenarios using LAP (Licensing Agreement Policy) and LRP\n * (Licensing Revenue Policy) respectively.\n *\n * IpA Hierarchy (LAP - Licensing Agreement Policy):                           IpB Hierarchy (LRP - Licensing Revenue Policy):\n * ┌─────────────────────────────────────────────────────────────┐          ┌─────────────────────────────────────────────────────────────┐\n * │ IpA (Parent) - Total Expected Revenue: 130 WIP              │          │ IpB (Parent) - Total Expected Revenue: 330 WIP              │\n * ├─────────────────────────────────────────────────────────────┤          ├─────────────────────────────────────────────────────────────┤\n * │ Revenue Sources:                                            │          │ Revenue Sources:                                            │\n * │ ├── Minting Fee: 100 WIP                                    │          │ ├── Minting Fee: 150 WIP                                    │\n * │ ├── Revenue Share (ipA2->ipA1): 10 WIP (10% LAP)            │          │ ├── LRP Revenue Share: 10%                                  │\n * │ ├── Revenue Share (ipA3->ipA2): 10 WIP (10% LAP)            │          │ ├── Total Revenue: 330 WIP                                  │\n * │ └── Direct Payment (ipA3): 10 WIP (10% LAP)                 │          │    └── From ipB1: 150 WIP + 10% revenue share               │\n * │                                                             │          │    └── From ipB2: 150 WIP + 10% revenue share               │\n * │                                                             │          │                                                             │\n * | Ownership Distribution:                                     │          |                                                             │\n * │ ├── Wallet Address: 50%  65 WIP                             │          │ Revenue Flow:                                               │\n * │ └── Another Address: 50% 65 WIP                             │          │ ipB3                                                        │\n * │                                                             │          │ ├── ipB1 ─┐                                                 │\n * │ Revenue Flow:                                               │          │ └── ipB2 ─┴──> ipB (collects 330 WIP)                       │\n * │ ipA3                                                        │          │                                                             │\n * │  └──> ipA2 (20% LAP) ──> ipA1 (10% LAP) ──> ipA             │          │                                                             │\n * │       └──> Direct Payment: 100 WIP                          │          │                                                             │\n * └─────────────────────────────────────────────────────────────┘          └─────────────────────────────────────────────────────────────┘\n */\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"free-collection\",\n    symbol: \"FREE\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: viem_1.zeroAddress,\n});\nspgNftContract = txData.spgNftContract;\n// 1. Register ipA\nconst ret1A = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 100n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 100n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 50,\n        },\n        {\n            recipient: anotherAddress,\n            percentage: 50,\n        },\n    ],\n});\nipA = ret1A.ipId;\nlicenseId = ret1A.licenseTermsIds[0];\n// 2. Register ipB\nconst ret1B = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLrpAddress[util_1.aeneid],\n                defaultMintingFee: 150n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 150n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nipB = ret1B.ipId;\nlicenseId1 = ret1B.licenseTermsIds[0];\n// 3. Register ipA1 from ipA and ipB1 from ipB\nconst { results: ret2 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB],\n                licenseTermsIds: [licenseId1],\n            },\n        },\n    ],\n});\nipA1 = ret2[0].ipId;\nipB1 = ret2[1].ipId;\n// 4. Register ipA2 from ipA1 and ipB2 from ipB\nconst { results: ret3 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA1],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB],\n                licenseTermsIds: [licenseId1],\n            },\n        },\n    ],\n});\nipA2 = ret3[0].ipId;\nipB2 = ret3[1].ipId;\n// 5. Register ipA3 from ipA2 and ipB3 from ipB1 and ipB2\nconst { results: ret4 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA2],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB1, ipB2],\n                licenseTermsIds: [licenseId1, licenseId1],\n            },\n        },\n    ],\n});\nipA3 = ret4[0].ipId;\n// 6. Pay royalty on behalf of ipA2 to ipA3\nawait client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: ipA2,\n    payerIpId: ipA3,\n    token: common_1.WIP_TOKEN_ADDRESS,\n    amount: 100n,\n});\nconst balance = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nawait client.wipClient.withdraw({\n    amount: balance,\n});",
                  "err": {},
                  "uuid": "db7b5a17-db13-4671-b369-78187e895ecd",
                  "parentUUID": "92049189-2032-451f-857d-b7fe66fea01b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should batch claim all revenue",
                  "fullTitle": "Royalty Functions BatchClaimAllRevenue With WIP should batch claim all revenue",
                  "timedOut": false,
                  "duration": 17741,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const anotherAddressWipBalanceBefore = await client.wipClient.balanceOf(anotherAddress);\nconst result = await client.royalty.batchClaimAllRevenue({\n    ancestorIps: [\n        {\n            ipId: ipA,\n            claimer: util_1.TEST_WALLET_ADDRESS,\n            childIpIds: [ipA1, ipA2],\n            royaltyPolicies: [generated_1.royaltyPolicyLapAddress[util_1.aeneid], generated_1.royaltyPolicyLapAddress[util_1.aeneid]],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n        },\n        {\n            ipId: ipA,\n            claimer: anotherAddress,\n            childIpIds: [],\n            royaltyPolicies: [],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS],\n        },\n        {\n            ipId: ipB,\n            claimer: ipB,\n            childIpIds: [ipB1, ipB2],\n            royaltyPolicies: [generated_1.royaltyPolicyLrpAddress[util_1.aeneid], generated_1.royaltyPolicyLrpAddress[util_1.aeneid]],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n        },\n    ],\n});\nconst anotherAddressWipBalanceAfter = await client.wipClient.balanceOf(anotherAddress);\nconst walletWipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(result.txHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.claimedTokens[0].amount).to.equal(65n);\n(0, chai_1.expect)(result.claimedTokens[1].amount).to.equal(65n);\n(0, chai_1.expect)(result.claimedTokens[2].amount).to.equal(330n);\n(0, chai_1.expect)(walletWipBalanceAfter).to.equal(0n);\n(0, chai_1.expect)(anotherAddressWipBalanceAfter).to.equal(anotherAddressWipBalanceBefore + 65n);\n// Note: The final wallet balance cannot be precisely calculated because:\n// The test involves multiple transactions (claimAllRevenue, token transfers, etc.)\n// batchClaimAllRevenue only returns receipts for claimAllRevenue calls\n// Additional gas costs and token transfers occur outside the returned receipts",
                  "err": {},
                  "uuid": "edc869d4-c7ba-4e73-8420-cb1b625ffd5e",
                  "parentUUID": "92049189-2032-451f-857d-b7fe66fea01b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edc869d4-c7ba-4e73-8420-cb1b625ffd5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17741,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9e1a02c3-e557-41a8-8cae-75f6301789c2",
          "title": "WIP Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
          "file": "/test/integration/wip.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WIP Functions\"",
              "fullTitle": "WIP Functions \"before all\" hook in \"WIP Functions\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();",
              "err": {},
              "uuid": "d90db058-a551-4dc1-941e-d0db5771a1fb",
              "parentUUID": "9e1a02c3-e557-41a8-8cae-75f6301789c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c66b875e-f332-440b-8c02-d005bc58183e",
              "title": "deposit",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should deposit 0.01 WIP",
                  "fullTitle": "WIP Functions deposit should deposit 0.01 WIP",
                  "timedOut": false,
                  "duration": 4609,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ipAmt = (0, viem_1.parseEther)(\"0.01\");\nconst balanceBefore = await client.getWalletBalance();\nconst wipBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst rsp = await client.wipClient.deposit({\n    amount: ipAmt,\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.equal(wipBefore + ipAmt);\nconst gasCost = rsp.receipt.gasUsed * rsp.receipt.effectiveGasPrice;\n(0, chai_1.expect)(balanceAfter).to.equal(balanceBefore - ipAmt - gasCost);",
                  "err": {},
                  "uuid": "9c8eb5c8-e2ed-4d23-960d-8e29a7c03c54",
                  "parentUUID": "c66b875e-f332-440b-8c02-d005bc58183e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c8eb5c8-e2ed-4d23-960d-8e29a7c03c54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4609,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e78791f3-51c1-4e29-9ffd-02a128584351",
              "title": "transfer",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should transfer WIP",
                  "fullTitle": "WIP Functions transfer should transfer WIP",
                  "timedOut": false,
                  "duration": 4466,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rsp = await client.wipClient.transfer({\n    to: util_1.TEST_WALLET_ADDRESS,\n    amount: (0, viem_1.parseEther)(\"0.01\"),\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n//Due to approve cannot approve msy.sender, so skip transferFrom test",
                  "err": {},
                  "uuid": "3fecb46d-33a2-4842-8e0e-6921d45f40c9",
                  "parentUUID": "e78791f3-51c1-4e29-9ffd-02a128584351",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3fecb46d-33a2-4842-8e0e-6921d45f40c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4466,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "10160bd3-3b90-4245-be0b-f4a59efe5edb",
              "title": "withdraw",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should withdrawal WIP",
                  "fullTitle": "WIP Functions withdraw should withdrawal WIP",
                  "timedOut": false,
                  "duration": 4630,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst wipBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst rsp = await client.wipClient.withdraw({\n    amount: wipBefore,\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.equal(0n);\nconst balanceAfter = await client.getWalletBalance();\nconst gasCost = rsp.receipt.gasUsed * rsp.receipt.effectiveGasPrice;\n(0, chai_1.expect)(balanceAfter).to.equal(balanceBefore + wipBefore - gasCost);",
                  "err": {},
                  "uuid": "beff7763-73fc-4cff-a0a3-1809fde29299",
                  "parentUUID": "10160bd3-3b90-4245-be0b-f4a59efe5edb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "beff7763-73fc-4cff-a0a3-1809fde29299"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4630,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
{
  "stats": {
    "suites": 56,
    "tests": 166,
    "passes": 166,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-18T03:14:19.404Z",
    "end": "2025-09-18T03:57:35.182Z",
    "duration": 2595778,
    "testsRegistered": 166,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "adc68154-e353-4134-b89b-463264f125f2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1f8550c-db01-435d-a296-21d337d3c0f8",
          "title": "Dispute Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
          "file": "/test/integration/dispute.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Dispute Functions\"",
              "fullTitle": "Dispute Functions \"before all\" hook in \"Dispute Functions\"",
              "timedOut": false,
              "duration": 10472,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientA = (0, util_1.getStoryClient)();\nconst derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nclientB = derivedClient.clientB;\nminimumBond = await (0, oov3_1.getMinimumBond)(util_1.publicClient, new generated_1.ArbitrationPolicyUmaClient(util_1.publicClient, util_1.walletClient), src_1.WIP_TOKEN_ADDRESS);\nconst txData = await clientA.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nconst nftContract = txData.spgNftContract;\nipIdB = (await clientB.ipAsset.mintAndRegisterIp({\n    spgNftContract: nftContract,\n})).ipId;",
              "err": {},
              "uuid": "2f3fb523-5448-42db-b47a-2a8206ebd808",
              "parentUUID": "e1f8550c-db01-435d-a296-21d337d3c0f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should not cancel a dispute (yet)",
              "fullTitle": "Dispute Functions it should not cancel a dispute (yet)",
              "timedOut": false,
              "duration": 14830,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const raiseResponse = await clientA.dispute.raiseDispute({\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 2592000,\n    bond: minimumBond,\n});\nawait (0, chai_1.expect)(clientA.dispute.cancelDispute({\n    disputeId: raiseResponse.disputeId,\n})).to.be.rejected;",
              "err": {},
              "uuid": "18e541d1-7395-48c9-9c92-4432bca71349",
              "parentUUID": "e1f8550c-db01-435d-a296-21d337d3c0f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "635c3a2d-cfa0-4d2e-b276-9496ebc9ee6c",
              "title": "raiseDispute and counter dispute",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
              "file": "/test/integration/dispute.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should raise a dispute",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise a dispute",
                  "timedOut": false,
                  "duration": 10386,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const raiseDisputeRequest = {\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 2592000,\n    bond: minimumBond,\n};\nconst response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\ndisputeId = response.disputeId;",
                  "err": {},
                  "uuid": "5b9d4b49-b359-456b-b8a5-6575a1debb13",
                  "parentUUID": "635c3a2d-cfa0-4d2e-b276-9496ebc9ee6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate all enum values defined in DisputeTargetTag",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should validate all enum values defined in DisputeTargetTag",
                  "timedOut": false,
                  "duration": 414,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const tagHex = (0, viem_1.toHex)(tag, { size: 32 });\n    const { allowed } = await clientA.dispute.disputeModuleClient.isWhitelistedDisputeTag({\n        tag: tagHex,\n    });\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        (0, chai_1.expect)(allowed).equal(false);\n    }\n    else {\n        (0, chai_1.expect)(allowed).equal(true);\n    }\n}",
                  "err": {},
                  "uuid": "aec5d3fe-2796-4ed4-ace7-e4a2df073d59",
                  "parentUUID": "635c3a2d-cfa0-4d2e-b276-9496ebc9ee6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should raise disputes with different DisputeTargetTag enum values",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise disputes with different DisputeTargetTag enum values",
                  "timedOut": false,
                  "duration": 50168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const raiseDisputeRequest = {\n        targetIpId: ipIdB,\n        cid: await generateCID(),\n        targetTag: tag,\n        liveness: 2592000,\n        bond: minimumBond,\n    };\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        await (0, chai_1.expect)(clientA.dispute.raiseDispute(raiseDisputeRequest)).to.be.rejectedWith(\"The target tag IN_DISPUTE is not whitelisted\");\n    }\n    else {\n        const response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n        (0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n        (0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\n    }\n}",
                  "err": {},
                  "uuid": "2e8c8344-2a23-487f-88d1-cd50229f320a",
                  "parentUUID": "635c3a2d-cfa0-4d2e-b276-9496ebc9ee6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject a dispute with an invalid tag not defined in the enum",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should reject a dispute with an invalid tag not defined in the enum",
                  "timedOut": false,
                  "duration": 350,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientA.dispute.raiseDispute({\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: \"INVALID_TAG\",\n    liveness: 2592000,\n    bond: minimumBond,\n})).to.be.rejectedWith(\"The target tag INVALID_TAG is not whitelisted\");",
                  "err": {},
                  "uuid": "c145c615-eb98-4429-b663-1638a9116623",
                  "parentUUID": "635c3a2d-cfa0-4d2e-b276-9496ebc9ee6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to counter existing dispute once",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should be able to counter existing dispute once",
                  "timedOut": false,
                  "duration": 15583,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assertionId = await clientB.dispute.disputeIdToAssertionId(disputeId);\nconst counterEvidenceCID = await generateCID();\nconst ret = await clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n});\n(0, chai_1.expect)(ret.txHash).to.be.a(\"string\");\n// should throw error if attempting to dispute assertion again\nawait (0, chai_1.expect)(clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "9123c9ad-37ab-4c01-8718-b079b03c244f",
                  "parentUUID": "635c3a2d-cfa0-4d2e-b276-9496ebc9ee6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b9d4b49-b359-456b-b8a5-6575a1debb13",
                "aec5d3fe-2796-4ed4-ace7-e4a2df073d59",
                "2e8c8344-2a23-487f-88d1-cd50229f320a",
                "c145c615-eb98-4429-b663-1638a9116623",
                "9123c9ad-37ab-4c01-8718-b079b03c244f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76901,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "ea364c67-8364-4bd2-845a-99e24a470185",
              "title": "Dispute resolution",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
              "file": "/test/integration/dispute.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Dispute resolution\"",
                  "fullTitle": "Dispute Functions Dispute resolution \"before each\" hook in \"Dispute resolution\"",
                  "timedOut": false,
                  "duration": 43445,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup NFT collection\nconst txData = await clientA.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\n// Get parent IP ID and license terms ID\nconst ipIdAndLicenseResponse = await clientA.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContract,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: src_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: generated_1.evenSplitGroupPoolAddress[util_1.aeneid],\n            },\n        },\n    ],\n});\nparentIpId = ipIdAndLicenseResponse.ipId;\nlicenseTermsId = ipIdAndLicenseResponse.licenseTermsIds[0];\n//Create a derivative ip\nconst derivativeIpIdResponse1 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\nchildIpId = derivativeIpIdResponse1.ipId;\n// Create a second derivative ip\nconst derivativeIpIdResponse2 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\nchildIpId2 = derivativeIpIdResponse2.ipId;\n// Raise a dispute\nconst response = await clientA.dispute.raiseDispute({\n    targetIpId: parentIpId,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 1,\n    bond: minimumBond,\n});\ndisputeId = response.disputeId;\n// This timeout guarantees that the assertion is expired\n// its intended to be longer than the current block time\n// so it won't be included in the same block\nawait new Promise((resolve) => setTimeout(resolve, 3000));",
                  "err": {},
                  "uuid": "2dea04f4-6fd9-4c46-b4a9-54e56d98769a",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should tag infringing ip",
                  "fullTitle": "Dispute Functions Dispute resolution should tag infringing ip",
                  "timedOut": false,
                  "duration": 9837,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Tag derivative IP as infringing\nconst results = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: childIpId2,\n            disputeId: disputeId,\n        },\n    ],\n});\n(0, chai_1.expect)(results[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d08bfebb-85fc-4eab-8419-206fd4da547f",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag a single IP as infringing without using multicall",
                  "fullTitle": "Dispute Functions Dispute resolution should tag a single IP as infringing without using multicall",
                  "timedOut": false,
                  "duration": 13952,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Test Flow:\n * 1. Set judgment on an existing dispute to mark it as valid (did in `before each` block)\n * 2. Verify the dispute state changed correctly after judgment\n * 3. Try to tag a derivative IP using the judged dispute\n */\n// Step 1: Set judgment on an existing dispute to mark it as valid\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Step 2: Verify dispute state\n// The disputes() function returns multiple values about the dispute:\n// - targetTag: the tag we wanted to apply when raising the dispute\n// - currentTag: the current state of the dispute after judgment\n// After a successful judgment, currentTag should equal targetTag\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag); // Verify judgment was recorded correctly\n// Step 3: Attempt to tag a derivative IP\n// This will fail if:\n// - The dispute is not in a valid state (still IN_DISPUTE or cleared)\n// - The IP we're trying to tag is not actually a derivative of the disputed IP\n// - The dispute has already been used to tag this IP\nconst response = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId, // The derivative IP to tag\n            disputeId: disputeId, // Using the judged dispute as basis for tagging\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: false, // Force single transaction instead of batch\n    },\n});\n// Verify we got the expected response\n(0, chai_1.expect)(response).to.have.lengthOf(1);\n(0, chai_1.expect)(response[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "5a224428-b092-4687-99ee-9da8e0cffb2e",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag multiple IPs as infringing using multicall",
                  "fullTitle": "Dispute Functions Dispute resolution should tag multiple IPs as infringing using multicall",
                  "timedOut": false,
                  "duration": 29035,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const disputeResponse = await clientA.dispute.raiseDispute({\n    targetIpId: parentIpId,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 1,\n    bond: minimumBond,\n});\nconst testDisputeId = disputeResponse.disputeId;\nconst derivativeResponse2 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nconst newChildIpId = derivativeResponse2.ipId;\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, testDisputeId);\n// This timeout guarantees that the assertion is expired\n// its intended to be longer than the current block time\n// so it won't be included in the same block\nawait new Promise((resolve) => setTimeout(resolve, 3000));\nconst { currentTag, targetTag } = await getDisputeState(testDisputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst response = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: testDisputeId,\n        },\n        {\n            ipId: newChildIpId,\n            disputeId: testDisputeId,\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: true,\n    },\n});\n(0, chai_1.expect)(response).to.have.lengthOf(1);\n(0, chai_1.expect)(response[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "02f43406-1c41-4abc-935f-428c1bad4733",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag multiple IPs without multicall when specified",
                  "fullTitle": "Dispute Functions Dispute resolution should tag multiple IPs without multicall when specified",
                  "timedOut": false,
                  "duration": 21777,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create two new derivative IPs sequentially\nconst derivativeResponse3 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nconst derivativeResponse4 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst responses = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: derivativeResponse3.ipId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: derivativeResponse4.ipId,\n            disputeId: disputeId,\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: false,\n    },\n});\n(0, chai_1.expect)(responses).to.have.lengthOf(2);\n(0, chai_1.expect)(responses[0].txHash).to.be.a(\"string\");\n(0, chai_1.expect)(responses[1].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "bc5371fa-f647-4f3e-a58f-435e996162f8",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to tag with invalid dispute ID",
                  "fullTitle": "Dispute Functions Dispute resolution should fail when trying to tag with invalid dispute ID",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: 999999n,\n        },\n    ],\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "891f765a-2552-4201-bf12-350c082d8859",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve a dispute successfully when initiated by dispute initiator",
                  "fullTitle": "Dispute Functions Dispute resolution should resolve a dispute successfully when initiated by dispute initiator",
                  "timedOut": false,
                  "duration": 9869,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst response = await clientA.dispute.resolveDispute({\n    disputeId: disputeId,\n    data: \"0x\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "052f4ef6-10a1-4c11-8c51-0070ae2fe624",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when non-initiator tries to resolve the dispute",
                  "fullTitle": "Dispute Functions Dispute resolution should fail when non-initiator tries to resolve the dispute",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientB.dispute.resolveDispute({\n    disputeId: disputeId,\n    data: \"0x\",\n})).to.be.rejectedWith(\"NotDisputeInitiator\");",
                  "err": {},
                  "uuid": "ad282609-b96f-4738-8de0-9602e568468e",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should propagate IMPROPER_REGISTRATION tag to derivative IPs",
                  "fullTitle": "Dispute Functions Dispute resolution should propagate IMPROPER_REGISTRATION tag to derivative IPs",
                  "timedOut": false,
                  "duration": 9985,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Verify the dispute state changed correctly\nconst { currentTag: parentCurrentTag, targetTag: parentTargetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(parentCurrentTag).to.equal(parentTargetTag);\n// Propagate the tag to both derivative IPs\nconst results = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: childIpId2,\n            disputeId: disputeId,\n        },\n    ],\n});\nconst logData = results[0].receipt?.logs[0].data;\nconst firstWord = logData.slice(0, 66);\nconst childDisputeId = BigInt(firstWord);\n// Verify successful tagging\n(0, chai_1.expect)(results[0].txHash).to.be.a(\"string\");\nconst { currentTag: childCurrentTag } = await getDisputeState(childDisputeId);\n// Convert the IMPROPER_USAGE tag to hex for comparison\nconst improperUsageTagHex = (0, viem_1.toHex)(src_1.DisputeTargetTag.IMPROPER_REGISTRATION, { size: 32 });\n// Verify both child IPs have the IMPROPER_USAGE tag by\n// fetching and comparing their dispute tags\n(0, chai_1.expect)(parentCurrentTag).to.equal(parentTargetTag);\n(0, chai_1.expect)(childCurrentTag).to.equal(improperUsageTagHex);",
                  "err": {},
                  "uuid": "68a2ea1c-cc13-4f68-a858-b001cf9a2b15",
                  "parentUUID": "ea364c67-8364-4bd2-845a-99e24a470185",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d08bfebb-85fc-4eab-8419-206fd4da547f",
                "5a224428-b092-4687-99ee-9da8e0cffb2e",
                "02f43406-1c41-4abc-935f-428c1bad4733",
                "bc5371fa-f647-4f3e-a58f-435e996162f8",
                "891f765a-2552-4201-bf12-350c082d8859",
                "052f4ef6-10a1-4c11-8c51-0070ae2fe624",
                "ad282609-b96f-4738-8de0-9602e568468e",
                "68a2ea1c-cc13-4f68-a858-b001cf9a2b15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94635,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "18e541d1-7395-48c9-9c92-4432bca71349"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14830,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e29496c9-61fb-46d2-9db0-3e5819344292",
          "title": "Group Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
          "file": "/test/integration/group.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Group Functions\"",
              "fullTitle": "Group Functions \"before all\" hook in \"Group Functions\"",
              "timedOut": false,
              "duration": 4842,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\n// Create NFT Collection\nspgNftContract = (await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n})).spgNftContract;",
              "err": {},
              "uuid": "fe66c951-cf65-439d-8afb-0c7c5a4a2520",
              "parentUUID": "e29496c9-61fb-46d2-9db0-3e5819344292",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
              "title": "Group Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
              "file": "/test/integration/group.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Group Operations\"",
                  "fullTitle": "Group Functions Group Operations \"before all\" hook in \"Group Operations\"",
                  "timedOut": false,
                  "duration": 14712,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create initial IP with license terms\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    allowDuplicates: false,\n    licenseTermsData,\n});\nlicenseTermsId = result.licenseTermsIds[0];\nipId = result.ipId;\n// Set licensing config\nawait client.license.setLicensingConfig({\n    ipId,\n    licenseTermsId,\n    licenseTemplate: generated_1.piLicenseTemplateAddress[util_1.aeneid],\n    licensingConfig: {\n        isSet: true,\n        mintingFee: 0n,\n        licensingHook: viem_1.zeroAddress,\n        hookData: viem_1.zeroAddress,\n        commercialRevShare: 0,\n        disabled: false,\n        expectMinimumGroupRewardShare: 0,\n        expectGroupRewardPool: groupPoolAddress,\n    },\n});",
                  "err": {},
                  "uuid": "2d3ed101-7764-435c-bcd3-43ba41f451bb",
                  "parentUUID": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully register group and attach license",
                  "fullTitle": "Group Functions Group Operations should successfully register group and attach license",
                  "timedOut": false,
                  "duration": 4938,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroupAndAttachLicense({\n    groupPool: groupPoolAddress,\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n});\ngroupId = result.groupId;\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "6f0d5fe0-78d8-451a-81f3-6f71f5048aed",
                  "parentUUID": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully mint, register IP, attach license and add to group",
                  "fullTitle": "Group Functions Group Operations should successfully mint, register IP, attach license and add to group",
                  "timedOut": false,
                  "duration": 5168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.mintAndRegisterIpAndAttachLicenseAndAddToGroup({\n    groupId,\n    spgNftContract,\n    licenseData: [\n        {\n            licenseTermsId,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: groupPoolAddress,\n            },\n        },\n    ],\n    maxAllowedRewardShare: 5,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "372a5667-5d41-418d-be24-8f635a48d209",
                  "parentUUID": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register a basic group",
                  "fullTitle": "Group Functions Group Operations should successfully register a basic group",
                  "timedOut": false,
                  "duration": 4870,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroup({\n    groupPool: groupPoolAddress,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "f4976647-a365-40c1-9096-358c5c40734b",
                  "parentUUID": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register existing IP with license and add to group",
                  "fullTitle": "Group Functions Group Operations should successfully register existing IP with license and add to group",
                  "timedOut": false,
                  "duration": 10228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(spgNftContract, \"test-metadata\");\nconst result = await client.groupClient.registerIpAndAttachLicenseAndAddToGroup({\n    groupId,\n    nftContract: spgNftContract,\n    tokenId,\n    maxAllowedRewardShare: 5,\n    licenseData: [\n        {\n            licenseTermsId,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: groupPoolAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d2085199-fdb2-44da-be89-0af9b9cc662e",
                  "parentUUID": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register group with license and add multiple IPs",
                  "fullTitle": "Group Functions Group Operations should successfully register group with license and add multiple IPs",
                  "timedOut": false,
                  "duration": 5059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroupAndAttachLicenseAndAddIps({\n    groupPool: groupPoolAddress,\n    maxAllowedRewardShare: 5,\n    ipIds: [ipId],\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "db139bf4-8e97-4850-88a0-4388180ef7af",
                  "parentUUID": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to add unregistered IP to group",
                  "fullTitle": "Group Functions Group Operations should fail when trying to add unregistered IP to group",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.groupClient.registerGroupAndAttachLicenseAndAddIps({\n    groupPool: groupPoolAddress,\n    maxAllowedRewardShare: 5,\n    ipIds: [viem_1.zeroAddress], // Invalid IP address\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n})).to.be.rejectedWith(\"Failed to register group and attach license and add ips\");",
                  "err": {},
                  "uuid": "4bbfb6bd-010f-4ad8-8933-68c52e7588f2",
                  "parentUUID": "e090b4ca-99d3-4f4d-b00f-bdb833b99b80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "03be8540-0059-444c-b06d-ba73ec1d04b5",
                  "title": "Add IPs to Group and Remove IPs from Group",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
                  "file": "/test/integration/group.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully add multiple IPs to group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should successfully add multiple IPs to group",
                      "timedOut": false,
                      "duration": 11126,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const registerResult = await client.ipAsset.batchMintAndRegisterIpAssetWithPilTerms({\n    args: [\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n    ],\n});\nipIds = registerResult.results?.map((result) => result.ipId) ?? [];\nconst result = await client.groupClient.addIpsToGroup({\n    groupIpId: groupId,\n    ipIds: ipIds,\n    maxAllowedRewardSharePercentage: 5,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "fdac5d4a-fb60-4bb4-99e7-f0e081e81ab8",
                      "parentUUID": "03be8540-0059-444c-b06d-ba73ec1d04b5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully remove IPs from group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should successfully remove IPs from group",
                      "timedOut": false,
                      "duration": 4901,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.groupClient.removeIpsFromGroup({\n    groupIpId: groupId,\n    ipIds: ipIds,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "0e7d526a-daca-4e7b-8549-fd3f0145df93",
                      "parentUUID": "03be8540-0059-444c-b06d-ba73ec1d04b5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to remove IPs from a non-existent group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should fail when trying to remove IPs from a non-existent group",
                      "timedOut": false,
                      "duration": 5685,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const registerResult = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData,\n});\nconst testIpId = registerResult.ipId;\nconst nonExistentGroupId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.removeIpsFromGroup({\n    groupIpId: nonExistentGroupId,\n    ipIds: [testIpId],\n})).to.be.rejectedWith(\"Failed to remove IPs from group\");",
                      "err": {},
                      "uuid": "c3bb8d16-f507-4e60-bfbc-6119e72cc228",
                      "parentUUID": "03be8540-0059-444c-b06d-ba73ec1d04b5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to remove non-existent IPs from a group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should fail when trying to remove non-existent IPs from a group",
                      "timedOut": false,
                      "duration": 4940,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const groupResult = await client.groupClient.registerGroup({\n    groupPool: groupPoolAddress,\n});\nconst testGroupId = groupResult.groupId;\nconst nonExistentIpId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.removeIpsFromGroup({\n    groupIpId: testGroupId,\n    ipIds: [nonExistentIpId],\n})).to.be.rejectedWith(\"Failed to remove IPs from group\");",
                      "err": {},
                      "uuid": "a3a87b1b-4e09-40fb-b903-30511443a647",
                      "parentUUID": "03be8540-0059-444c-b06d-ba73ec1d04b5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fdac5d4a-fb60-4bb4-99e7-f0e081e81ab8",
                    "0e7d526a-daca-4e7b-8549-fd3f0145df93",
                    "c3bb8d16-f507-4e60-bfbc-6119e72cc228",
                    "a3a87b1b-4e09-40fb-b903-30511443a647"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 26652,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "6f0d5fe0-78d8-451a-81f3-6f71f5048aed",
                "372a5667-5d41-418d-be24-8f635a48d209",
                "f4976647-a365-40c1-9096-358c5c40734b",
                "d2085199-fdb2-44da-be89-0af9b9cc662e",
                "db139bf4-8e97-4850-88a0-4388180ef7af",
                "4bbfb6bd-010f-4ad8-8933-68c52e7588f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "352deda7-76a4-4365-8116-88bbf3e718a9",
              "title": "Collect Royalty and Claim Reward",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
              "file": "/test/integration/group.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Collect Royalty and Claim Reward\"",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward \"before all\" hook in \"Collect Royalty and Claim Reward\"",
                  "timedOut": false,
                  "duration": 10596,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Register IP id\nconst result1 = await mintAndRegisterIpAssetWithPilTermsHelper();\nipId = result1.ipId;\nlicenseTermsId = result1.licenseTermsIds[0];\n// Register group id\ngroupIpId = await registerGroupAndAttachLicenseHelper(licenseTermsId, [ipId]);",
                  "err": {},
                  "uuid": "7526f2c7-0d80-45da-b90e-a66cee12da18",
                  "parentUUID": "352deda7-76a4-4365-8116-88bbf3e718a9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully collect royalties",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully collect royalties",
                  "timedOut": false,
                  "duration": 28889,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mint and register child IP id\nconst childIpId = await mintAndRegisterIpAndMakeDerivativeHelper(groupIpId, licenseTermsId);\n// Pay royalties from child IP id to group IP id and transfer to vault\nawait payRoyaltyAndTransferToVaultHelper(childIpId, groupIpId, src_1.WIP_TOKEN_ADDRESS, 100n);\n// Collect royalties\nconst result = await client.groupClient.collectRoyalties({\n    groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.collectedRoyalties).to.equal(10n);",
                  "err": {},
                  "uuid": "f6331863-dcbd-4e63-91bd-03804d3a008f",
                  "parentUUID": "352deda7-76a4-4365-8116-88bbf3e718a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get claimable reward",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully get claimable reward",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.getClaimableReward({\n    groupIpId: groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n});\n(0, chai_1.expect)(result).to.deep.equal([10n]);",
                  "err": {},
                  "uuid": "e4e06847-5249-41b5-8642-0f7529c122f8",
                  "parentUUID": "352deda7-76a4-4365-8116-88bbf3e718a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully claim reward",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully claim reward",
                  "timedOut": false,
                  "duration": 14405,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mint license tokens to the IP id which doesn't have a royalty vault\nawait client.license.mintLicenseTokens({\n    licensorIpId: ipId,\n    licenseTermsId,\n    amount: 100,\n    maxMintingFee: 1,\n    maxRevenueShare: 100,\n});\n// Claim reward\nconst result = await client.groupClient.claimReward({\n    groupIpId: groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.claimedReward?.[0].amount[0]).to.equal(10n);",
                  "err": {},
                  "uuid": "8ea79bec-686f-440d-99c9-f4488047961f",
                  "parentUUID": "352deda7-76a4-4365-8116-88bbf3e718a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to claim reward for a non-existent group",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should fail when trying to claim reward for a non-existent group",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nonExistentGroupId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.claimReward({\n    groupIpId: nonExistentGroupId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n})).to.be.rejectedWith(\"Failed to claim reward\");",
                  "err": {},
                  "uuid": "7bde43ce-bdf8-4941-9810-d1e3d096faef",
                  "parentUUID": "352deda7-76a4-4365-8116-88bbf3e718a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to claim reward with invalid token address",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should fail when trying to claim reward with invalid token address",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidTokenAddress = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.claimReward({\n    groupIpId: groupIpId,\n    currencyToken: invalidTokenAddress,\n    memberIpIds: [ipId],\n})).to.be.rejectedWith(\"Failed to claim reward\");",
                  "err": {},
                  "uuid": "9f379a67-b996-4d46-a3f7-6a659dcad4be",
                  "parentUUID": "352deda7-76a4-4365-8116-88bbf3e718a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully collect royalties and claim reward in one transaction",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully collect royalties and claim reward in one transaction",
                  "timedOut": false,
                  "duration": 57254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ipIds = [];\nconst result1 = await mintAndRegisterIpAssetWithPilTermsHelper();\nconst result2 = await mintAndRegisterIpAssetWithPilTermsHelper();\nipIds.push(result1.ipId);\nipIds.push(result2.ipId);\nlicenseTermsId = result1.licenseTermsIds[0];\nconst groupId = await registerGroupAndAttachLicenseHelper(licenseTermsId, ipIds);\nconst childIpId1 = await mintAndRegisterIpAndMakeDerivativeHelper(groupId, licenseTermsId);\nconst childIpId2 = await mintAndRegisterIpAndMakeDerivativeHelper(groupId, licenseTermsId);\nawait payRoyaltyAndTransferToVaultHelper(childIpId1, groupId, src_1.WIP_TOKEN_ADDRESS, 100n);\nawait payRoyaltyAndTransferToVaultHelper(childIpId2, groupId, src_1.WIP_TOKEN_ADDRESS, 100n);\nconst result = await client.groupClient.collectAndDistributeGroupRoyalties({\n    groupIpId: groupId,\n    currencyTokens: [src_1.WIP_TOKEN_ADDRESS],\n    memberIpIds: ipIds,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.collectedRoyalties?.[0].amount).to.equal(20n);\n(0, chai_1.expect)(result.royaltiesDistributed?.[0].amount).to.equal(10n);\n(0, chai_1.expect)(result.royaltiesDistributed?.[1].amount).to.equal(10n);",
                  "err": {},
                  "uuid": "11ee5ec8-931e-4a61-a055-0b36f3c46993",
                  "parentUUID": "352deda7-76a4-4365-8116-88bbf3e718a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6331863-dcbd-4e63-91bd-03804d3a008f",
                "e4e06847-5249-41b5-8642-0f7529c122f8",
                "8ea79bec-686f-440d-99c9-f4488047961f",
                "7bde43ce-bdf8-4941-9810-d1e3d096faef",
                "9f379a67-b996-4d46-a3f7-6a659dcad4be",
                "11ee5ec8-931e-4a61-a055-0b36f3c46993"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100807,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8ce81d20-f514-46e2-a9a1-5c99319ebaf6",
          "title": "IPAccount Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
          "file": "/test/integration/ipAccount.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"IPAccount Functions\"",
              "fullTitle": "IPAccount Functions \"before all\" hook in \"IPAccount Functions\"",
              "timedOut": false,
              "duration": 10048,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = registerResult.ipId;\ndata = (0, viem_1.encodeFunctionData)({\n    abi: generated_1.accessControllerAbi,\n    functionName: \"setTransientPermission\",\n    args: [\n        (0, viem_1.getAddress)(ipId),\n        (0, viem_1.getAddress)(util_1.TEST_WALLET_ADDRESS),\n        (0, viem_1.getAddress)(coreMetadataModule),\n        (0, viem_1.toFunctionSelector)(\"function setAll(address,string,bytes32,bytes32)\"),\n        src_1.AccessPermission.ALLOW,\n    ],\n});",
              "err": {},
              "uuid": "c9618743-b045-4560-b4da-c932f77d7055",
              "parentUUID": "8ce81d20-f514-46e2-a9a1-5c99319ebaf6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully set ip metadata",
              "fullTitle": "IPAccount Functions should successfully set ip metadata",
              "timedOut": false,
              "duration": 9026,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const txHash = await client.ipAccount.setIpMetadata({\n    ipId: ipId,\n    metadataURI: \"https://example.com\",\n    metadataHash: (0, viem_1.toHex)(\"test\", { size: 32 }),\n});\n(0, chai_1.expect)(txHash).to.be.a(\"string\");",
              "err": {},
              "uuid": "16d35367-3429-4c5f-a5b2-9e52a0308abe",
              "parentUUID": "8ce81d20-f514-46e2-a9a1-5c99319ebaf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully transfer ERC20 tokens",
              "fullTitle": "IPAccount Functions should successfully transfer ERC20 tokens",
              "timedOut": false,
              "duration": 36517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const erc20 = new generated_1.Erc20Client(util_1.publicClient, util_1.walletClient);\n// 1. Query token balance of ipId and wallet before\nconst initialErc20BalanceOfIpId = await erc20.balanceOf({\n    account: ipId,\n});\nconst initialErc20BalanceOfWallet = await erc20.balanceOf({\n    account: util_1.TEST_WALLET_ADDRESS,\n});\nconst initialWipBalanceOfIpId = await client.wipClient.balanceOf(ipId);\nconst initialWipBalanceOfWallet = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n// 2. transfer erc20 token to the ip account\nconst txHash = await erc20.mint({\n    to: ipId,\n    amount: (0, viem_1.parseEther)(\"0.002\"),\n});\nawait util_1.publicClient.waitForTransactionReceipt({\n    hash: txHash,\n});\n// 3. transfer wip to the ip account\nawait client.wipClient.deposit({\n    amount: 1n,\n});\nawait client.wipClient.transfer({\n    to: ipId,\n    amount: 1n,\n});\n// 4. transfer token of ip account to wallet address\nconst ret = await client.ipAccount.transferErc20({\n    ipId,\n    tokens: [\n        {\n            address: src_1.WIP_TOKEN_ADDRESS,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: 1n,\n        },\n        {\n            address: erc20.address,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: (0, viem_1.parseEther)(\"0.001\"),\n        },\n        {\n            address: erc20.address,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: (0, viem_1.parseEther)(\"0.001\"),\n        },\n    ],\n});\n// 5. query token balance of ipId and wallet address after\nconst finalErc20BalanceOfIpId = await erc20.balanceOf({\n    account: ipId,\n});\nconst finalWipBalanceOfIpId = await client.wipClient.balanceOf(ipId);\nconst finalErc20BalanceOfWallet = await erc20.balanceOf({\n    account: util_1.TEST_WALLET_ADDRESS,\n});\nconst finalWipBalanceOfWallet = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(ret.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(finalErc20BalanceOfIpId).to.equal(initialErc20BalanceOfIpId);\n(0, chai_1.expect)(finalWipBalanceOfIpId).to.equal(initialWipBalanceOfIpId);\n(0, chai_1.expect)(finalErc20BalanceOfWallet).to.equal(initialErc20BalanceOfWallet + (0, viem_1.parseEther)(\"0.002\"));\n(0, chai_1.expect)(finalWipBalanceOfWallet).to.equal(initialWipBalanceOfWallet + 1n);",
              "err": {},
              "uuid": "287c0f2c-f86e-43c7-a57c-83274532d87f",
              "parentUUID": "8ce81d20-f514-46e2-a9a1-5c99319ebaf6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7c430d95-5c87-454b-808d-8a0a510bd542",
              "title": "execute",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully execute a transaction",
                  "fullTitle": "IPAccount Functions execute should successfully execute a transaction",
                  "timedOut": false,
                  "duration": 8951,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.execute({\n    to: permissionAddress,\n    value: 0,\n    data: data,\n    ipId: ipId,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "f7ea8fa1-e314-47b0-a95c-d432db1e3213",
                  "parentUUID": "7c430d95-5c87-454b-808d-8a0a510bd542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions execute should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.execute({\n    to: permissionAddress,\n    value: 0,\n    data: data,\n    ipId: \"0x0000000000000000000000000000000000000000\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "fb80199b-0278-4df0-9a49-220f68476cb2",
                  "parentUUID": "7c430d95-5c87-454b-808d-8a0a510bd542",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7ea8fa1-e314-47b0-a95c-d432db1e3213",
                "fb80199b-0278-4df0-9a49-220f68476cb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9038,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b9a91782-87f5-4bff-a543-23675234f770",
              "title": "executeWithSig",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully execute with valid signature",
                  "fullTitle": "IPAccount Functions executeWithSig should successfully execute with valid signature",
                  "timedOut": false,
                  "duration": 9054,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Get the IP Account nonce (state)\nconst nonceResult = await client.ipAccount.getIpAccountNonce(ipId);\n// Generate signature for the execute operation itself\n// We need to sign the data that will be executed, not the permission data\nconst { signature } = await (0, src_1.getSignature)({\n    state: nonceResult,\n    to: permissionAddress,\n    encodeData: data,\n    wallet: util_1.walletClient,\n    verifyingContract: ipId,\n    deadline: VALID_DEADLINE,\n    chainId: util_1.aeneid,\n});\n// Execute with signature\nconst response = await client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: VALID_DEADLINE,\n    signature: signature,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "38092830-7079-42d1-9e14-8fd1d3f83861",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with expired deadline",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with expired deadline",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: EXPIRED_DEADLINE,\n    signature: \"0x\",\n})).to.be.rejectedWith(\"IPAccount__ExpiredSignature\");",
                  "err": {},
                  "uuid": "300a3974-7745-4eba-bebd-c29439e5c358",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid signature format",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with invalid signature format",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: VALID_DEADLINE,\n    signature: \"0x1234567890abcdef\", // Invalid signature format\n})).to.be.rejectedWith(\"IPAccount__InvalidSignature\");",
                  "err": {},
                  "uuid": "a563a03b-cd55-4ecd-bfb7-bb89be0ac8ab",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with signature from wrong signer",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with signature from wrong signer",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Generate signature with wrong signer\nconst wrongSigner = \"0x1234567890123456789012345678901234567890\";\nconst nonceResult = await client.ipAccount.getIpAccountNonce(ipId);\nconst { signature } = await (0, src_1.getSignature)({\n    state: nonceResult,\n    to: permissionAddress,\n    encodeData: data,\n    wallet: util_1.walletClient,\n    verifyingContract: ipId,\n    deadline: VALID_DEADLINE,\n    chainId: util_1.aeneid,\n});\nawait (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: wrongSigner,\n    deadline: VALID_DEADLINE,\n    signature: signature,\n})).to.be.rejectedWith(\"IPAccount__InvalidSignature\");",
                  "err": {},
                  "uuid": "b5506c73-8496-4edf-85a9-ec8fdc0c68f8",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId format",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with invalid ipId format",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nonceResult = await client.ipAccount.getIpAccountNonce(ipId);\nconst { signature } = await (0, src_1.getSignature)({\n    state: nonceResult,\n    to: permissionAddress,\n    encodeData: data,\n    wallet: util_1.walletClient,\n    verifyingContract: ipId,\n    deadline: VALID_DEADLINE,\n    chainId: util_1.aeneid,\n});\nawait (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: \"0x123\", // Invalid address format\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: VALID_DEADLINE,\n    signature: signature,\n})).to.be.rejectedWith(\"Invalid address: 0x123.\");",
                  "err": {},
                  "uuid": "1eb66651-1463-409b-86f4-5f12a901372a",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when IP account does not exist",
                  "fullTitle": "IPAccount Functions executeWithSig should fail when IP account does not exist",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a real non-existent IP address (but with correct format)\nconst nonExistentIpId = \"0x1111111111111111111111111111111111111111\";\n// Generate signature for this non-existent IP\n// Note: We need to try to get nonce first, if IP doesn't exist, this step should fail\ntry {\n    const nonceResult = await client.ipAccount.getIpAccountNonce(nonExistentIpId);\n    const { signature } = await (0, src_1.getSignature)({\n        state: nonceResult,\n        to: permissionAddress,\n        encodeData: data,\n        wallet: util_1.walletClient,\n        verifyingContract: nonExistentIpId, // Use non-existent IP as verifying contract\n        deadline: VALID_DEADLINE,\n        chainId: util_1.aeneid,\n    });\n    await (0, chai_1.expect)(client.ipAccount.executeWithSig({\n        to: permissionAddress,\n        data: data,\n        ipId: nonExistentIpId,\n        signer: util_1.TEST_WALLET_ADDRESS,\n        deadline: VALID_DEADLINE,\n        signature: signature,\n    })).to.be.rejectedWith(\"IPAccount__InvalidSignature\"); // Should fail because IP doesn't exist\n}\ncatch (error) {\n    // If getting nonce fails, it means IP indeed doesn't exist, which is also our expected result\n    (0, chai_1.expect)(error.message).to.include(\"Failed to get the IP Account nonce\");\n}",
                  "err": {},
                  "uuid": "cef006d7-24bf-405e-bfac-c22363131ecd",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with unauthorized signer",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with unauthorized signer",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Test various unauthorized signer scenarios\nconst unauthorizedSigner = \"0x2222222222222222222222222222222222222222\";\nconst nonceResult = await client.ipAccount.getIpAccountNonce(ipId);\nconst { signature } = await (0, src_1.getSignature)({\n    state: nonceResult,\n    to: permissionAddress,\n    encodeData: data,\n    wallet: util_1.walletClient,\n    verifyingContract: ipId,\n    deadline: VALID_DEADLINE,\n    chainId: util_1.aeneid,\n});\nawait (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: unauthorizedSigner, // Unauthorized signer\n    deadline: VALID_DEADLINE,\n    signature: signature,\n})).to.be.rejectedWith(\"IPAccount__InvalidSignature\"); // Contract returns InvalidSignature for permission issues",
                  "err": {},
                  "uuid": "4e83ed99-b921-4e48-81bd-695e59d24ef1",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with signature for wrong data",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with signature for wrong data",
                  "timedOut": false,
                  "duration": 164,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Generate signature for different data than what we execute\nconst wrongData = (0, viem_1.encodeFunctionData)({\n    abi: generated_1.accessControllerAbi,\n    functionName: \"setTransientPermission\",\n    args: [\n        (0, viem_1.getAddress)(\"0x1234567890123456789012345678901234567890\"),\n        (0, viem_1.getAddress)(util_1.TEST_WALLET_ADDRESS),\n        (0, viem_1.getAddress)(coreMetadataModule),\n        (0, viem_1.toFunctionSelector)(\"function setAll(address,string,bytes32,bytes32)\"),\n        src_1.AccessPermission.DENY,\n    ],\n});\nconst nonceResult = await client.ipAccount.getIpAccountNonce(ipId);\nconst { signature } = await (0, src_1.getSignature)({\n    state: nonceResult,\n    to: permissionAddress,\n    encodeData: wrongData, // Sign wrong data\n    wallet: util_1.walletClient,\n    verifyingContract: ipId,\n    deadline: VALID_DEADLINE,\n    chainId: util_1.aeneid,\n});\nawait (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data, // Execute with original data, not the signed data\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: VALID_DEADLINE,\n    signature: signature,\n})).to.be.rejectedWith(\"IPAccount__InvalidSignature\"); // Should fail because data doesn't match signature",
                  "err": {},
                  "uuid": "3d2fcf07-fc70-414e-baa4-624dcb012931",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with signature for wrong target address",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with signature for wrong target address",
                  "timedOut": false,
                  "duration": 179,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Generate signature for different target address than what we execute\nconst wrongTarget = \"0x1234567890123456789012345678901234567890\";\nconst nonceResult = await client.ipAccount.getIpAccountNonce(ipId);\nconst { signature } = await (0, src_1.getSignature)({\n    state: nonceResult,\n    to: wrongTarget, // Sign for wrong target\n    encodeData: data,\n    wallet: util_1.walletClient,\n    verifyingContract: ipId,\n    deadline: VALID_DEADLINE,\n    chainId: util_1.aeneid,\n});\nawait (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress, // Execute with original target, not the signed target\n    data: data,\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: VALID_DEADLINE,\n    signature: signature,\n})).to.be.rejectedWith(\"IPAccount__InvalidSignature\"); // Should fail because target doesn't match signature",
                  "err": {},
                  "uuid": "b6f43480-8a94-430c-8541-eec0e5a8fdb8",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should execute with zero value transaction",
                  "fullTitle": "IPAccount Functions executeWithSig should execute with zero value transaction",
                  "timedOut": false,
                  "duration": 4941,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Test successful execution with zero value\nconst nonceResult = await client.ipAccount.getIpAccountNonce(ipId);\nconst { signature } = await (0, src_1.getSignature)({\n    state: nonceResult,\n    to: permissionAddress,\n    encodeData: data,\n    wallet: util_1.walletClient,\n    verifyingContract: ipId,\n    deadline: VALID_DEADLINE,\n    chainId: util_1.aeneid,\n});\nconst response = await client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: VALID_DEADLINE,\n    signature: signature,\n    value: 0, // Explicitly set zero value\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "2019904d-1846-49c7-ba66-afb06ff1636d",
                  "parentUUID": "b9a91782-87f5-4bff-a543-23675234f770",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38092830-7079-42d1-9e14-8fd1d3f83861",
                "300a3974-7745-4eba-bebd-c29439e5c358",
                "a563a03b-cd55-4ecd-bfb7-bb89be0ac8ab",
                "b5506c73-8496-4edf-85a9-ec8fdc0c68f8",
                "1eb66651-1463-409b-86f4-5f12a901372a",
                "cef006d7-24bf-405e-bfac-c22363131ecd",
                "4e83ed99-b921-4e48-81bd-695e59d24ef1",
                "3d2fcf07-fc70-414e-baa4-624dcb012931",
                "b6f43480-8a94-430c-8541-eec0e5a8fdb8",
                "2019904d-1846-49c7-ba66-afb06ff1636d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15026,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "60a644f4-a1ab-455e-aa9e-5904832285af",
              "title": "getIpAccountNonce",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully return account nonce",
                  "fullTitle": "IPAccount Functions getIpAccountNonce should successfully return account nonce",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.getIpAccountNonce(ipId);\n(0, chai_1.expect)(response).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "0cc9dec7-1d7b-48db-8461-cd54e2d8d6a6",
                  "parentUUID": "60a644f4-a1ab-455e-aa9e-5904832285af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions getIpAccountNonce should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.getIpAccountNonce(\"0x0000000000000000000000000000000000000000\"))\n    .to.be.rejected;",
                  "err": {},
                  "uuid": "f5b62fbb-e029-4a3b-8969-e17bf0e27444",
                  "parentUUID": "60a644f4-a1ab-455e-aa9e-5904832285af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cc9dec7-1d7b-48db-8461-cd54e2d8d6a6",
                "f5b62fbb-e029-4a3b-8969-e17bf0e27444"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 173,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e6ee99a9-2195-4df2-a983-dc11f58f5a44",
              "title": "getToken",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully return token information",
                  "fullTitle": "IPAccount Functions getToken should successfully return token information",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.getToken(ipId);\n(0, chai_1.expect)(response.chainId).to.be.a(\"bigint\");\n(0, chai_1.expect)(response.tokenContract).to.be.a(\"string\");\n(0, chai_1.expect)(response.tokenId).to.be.a(\"bigint\");\n(0, chai_1.expect)(response.tokenContract).to.equal(util_1.mockERC721);",
                  "err": {},
                  "uuid": "53a9a6b8-fe75-4461-b5c6-e8f33b8f31d2",
                  "parentUUID": "e6ee99a9-2195-4df2-a983-dc11f58f5a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions getToken should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.getToken(\"0x0000000000000000000000000000000000000000\")).to.be\n    .rejected;",
                  "err": {},
                  "uuid": "6c7918af-e39e-4c7c-b83f-17f64c47b60c",
                  "parentUUID": "e6ee99a9-2195-4df2-a983-dc11f58f5a44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53a9a6b8-fe75-4461-b5c6-e8f33b8f31d2",
                "6c7918af-e39e-4c7c-b83f-17f64c47b60c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 177,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "16d35367-3429-4c5f-a5b2-9e52a0308abe",
            "287c0f2c-f86e-43c7-a57c-83274532d87f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45543,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "04b5e100-23d6-43cf-910c-d7cba3428dda",
          "title": "IP Asset Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
          "file": "/test/integration/ipAsset.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"IP Asset Functions\"",
              "fullTitle": "IP Asset Functions \"before all\" hook in \"IP Asset Functions\"",
              "timedOut": false,
              "duration": 93,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst res = await client.license.registerNonComSocialRemixingPIL();\nnoCommercialLicenseTermsId = res.licenseTermsId;",
              "err": {},
              "uuid": "6c520781-d74b-4b20-adf8-4a33a7b02424",
              "parentUUID": "04b5e100-23d6-43cf-910c-d7cba3428dda",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6eecc095-f183-428e-9ffc-8218668412fd",
              "title": "Basic IP Asset Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register an IP Asset",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register an IP Asset",
                  "timedOut": false,
                  "duration": 18074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nchildIpId = response.ipId;\n(0, chai_1.expect)(childIpId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "46c565df-954a-4082-8d9c-89aea36b1ed3",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register an IP Asset with multiple metadata fields",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register an IP Asset with multiple metadata fields",
                  "timedOut": false,
                  "duration": 14158,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    ipMetadata: {\n        ipMetadataURI: \"ipfs://test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataURI: \"ipfs://test-nft-uri\",\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\nchildIpId2 = response.ipId;\n(0, chai_1.expect)(response.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(response.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "d77f09b3-8a3c-4b45-91a8-06add829e8e8",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register with invalid metadata hash length",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should not register with invalid metadata hash length",
                  "timedOut": false,
                  "duration": 5133,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    ipMetadata: {\n        ipMetadataHash: \"0x123\", // Invalid length hash\n        nftMetadataHash: (0, viem_1.toHex)(\"valid-hash\", { size: 32 }),\n    },\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "a9977db9-df86-4fa0-badf-f83b95f6fe5e",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register with non-existent token ID",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should not register with non-existent token ID",
                  "timedOut": false,
                  "duration": 246,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: BigInt(Number.MAX_SAFE_INTEGER),\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "55fd29e3-46ee-4c24-a75a-740a48071172",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with Non-Commercial Remix PIL",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with Non-Commercial Remix PIL",
                  "timedOut": false,
                  "duration": 24392,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nparentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: childIpId,\n    parentIpIds: [parentIpId],\n    licenseTermsIds: [noCommercialLicenseTermsId],\n    maxMintingFee: \"0\",\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"0\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "46b8165e-7f07-4ec4-932b-2aba4f02b8a4",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with Commercial Remix PIL",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with Commercial Remix PIL",
                  "timedOut": false,
                  "duration": 24623,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Register commercial remix PIL\nconst licenseResponse = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 10n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n// Register parent IP\nconst tokenId = await (0, util_1.getTokenId)();\nconst commercialParentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\n// Attach license terms to parent IP\nawait client.license.attachLicenseTerms({\n    ipId: commercialParentIpId,\n    licenseTermsId: licenseResponse.licenseTermsId,\n});\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: childIpId2,\n    parentIpIds: [commercialParentIpId],\n    licenseTermsIds: [licenseResponse.licenseTermsId],\n    maxMintingFee: \"100\",\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "11c86b60-599e-49ff-a272-3b5689e9cc90",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with multiple parent IPs",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with multiple parent IPs",
                  "timedOut": false,
                  "duration": 53978,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create first parent IP\nconst tokenId1 = await (0, util_1.getTokenId)();\nconst parentIpId1 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId1,\n})).ipId;\n// Create second parent IP\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst parentIpId2 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId2,\n})).ipId;\n// Attach license terms to both parents\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId1,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId2,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\n// Create child IP\nconst childTokenId = await (0, util_1.getTokenId)();\nconst newChildIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId,\n})).ipId;\n// Register derivative with multiple parents\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: newChildIpId,\n    parentIpIds: [parentIpId1, parentIpId2],\n    licenseTermsIds: [noCommercialLicenseTermsId, noCommercialLicenseTermsId],\n    maxMintingFee: \"0\",\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"0\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "859071cb-7fc6-4871-9d78-cf51442737a6",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with license tokens",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with license tokens",
                  "timedOut": false,
                  "duration": 20350,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst ipId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nconst mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: noCommercialLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: \"0\",\n    maxRevenueShare: 1,\n});\nconst response = await client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "5f2d58bf-945d-4cb8-998b-d34239add48b",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if IP asset is registered",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should return true if IP asset is registered",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isRegistered = await client.ipAsset.isRegistered(parentIpId);\n(0, chai_1.expect)(isRegistered).to.equal(true);",
                  "err": {},
                  "uuid": "49eaa1af-a9e7-4f93-9608-0844639a4c9d",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if IP asset is not registered",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should return false if IP asset is not registered",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isRegistered = await client.ipAsset.isRegistered(\"0x1234567890123456789012345678901234567890\");\n(0, chai_1.expect)(isRegistered).to.equal(false);",
                  "err": {},
                  "uuid": "4d5328d4-497e-482b-860a-b2558fa6d34c",
                  "parentUUID": "6eecc095-f183-428e-9ffc-8218668412fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46c565df-954a-4082-8d9c-89aea36b1ed3",
                "d77f09b3-8a3c-4b45-91a8-06add829e8e8",
                "a9977db9-df86-4fa0-badf-f83b95f6fe5e",
                "55fd29e3-46ee-4c24-a75a-740a48071172",
                "46b8165e-7f07-4ec4-932b-2aba4f02b8a4",
                "11c86b60-599e-49ff-a272-3b5689e9cc90",
                "859071cb-7fc6-4871-9d78-cf51442737a6",
                "5f2d58bf-945d-4cb8-998b-d34239add48b",
                "49eaa1af-a9e7-4f93-9608-0844639a4c9d",
                "4d5328d4-497e-482b-860a-b2558fa6d34c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 161140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "68869666-6cfd-4bcd-b531-ca106b2e8340",
              "title": "SPG NFT Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"SPG NFT Operations\"",
                  "fullTitle": "IP Asset Functions SPG NFT Operations \"before all\" hook in \"SPG NFT Operations\"",
                  "timedOut": false,
                  "duration": 11921,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup NFT collection\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\n// Setup license terms\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContract,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];\n// Setup ERC20\nconst mockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\nawait mockERC20.approve(generated_1.derivativeWorkflowsAddress[util_1.aeneid], viem_1.maxUint256);\nawait mockERC20.approve(generated_1.royaltyTokenDistributionWorkflowsAddress[util_1.aeneid], viem_1.maxUint256);\nawait mockERC20.mint(util_1.TEST_WALLET_ADDRESS, 100000n);",
                  "err": {},
                  "uuid": "f9b81d9b-3ebf-4313-85ee-55fb64499eb3",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register IP Asset with metadata",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP Asset with metadata",
                  "timedOut": false,
                  "duration": 9983,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst response = await client.ipAsset.register({\n    nftContract,\n    tokenId,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(response.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "73b9c567-6ee9-4c85-a334-3cf450e0c0be",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative IP",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register derivative IP",
                  "timedOut": false,
                  "duration": 10619,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenChildId = await (0, util_1.mintBySpg)(nftContract);\nconst result = await client.ipAsset.registerDerivativeIp({\n    nftContract: nftContract,\n    tokenId: tokenChildId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: \"0\",\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: \"0\",\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "9364bf57-bfd4-4dfb-8312-efd25045d71a",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach PIL terms",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach PIL terms",
                  "timedOut": false,
                  "duration": 14885,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: nftContract,\n    tokenId,\n    deadline: 1000n,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: src_1.PILFlavor.commercialUse({\n                defaultMintingFee: 10000n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n            }),\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 10000n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "58c76d95-7806-488e-9ac3-05ed463aa71b",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach PIL terms with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach PIL terms with license terms max limit",
                  "timedOut": false,
                  "duration": 11393,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 10000n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                  "err": {},
                  "uuid": "47307c07-3929-4934-aeca-372e63c22486",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and make derivative",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and make derivative",
                  "timedOut": false,
                  "duration": 5740,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "d73bbc24-4429-4a19-a544-ff2a45e2df3c",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP",
                  "timedOut": false,
                  "duration": 5098,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: nftContract,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    allowDuplicates: false,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "e6816ce8-e91b-4e45-a619-0a6db3c17e2e",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register PIL terms and attach",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register PIL terms and attach",
                  "timedOut": false,
                  "duration": 5496,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.registerPilTermsAndAttach({\n    ipId: parentIpId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: src_1.PILFlavor.nonCommercialSocialRemixing(),\n        },\n    ],\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds?.length).to.be.equal(2);\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "003f2f9b-e7b5-4d06-a851-fceafabf9b4a",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register PIL terms and attach with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register PIL terms and attach with license terms max limit",
                  "timedOut": false,
                  "duration": 10867,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.registerPilTermsAndAttach({\n    ipId: parentIpId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "0e188e94-0c6e-4c4c-a871-d707fd1732a3",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 15297,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: \"0\",\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], mintLicenseTokensResult.licenseTokenIds[0]);\nconst result = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: nftContract,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "7bbb5200-c9b8-4dec-83b5-d6bc25223ac8",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 28638,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: \"0\",\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], mintLicenseTokensResult.licenseTokenIds[0]);\nconst result = await client.ipAsset.registerIpAndMakeDerivativeWithLicenseTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "e5197dbf-023c-4ea6-ab69-a95ee736cc70",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 21562,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: src_1.PILFlavor.creativeCommonsAttribution({\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n            }),\n            maxLicenseTokens: 10,\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 1,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds?.length).to.be.equal(2);\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                  "err": {},
                  "uuid": "31f7a795-fcfb-4c03-bb79-2ac3cd9217a0",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens with license terms max limit",
                  "timedOut": false,
                  "duration": 18069,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 1,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "80fcd5f6-e453-4080-8583-05e14fa35080",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens with complex royalty shares",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens with complex royalty shares",
                  "timedOut": false,
                  "duration": 16147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: generated_1.erc20Address[util_1.aeneid],\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 43,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 17,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 2,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 38,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "2dc3869f-9cef-4aef-9bb9-4c0ef95a4dff",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative and attach license terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register derivative and attach license terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 15833,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: \"0\",\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: \"0\",\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "19565774-321d-4e85-8188-b47c43367822",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and attach PIL terms and distribute royalty tokens without licensing config",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and attach PIL terms and distribute royalty tokens without licensing config",
                  "timedOut": false,
                  "duration": 5748,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: nftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "0504f25c-15a4-4a26-9b91-a5bbb764de1a",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and attach PIL terms and distribute royalty tokens with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and attach PIL terms and distribute royalty tokens with license terms max limit",
                  "timedOut": false,
                  "duration": 7087,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: nftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            maxLicenseTokens: 100,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 11n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: src_1.PILFlavor.creativeCommonsAttribution({\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n            }),\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds?.length).to.be.equal(3);\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                  "err": {},
                  "uuid": "88a6adb3-3f12-4023-9d33-dc9feddfe4b3",
                  "parentUUID": "68869666-6cfd-4bcd-b531-ca106b2e8340",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73b9c567-6ee9-4c85-a334-3cf450e0c0be",
                "9364bf57-bfd4-4dfb-8312-efd25045d71a",
                "58c76d95-7806-488e-9ac3-05ed463aa71b",
                "47307c07-3929-4934-aeca-372e63c22486",
                "d73bbc24-4429-4a19-a544-ff2a45e2df3c",
                "e6816ce8-e91b-4e45-a619-0a6db3c17e2e",
                "003f2f9b-e7b5-4d06-a851-fceafabf9b4a",
                "0e188e94-0c6e-4c4c-a871-d707fd1732a3",
                "7bbb5200-c9b8-4dec-83b5-d6bc25223ac8",
                "e5197dbf-023c-4ea6-ab69-a95ee736cc70",
                "31f7a795-fcfb-4c03-bb79-2ac3cd9217a0",
                "80fcd5f6-e453-4080-8583-05e14fa35080",
                "2dc3869f-9cef-4aef-9bb9-4c0ef95a4dff",
                "19565774-321d-4e85-8188-b47c43367822",
                "0504f25c-15a4-4a26-9b91-a5bbb764de1a",
                "88a6adb3-3f12-4023-9d33-dc9feddfe4b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 202462,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "64f1c98a-55d6-4891-8b20-7f70aba55eca",
              "title": "SPG With Minting Fees with Public Minting SPG NFT Contract",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"SPG With Minting Fees with Public Minting SPG NFT Contract\"",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract \"before all\" hook in \"SPG With Minting Fees with Public Minting SPG NFT Contract\"",
                  "timedOut": false,
                  "duration": 15955,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// ensure we start with no wip since we will be wrapping them\nconst wipBalance = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nif (wipBalance > 0n) {\n    await client.wipClient.withdraw({\n        amount: wipBalance,\n    });\n}\n// create a nft collection that requires minting fee\nconst rsp = await client.nftClient.createNFTCollection({\n    name: \"Premium Collection\",\n    symbol: \"PC\",\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n    mintFee: 100n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n});\nnftContractWithMintingFee = rsp.spgNftContract;\n// create parent ip with minting fee\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContractWithMintingFee,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 150n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: true,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: BigInt(0),\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: BigInt(0),\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 150n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "8f46b2bd-3827-4060-a076-79f97d32879f",
                  "parentUUID": "64f1c98a-55d6-4891-8b20-7f70aba55eca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should auto wrap ip when mint and register derivative",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative",
                  "timedOut": false,
                  "duration": 6531,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalanceBefore = await client.getWalletBalance();\nconst rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContractWithMintingFee, // pay 100 here\n    derivData: {\n        parentIpIds: [parentIpId], // pay 150 here\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst userBalanceAfter = await client.getWalletBalance();\nconst cost = 150n + 100n;\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - cost));\n// user should not have any WIP tokens since we swap the exact amount\nconst wipBalance = await client.ipAsset.wipClient.balanceOf({\n    owner: util_1.TEST_WALLET_ADDRESS,\n});\n(0, chai_1.expect)(wipBalance.result).to.be.equal(0n);",
                  "err": {},
                  "uuid": "a6a3999d-9f94-4820-a6eb-1036695ba7e6",
                  "parentUUID": "64f1c98a-55d6-4891-8b20-7f70aba55eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when mint and register derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative with license tokens",
                  "timedOut": false,
                  "duration": 25809,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { licenseTokenIds } = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenIds[0]);\n(0, chai_1.expect)(licenseTokenIds).to.be.an(\"array\");\nconst { txHash, ipId } = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: nftContractWithMintingFee,\n    licenseTokenIds: licenseTokenIds,\n    maxRts: common_1.MAX_ROYALTY_TOKEN,\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n});\n(0, chai_1.expect)(txHash).to.be.a(\"string\");\n(0, chai_1.expect)(ipId).to.be.a(\"string\");\nconst isRegistered = await client.ipAsset.isRegistered(ipId);\n(0, chai_1.expect)(isRegistered).to.equal(true);",
                  "err": {},
                  "uuid": "a4b76852-1d95-439f-8122-4b19d7472851",
                  "parentUUID": "64f1c98a-55d6-4891-8b20-7f70aba55eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when registering derivative",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when registering derivative",
                  "timedOut": false,
                  "duration": 15955,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst balanceBefore = await client.getWalletBalance();\nconst rsp = await client.ipAsset.registerDerivativeIp({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 150n));",
                  "err": {},
                  "uuid": "dc31b2ef-d257-4992-8c4f-a9ea9691592a",
                  "parentUUID": "64f1c98a-55d6-4891-8b20-7f70aba55eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should spend existing wip when register derivative and distribute loyalty tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should spend existing wip when register derivative and distribute loyalty tokens",
                  "timedOut": false,
                  "duration": 25140,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nawait client.wipClient.deposit({\n    amount: 150n,\n});\nconst rsp = await client.ipAsset.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipRoyaltyVault).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.be.equal(0n);",
                  "err": {},
                  "uuid": "0dcce1b8-e8fe-4b88-848a-506088d18d07",
                  "parentUUID": "64f1c98a-55d6-4891-8b20-7f70aba55eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when mint and register derivative and distribute loyalty tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative and distribute loyalty tokens",
                  "timedOut": false,
                  "duration": 6321,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens({\n    spgNftContract: nftContractWithMintingFee,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "fcbb71db-de87-4b2a-b63b-f42aa8fe5860",
                  "parentUUID": "64f1c98a-55d6-4891-8b20-7f70aba55eca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6a3999d-9f94-4820-a6eb-1036695ba7e6",
                "a4b76852-1d95-439f-8122-4b19d7472851",
                "dc31b2ef-d257-4992-8c4f-a9ea9691592a",
                "0dcce1b8-e8fe-4b88-848a-506088d18d07",
                "fcbb71db-de87-4b2a-b63b-f42aa8fe5860"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79756,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
              "title": "IP Asset Registration with Private Minting SPG NFT Contracts",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"IP Asset Registration with Private Minting SPG NFT Contracts\"",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts \"before all\" hook in \"IP Asset Registration with Private Minting SPG NFT Contracts\"",
                  "timedOut": false,
                  "duration": 4892,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const privateMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Private Minting Collection\",\n    symbol: \"PMC\",\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 3n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPrivateMinting = privateMintingCollectionResult.spgNftContract;",
                  "err": {},
                  "uuid": "3880ed1a-7703-47d4-97bb-3b4f73f5706b",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully when call mint and register ip asset with pil terms",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip asset with pil terms",
                  "timedOut": false,
                  "duration": 16702,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n        {\n            terms: src_1.PILFlavor.commercialRemix({\n                defaultMintingFee: 6n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                commercialRevShare: 90,\n            }),\n            maxLicenseTokens: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.licenseTermsIds?.length).to.be.equal(2);\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "88fe93a0-023c-489c-99e8-cfe19886296b",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip asset with pil terms with license terms max limit",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip asset with pil terms with license terms max limit",
                  "timedOut": false,
                  "duration": 13105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 5n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 5n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n    ipMetadata: {\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "aea13c97-895b-41c7-b88c-ee4f65809b09",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and make derivative",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and make derivative",
                  "timedOut": false,
                  "duration": 11061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 100n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "1677b1ef-63c6-44cb-974e-7b60b945171e",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip",
                  "timedOut": false,
                  "duration": 10410,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    allowDuplicates: false,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "87a2cc5f-6afe-40c0-a350-dfcd08294437",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 25005,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: \"0\",\n    maxRevenueShare: 100,\n});\nconst licenseTokenId = mintLicenseTokensResult.licenseTokenIds[0];\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenId);\nconst result = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    licenseTokenIds: [licenseTokenId],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "ac97676d-bc88-4075-9ca6-50391f80582d",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and attach pil terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and attach pil terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 11135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "82022b62-e332-40c3-a2fe-d82b15c7c5ad",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should succeed when call mint and register ip and make derivative and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should succeed when call mint and register ip and make derivative and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 21887,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: true,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\nconst newParentIpId = result.ipId;\nconst licenseId = result.licenseTermsIds[0];\nconst rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    derivData: {\n        parentIpIds: [newParentIpId],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "b88c4154-8c11-4c59-b093-43350c4b7c8a",
                  "parentUUID": "5b95571f-ac83-4548-9fc5-0d7f17670cc9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88fe93a0-023c-489c-99e8-cfe19886296b",
                "aea13c97-895b-41c7-b88c-ee4f65809b09",
                "1677b1ef-63c6-44cb-974e-7b60b945171e",
                "87a2cc5f-6afe-40c0-a350-dfcd08294437",
                "ac97676d-bc88-4075-9ca6-50391f80582d",
                "82022b62-e332-40c3-a2fe-d82b15c7c5ad",
                "b88c4154-8c11-4c59-b093-43350c4b7c8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109305,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "36a12f9b-4ec5-4596-b8cc-abab4ddd431c",
              "title": "Batch Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Batch Operations\"",
                  "fullTitle": "IP Asset Functions Batch Operations \"before all\" hook in \"Batch Operations\"",
                  "timedOut": false,
                  "duration": 14850,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\nconst tokenId = await (0, util_1.getTokenId)();\nparentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;",
                  "err": {},
                  "uuid": "bdab968b-cd55-4964-ac07-b2214802c3d9",
                  "parentUUID": "36a12f9b-4ec5-4596-b8cc-abab4ddd431c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should batch register derivative",
                  "fullTitle": "IP Asset Functions Batch Operations should batch register derivative",
                  "timedOut": false,
                  "duration": 30978,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const childTokenId = await (0, util_1.getTokenId)();\nconst childIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId,\n})).ipId;\nconst childTokenId2 = await (0, util_1.getTokenId)();\nconst childIpId2 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId2,\n})).ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nconst result = await client.ipAsset.batchRegisterDerivative({\n    args: [\n        {\n            childIpId: childIpId,\n            parentIpIds: [parentIpId],\n            licenseTermsIds: [noCommercialLicenseTermsId],\n            maxMintingFee: \"0\",\n            maxRts: 5 * 10 ** 6,\n            maxRevenueShare: \"0\",\n        },\n        {\n            childIpId: childIpId2,\n            parentIpIds: [parentIpId],\n            licenseTermsIds: [noCommercialLicenseTermsId],\n            maxMintingFee: \"0\",\n            maxRts: 5 * 10 ** 6,\n            maxRevenueShare: \"0\",\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "6dbead41-2507-45c0-ac49-44d37cba5408",
                  "parentUUID": "36a12f9b-4ec5-4596-b8cc-abab4ddd431c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch mint and register IP asset with PIL terms",
                  "fullTitle": "IP Asset Functions Batch Operations should batch mint and register IP asset with PIL terms",
                  "timedOut": false,
                  "duration": 11344,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.batchMintAndRegisterIpAssetWithPilTerms({\n    args: [\n        {\n            spgNftContract: nftContract,\n            licenseTermsData: [\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 8n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 8n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                    maxLicenseTokens: 100,\n                },\n                {\n                    terms: src_1.PILFlavor.commercialRemix({\n                        defaultMintingFee: 100n,\n                        commercialRevShare: 10,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                    }),\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 100n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                },\n            ],\n        },\n        {\n            spgNftContract: nftContract,\n            licenseTermsData: [\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 8n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 8n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                    maxLicenseTokens: 100,\n                },\n            ],\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.results).to.be.an(\"array\");\n(0, chai_1.expect)(result.results[0].licenseTermsIds).to.be.an(\"array\").and.length(2);\n(0, chai_1.expect)(result.results[0].maxLicenseTokensTxHashes).to.be.an(\"array\").and.length(1);\n(0, chai_1.expect)(result.results[1].licenseTermsIds).to.be.an(\"array\").and.length(1);\n(0, chai_1.expect)(result.results[1].maxLicenseTokensTxHashes).to.be.an(\"array\").and.length(1);",
                  "err": {},
                  "uuid": "49171d03-d287-4909-a657-0edda294791a",
                  "parentUUID": "36a12f9b-4ec5-4596-b8cc-abab4ddd431c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch mint and register IP asset and make derivative",
                  "fullTitle": "IP Asset Functions Batch Operations should batch mint and register IP asset and make derivative",
                  "timedOut": false,
                  "duration": 6098,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract: nftContract,\n            derivData: {\n                parentIpIds: [parentIpId],\n                licenseTermsIds: [noCommercialLicenseTermsId],\n                maxMintingFee: \"0\",\n                maxRts: 5 * 10 ** 6,\n                maxRevenueShare: \"0\",\n            },\n        },\n        {\n            spgNftContract: nftContract,\n            derivData: {\n                parentIpIds: [parentIpId],\n                licenseTermsIds: [noCommercialLicenseTermsId],\n                maxMintingFee: \"0\",\n                maxRts: 5 * 10 ** 6,\n                maxRevenueShare: \"0\",\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.results).to.be.an(\"array\");",
                  "err": {},
                  "uuid": "00d53170-850b-4ae0-8077-ee8078c7a5b4",
                  "parentUUID": "36a12f9b-4ec5-4596-b8cc-abab4ddd431c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch register giving parameters",
                  "fullTitle": "IP Asset Functions Batch Operations should batch register giving parameters",
                  "timedOut": false,
                  "duration": 30274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst spgTokenId1 = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst spgTokenId2 = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.batchRegister({\n    args: [\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId,\n        },\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId2,\n        },\n        {\n            nftContract,\n            tokenId: spgTokenId1,\n            ipMetadata: {\n                ipMetadataURI: \"test-uri2\",\n                ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash2\", { size: 32 }),\n                nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash2\", { size: 32 }),\n            },\n        },\n        {\n            nftContract,\n            tokenId: spgTokenId2,\n            ipMetadata: {\n                ipMetadataURI: \"test-uri\",\n                ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n                nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.results).to.be.an(\"array\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "71a9d0bc-8b40-4703-a770-8ad8d775a8ec",
                  "parentUUID": "36a12f9b-4ec5-4596-b8cc-abab4ddd431c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dbead41-2507-45c0-ac49-44d37cba5408",
                "49171d03-d287-4909-a657-0edda294791a",
                "00d53170-850b-4ae0-8077-ee8078c7a5b4",
                "71a9d0bc-8b40-4703-a770-8ad8d775a8ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78694,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "f188e63e-bac2-4f1f-85f5-b73809cf6c9c",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Error Cases\"",
                  "fullTitle": "IP Asset Functions Error Cases \"before all\" hook in \"Error Cases\"",
                  "timedOut": false,
                  "duration": 9067,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;",
                  "err": {},
                  "uuid": "7aa0a37f-cea2-4c24-a821-fc79eb09449b",
                  "parentUUID": "f188e63e-bac2-4f1f-85f5-b73809cf6c9c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail to register unowned NFT",
                  "fullTitle": "IP Asset Functions Error Cases should fail to register unowned NFT",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: nftContract,\n    tokenId: 999999n, // Non-existent token\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "200cdfa4-3a9e-41d6-ad2a-c2591e47ef05",
                  "parentUUID": "f188e63e-bac2-4f1f-85f5-b73809cf6c9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "200cdfa4-3a9e-41d6-ad2a-c2591e47ef05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 258,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "179bfbbb-1927-4611-8589-139eba173831",
              "title": "Other Edge Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Other Edge Cases\"",
                  "fullTitle": "IP Asset Functions Other Edge Cases \"before all\" hook in \"Other Edge Cases\"",
                  "timedOut": false,
                  "duration": 15310,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst parentIpResponse = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nparentIpId = parentIpResponse.ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});",
                  "err": {},
                  "uuid": "e2d3168e-adcf-47c1-a082-1c3cbcfbe05a",
                  "parentUUID": "179bfbbb-1927-4611-8589-139eba173831",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0b4e3282-befb-4956-9653-2dad072366e5",
                  "title": "License Token Edge Cases",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail when trying to use non-existent license token",
                      "fullTitle": "IP Asset Functions Other Edge Cases License Token Edge Cases should fail when trying to use non-existent license token",
                      "timedOut": false,
                      "duration": 14215,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId,\n    })).ipId,\n    licenseTokenIds: [BigInt(999999)], // Non-existent token\n    maxRts: 5 * 10 ** 6,\n})).to.be.rejected;",
                      "err": {},
                      "uuid": "4cf287af-3f5f-41da-b883-2028d1867ded",
                      "parentUUID": "0b4e3282-befb-4956-9653-2dad072366e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to use same license token twice",
                      "fullTitle": "IP Asset Functions Other Edge Cases License Token Edge Cases should fail when trying to use same license token twice",
                      "timedOut": false,
                      "duration": 42950,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: noCommercialLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: \"0\",\n    maxRevenueShare: 1,\n});\nconst tokenId1 = await (0, util_1.getTokenId)();\nawait client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n    })).ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n});\nconst tokenId2 = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n    })).ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n})).to.be.rejected; // Should fail as token already used",
                      "err": {},
                      "uuid": "c5b1fb74-711a-4a13-af52-cbbd1ba42940",
                      "parentUUID": "0b4e3282-befb-4956-9653-2dad072366e5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4cf287af-3f5f-41da-b883-2028d1867ded",
                    "c5b1fb74-711a-4a13-af52-cbbd1ba42940"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 57165,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "45ae23c4-cada-4744-bcf5-3f1994b55eff",
                  "title": "Batch Operation Edge Cases",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle partial failures in batch registration",
                      "fullTitle": "IP Asset Functions Other Edge Cases Batch Operation Edge Cases should handle partial failures in batch registration",
                      "timedOut": false,
                      "duration": 14982,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nawait client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId1,\n});\nawait (0, chai_1.expect)(client.ipAsset.batchRegister({\n    args: [\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId1, // Already registered\n        },\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId2, // New registration\n        },\n    ],\n})).to.be.rejected;",
                      "err": {},
                      "uuid": "6b9739dd-75cc-4613-ae6a-f7732880bc56",
                      "parentUUID": "45ae23c4-cada-4744-bcf5-3f1994b55eff",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6b9739dd-75cc-4613-ae6a-f7732880bc56"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14982,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "ce6eecd0-8f34-4499-b276-ed9e21d64ee9",
              "title": "Batch Register IP Assets With Optimized Workflows",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Batch Register IP Assets With Optimized Workflows\"",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows \"before all\" hook in \"Batch Register IP Assets With Optimized Workflows\"",
                  "timedOut": false,
                  "duration": 44644,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a public minting NFT collection\nconst publicMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Public Minting Collection\",\n    symbol: \"PMC\",\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 10n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPublicMinting = publicMintingCollectionResult.spgNftContract;\n// Create a private minting NFT collection\nconst privateMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Private Minting Collection\",\n    symbol: \"PRC\",\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPrivateMinting = privateMintingCollectionResult.spgNftContract;\n// Register a commercial remix PIL license\nconst commercialRemixPILResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 10n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\nlicenseTermsId1 = commercialRemixPILResult.licenseTermsId;\n// Register a commercial use PIL license\nconst commercialUsePILResult = await client.license.registerPILTerms({\n    transferable: true,\n    royaltyPolicy: \"0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E\",\n    defaultMintingFee: 5n,\n    expiration: 0n,\n    commercialUse: true,\n    commercialAttribution: true,\n    commercializerChecker: viem_1.zeroAddress,\n    commercializerCheckerData: viem_1.zeroAddress,\n    commercialRevShare: 10,\n    commercialRevCeiling: 0n,\n    derivativesAllowed: true,\n    derivativesAttribution: true,\n    derivativesApproval: false,\n    derivativesReciprocal: true,\n    derivativeRevCeiling: 0n,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    uri: \"https://github.com/piplabs/pil-document/blob/ad67bb632a310d2557f8abcccd428e4c9c798db1/off-chain-terms/CommercialRemix.json\",\n});\nlicenseTermsId2 = commercialUsePILResult.licenseTermsId;\n// Mint and register IP with public minting contract\nconst publicMintingIpResult = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPublicMinting,\n});\nparentIpId1 = publicMintingIpResult.ipId;\n// Attach license terms to the first IP\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId1,\n    licenseTermsId: licenseTermsId1,\n});\n// Mint and register IP with private minting contract\nconst privateMintingIpResult = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPrivateMinting,\n});\nparentIpId2 = privateMintingIpResult.ipId;\n// Attach license terms to the second IP\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId2,\n    licenseTermsId: licenseTermsId2,\n});",
                  "err": {},
                  "uuid": "d5d53390-2c81-40ba-955a-8848c55de438",
                  "parentUUID": "ce6eecd0-8f34-4499-b276-ed9e21d64ee9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully batch register multiple IP assets with SPG NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully batch register multiple IP assets with SPG NFT contracts",
                  "timedOut": false,
                  "duration": 47302,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall due to the private minting\n     * - `maxLicenseTokens` is set to 1000n for first license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 1000n,\n            },\n            {\n                terms: src_1.PILFlavor.commercialUse({\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    royaltyPolicy: src_1.NativeRoyaltyPolicy.LAP,\n                    defaultMintingFee: 3n,\n                    override: {\n                        commercialRevShare: 90,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesReciprocal: true,\n                        commercialAttribution: false,\n                    },\n                }),\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 3n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     * - `maxLicenseTokens` is set to 100n for license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: src_1.PILFlavor.commercialRemix({\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    royaltyPolicy: src_1.NativeRoyaltyPolicy.LAP,\n                    defaultMintingFee: 0n,\n                    commercialRevShare: 90,\n                    override: {\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesReciprocal: true,\n                        commercialAttribution: false,\n                    },\n                }),\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 100n,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 20(10+10) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5(0+5) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the mint tokens is given `msg.sender` as the recipient\n     * - `maxLicenseTokens` is set to 80n and 10n for license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                maxLicenseTokens: 80n,\n            },\n            {\n                terms: src_1.PILFlavor.commercialRemix({\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    royaltyPolicy: src_1.NativeRoyaltyPolicy.LAP,\n                    defaultMintingFee: 100n,\n                    commercialRevShare: 0,\n                    override: {\n                        derivativesReciprocal: true,\n                        commercialAttribution: false,\n                        expiration: 1000n,\n                    },\n                }),\n                maxLicenseTokens: 10n,\n            },\n        ],\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the mint tokens is given `msg.sender` as the recipient\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        licenseTermsData: [\n            {\n                terms: src_1.PILFlavor.creativeCommonsAttribution({\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    override: {\n                        defaultMintingFee: 10000n,\n                    },\n                }),\n            },\n        ],\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n];\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst totalFees = 10 + 15 + 0 + 10 + 20 + 5 + 10 + 0;\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n *\n * 1. derivativeWorkflowsClient: 1 transaction\n *    - No license terms attached\n *\n * 2. multicall3Client: 3 transactions\n *    - Second transaction includes license terms with maxLicenseTokens: 1000n\n *\n * 3. licenseAttachmentWorkflowsClient: 1 transaction\n *    - Two license terms attached\n *    - First license terms: maxLicenseTokens: 1000n\n *\n * 4. royaltyTokenDistributionWorkflowsClient: 3 transactions\n *    - Second transaction includes two license terms:\n *    -  First license terms: maxLicenseTokens: 80n\n *    - Second license terms: maxLicenseTokens: 10n\n *   - Third transaction includes a license terms\n *\n * Summary:\n * - Total transactions: 4 (4 unique transaction hashes)\n * - Total IP assets registered: 8\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(4);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes?.length).equal(2);",
                  "err": {},
                  "uuid": "dac605c8-d0e5-497f-9533-73961e882a39",
                  "parentUUID": "ce6eecd0-8f34-4499-b276-ed9e21d64ee9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully batch register multiple IP assets with NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully batch register multiple IP assets with NFT contracts",
                  "timedOut": false,
                  "duration": 84185,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst tokenId3 = await (0, util_1.getTokenId)();\nconst tokenId4 = await (0, util_1.getTokenId)();\nconst tokenId5 = await (0, util_1.getTokenId)();\nconst tokenId6 = await (0, util_1.getTokenId)();\nconst tokenId7 = await (0, util_1.getTokenId)();\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst requests = [\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerIpAndAttachPilTerms  workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall\n     * - `maxLicenseTokens` is set to 100n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId3,\n        deadline: 1000n,\n        licenseTermsData: [\n            {\n                terms: src_1.PILFlavor.commercialRemix({\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    royaltyPolicy: src_1.NativeRoyaltyPolicy.LAP,\n                    defaultMintingFee: 0n,\n                    commercialRevShare: 100,\n                }),\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 10000n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 100n,\n            },\n        ],\n    },\n    /**\n     * registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     * - `maxLicenseTokens` is set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId4,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 1n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n            {\n                terms: src_1.PILFlavor.creativeCommonsAttribution({\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                }),\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 6n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n        ],\n        ipMetadata: {\n            ipMetadataURI: \"test-uri\",\n            ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n            nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 43,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 17,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 2,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 38,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId5,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId6,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId7,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n];\nconst totalFees = 10 + 5 + 0 + 0 + 5 + 10 + 5;\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. royaltyTokenDistributionWorkflowsClient: 4 args\n *  - The third request has two license terms, first one has `maxLicenseTokens` set to 10n\n *\n * 2.licenseAttachmentWorkflowsClient: 1 arg\n *  - The first request have two license terms, second one has `maxLicenseTokens` set to 100n\n *\n * 3.derivativeWorkflowsClient: 2 args\n *  - None license terms and no `maxLicenseTokens` set\n *\n * Summary:\n * - Total transactions: 3 (3 unique transaction hashes)\n * - Total IP assets registered: 7\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(3);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).greaterThan(0);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(4);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[2].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[2].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);",
                  "err": {},
                  "uuid": "17a2ea09-43d8-4de0-820f-a4d18ecd0995",
                  "parentUUID": "ce6eecd0-8f34-4499-b276-ed9e21d64ee9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register IP assets using a combination of NFT contracts and SPG NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully register IP assets using a combination of NFT contracts and SPG NFT contracts",
                  "timedOut": false,
                  "duration": 74206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst tokenId3 = await (0, util_1.getTokenId)();\nconst tokenId4 = await (0, util_1.getTokenId)();\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5(0+5) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 20(10+10) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n    /**\n     * registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     * - `maxLicenseTokens` is set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 1n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n        ipMetadata: {\n            ipMetadataURI: \"test-uri\",\n            ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n            nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 43,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 17,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 2,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 38,\n            },\n        ],\n    },\n    /**\n     * registerIpAndAttachPilTerms  workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall\n     * - the second request has `maxLicenseTokens` set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId3,\n        deadline: 1000n,\n        licenseTermsData: [\n            {\n                terms: src_1.PILFlavor.commercialRemix({\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    royaltyPolicy: src_1.NativeRoyaltyPolicy.LAP,\n                    defaultMintingFee: 0n,\n                    commercialRevShare: 100,\n                }),\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 10000n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId4,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n];\nconst totalFees = 15 + 5 + 20 + 10 + 5 + 0 + 0 + 10;\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. multicall3Client: 2 args\n *  - No license terms and no `maxLicenseTokens` set\n *\n * 2. royaltyTokenDistributionWorkflowsClient: 3 args\n *  - The third request has a license terms and `maxLicenseTokens` set to 10n\n *\n * 3. derivativeWorkflowsClient: 2 args\n *  - None license terms and no `maxLicenseTokens` set\n *\n * 4. licenseAttachmentWorkflowsClient: 1 arg\n *  - The first request have two license terms, second one has `maxLicenseTokens` set to 10n\n *\n * Summary:\n * - Total transactions: 4 (4 unique transaction hashes)\n * - Total IP assets registered: 8\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(4);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).greaterThan(0);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[1].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[2].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[2].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);",
                  "err": {},
                  "uuid": "8cc35eca-f000-4512-b257-32e9821c868c",
                  "parentUUID": "ce6eecd0-8f34-4499-b276-ed9e21d64ee9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register IP assets with multicall disabled",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully register IP assets with multicall disabled",
                  "timedOut": false,
                  "duration": 55300,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `derivativeWorkflowsClient` to call the this method\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` to call the this method\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` to call the this method\n     * - the first request has `maxLicenseTokens` set to 10n\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 10n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient`to call the this method\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient`to call the this method\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n];\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst totalFees = 15 + 0 + 10 + 5 + 5;\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n    options: {\n        wipOptions: {\n            useMulticallWhenPossible: false,\n        },\n    },\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. None license terms and no `maxLicenseTokens` set\n * 2. The request have one license terms and no `maxLicenseTokens` set\n * 3. The request have two license terms, first one has `maxLicenseTokens` set to 10n\n * 4. The requests have no license terms and no `maxLicenseTokens` set\n * 5. The requests have no license terms and no `maxLicenseTokens` set\n * Summary:\n * - Total transactions: 5 (5 unique transaction hashes)\n * - Total IP assets registered: 5\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(requests.length);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);",
                  "err": {},
                  "uuid": "143ba572-d0ca-460e-8ae3-1c45ea42f06e",
                  "parentUUID": "ce6eecd0-8f34-4499-b276-ed9e21d64ee9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dac605c8-d0e5-497f-9533-73961e882a39",
                "17a2ea09-43d8-4de0-820f-a4d18ecd0995",
                "8cc35eca-f000-4512-b257-32e9821c868c",
                "143ba572-d0ca-460e-8ae3-1c45ea42f06e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 260993,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "9c754790-7ae5-4311-87ab-ed94d1994711",
              "title": "Batch Mint and Register IP Asset",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Batch Mint and Register IP Asset\"",
                  "fullTitle": "IP Asset Functions Batch Mint and Register IP Asset \"before all\" hook in \"Batch Mint and Register IP Asset\"",
                  "timedOut": false,
                  "duration": 9967,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const publicMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 10n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n});\nspgNftContractWithPublicMinting = publicMintingCollectionResult.spgNftContract;\nconst privateMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: false,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 20n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n});\nspgNftContractWithPrivateMinting = privateMintingCollectionResult.spgNftContract;\nconst { address } = await (0, BIP32_1.getDerivedStoryClient)();\nanotherWalletAddress = address;",
                  "err": {},
                  "uuid": "1e287906-d5f2-4949-b274-4b7a320ff585",
                  "parentUUID": "9c754790-7ae5-4311-87ab-ed94d1994711",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully when public minting of spgNftContract",
                  "fullTitle": "IP Asset Functions Batch Mint and Register IP Asset should successfully when public minting of spgNftContract",
                  "timedOut": false,
                  "duration": 6231,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst { registrationResults } = await client.ipAsset.batchMintAndRegisterIp({\n    requests: [\n        { spgNftContract: spgNftContractWithPublicMinting },\n        { spgNftContract: spgNftContractWithPublicMinting, recipient: anotherWalletAddress },\n        { spgNftContract: spgNftContractWithPublicMinting, allowDuplicates: false },\n    ],\n});\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n(0, chai_1.expect)(registrationResults.length).equal(1);\n(0, chai_1.expect)(registrationResults[0].ipIdsAndTokenIds.length).equal(3);",
                  "err": {},
                  "uuid": "06f41210-1936-4b0d-baeb-53fd5ea923b5",
                  "parentUUID": "9c754790-7ae5-4311-87ab-ed94d1994711",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when private minting of spgNftContract",
                  "fullTitle": "IP Asset Functions Batch Mint and Register IP Asset should successfully when private minting of spgNftContract",
                  "timedOut": false,
                  "duration": 24404,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst { registrationResults } = await client.ipAsset.batchMintAndRegisterIp({\n    requests: [\n        { spgNftContract: spgNftContractWithPrivateMinting },\n        { spgNftContract: spgNftContractWithPrivateMinting, recipient: anotherWalletAddress },\n        {\n            spgNftContract: spgNftContractWithPrivateMinting,\n            allowDuplicates: false,\n            recipient: anotherWalletAddress,\n        },\n    ],\n});\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n(0, chai_1.expect)(registrationResults.length).equal(1);\n(0, chai_1.expect)(registrationResults[0].ipIdsAndTokenIds.length).equal(3);",
                  "err": {},
                  "uuid": "a07ed4f9-a564-4fdc-9a08-02b76e592a5f",
                  "parentUUID": "9c754790-7ae5-4311-87ab-ed94d1994711",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when hybrid private minting and public minting of spgNftContract",
                  "fullTitle": "IP Asset Functions Batch Mint and Register IP Asset should successfully when hybrid private minting and public minting of spgNftContract",
                  "timedOut": false,
                  "duration": 16794,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst { registrationResults } = await client.ipAsset.batchMintAndRegisterIp({\n    requests: [\n        { spgNftContract: spgNftContractWithPublicMinting },\n        { spgNftContract: spgNftContractWithPrivateMinting, recipient: anotherWalletAddress },\n        { spgNftContract: spgNftContractWithPrivateMinting, allowDuplicates: false },\n        { spgNftContract: spgNftContractWithPublicMinting, recipient: anotherWalletAddress },\n    ],\n});\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n(0, chai_1.expect)(registrationResults.length).equal(2);\n(0, chai_1.expect)(registrationResults[0].ipIdsAndTokenIds.length).equal(2);\n(0, chai_1.expect)(registrationResults[1].ipIdsAndTokenIds.length).equal(2);",
                  "err": {},
                  "uuid": "f88380e1-5095-462c-88ce-1830107b531a",
                  "parentUUID": "9c754790-7ae5-4311-87ab-ed94d1994711",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when private minting of spgNftContract but caller does not have the minter role",
                  "fullTitle": "IP Asset Functions Batch Mint and Register IP Asset should fail when private minting of spgNftContract but caller does not have the minter role",
                  "timedOut": false,
                  "duration": 5251,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Register a new SPG NFT contract with private minting with clientB\nconst { address, clientB } = await (0, BIP32_1.getDerivedStoryClient)();\nconst { spgNftContract: privateMintingContractOfClientB } = await clientB.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: address,\n    contractURI: \"test-uri\",\n});\nawait (0, chai_1.expect)(client.ipAsset.batchMintAndRegisterIp({\n    requests: [{ spgNftContract: privateMintingContractOfClientB }],\n})).to.be.rejectedWith(\"does not have the minter role\");",
                  "err": {},
                  "uuid": "2cf24972-a753-4628-9ab4-374b2ca6dcda",
                  "parentUUID": "9c754790-7ae5-4311-87ab-ed94d1994711",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06f41210-1936-4b0d-baeb-53fd5ea923b5",
                "a07ed4f9-a564-4fdc-9a08-02b76e592a5f",
                "f88380e1-5095-462c-88ce-1830107b531a",
                "2cf24972-a753-4628-9ab4-374b2ca6dcda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52680,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c61d0612-2179-4652-b71e-d73e091612c9",
              "title": "Register ip asset with minted and mint nft",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0fd13acf-303b-4036-95fe-0b7f9ea7dc03",
                  "title": "Register IP Asset with Minted NFT",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully when give license terms data and royalty shares",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset with Minted NFT should successfully when give license terms data and royalty shares",
                      "timedOut": false,
                      "duration": 16630,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerIpAsset({\n    nft: { type: \"minted\", nftContract: util_1.mockERC721, tokenId: tokenId },\n    licenseTermsData: [\n        {\n            terms: src_1.PILFlavor.creativeCommonsAttribution({\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n            }),\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds.length).to.be.equal(1);\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipRoyaltyVault).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                      "err": {},
                      "uuid": "688eda34-537a-4acf-904d-71764b9edda6",
                      "parentUUID": "0fd13acf-303b-4036-95fe-0b7f9ea7dc03",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully when give license terms data without royalty shares",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset with Minted NFT should successfully when give license terms data without royalty shares",
                      "timedOut": false,
                      "duration": 15257,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerIpAsset({\n    nft: { type: \"minted\", nftContract: util_1.mockERC721, tokenId: tokenId },\n    licenseTermsData: [\n        {\n            terms: src_1.PILFlavor.commercialRemix({\n                defaultMintingFee: 10000n,\n                commercialRevShare: 100,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n            }),\n            maxLicenseTokens: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "64fc0855-c90c-4a21-bde3-686a79c814e3",
                      "parentUUID": "0fd13acf-303b-4036-95fe-0b7f9ea7dc03",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully when without license terms data, royalty shares, ip metadata",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset with Minted NFT should successfully when without license terms data, royalty shares, ip metadata",
                      "timedOut": false,
                      "duration": 10017,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerIpAsset({\n    nft: { type: \"minted\", nftContract: util_1.mockERC721, tokenId: tokenId },\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "78e33731-0f76-428a-b33d-4d1f504e1946",
                      "parentUUID": "0fd13acf-303b-4036-95fe-0b7f9ea7dc03",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully when without license terms data and royalty shares, with ip metadata",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset with Minted NFT should successfully when without license terms data and royalty shares, with ip metadata",
                      "timedOut": false,
                      "duration": 10208,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerIpAsset({\n    nft: { type: \"minted\", nftContract: util_1.mockERC721, tokenId: tokenId },\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        nftMetadataURI: \"test-nft-uri\",\n    },\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "7cd3d660-bbfc-440a-9328-317221b44953",
                      "parentUUID": "0fd13acf-303b-4036-95fe-0b7f9ea7dc03",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "688eda34-537a-4acf-904d-71764b9edda6",
                    "64fc0855-c90c-4a21-bde3-686a79c814e3",
                    "78e33731-0f76-428a-b33d-4d1f504e1946",
                    "7cd3d660-bbfc-440a-9328-317221b44953"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 52112,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "eb87781d-1934-4e3f-b86f-c33d63a0174a",
                  "title": "Register IP Asset by minting a new NFT",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"Register IP Asset by minting a new NFT\"",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset by minting a new NFT \"before all\" hook in \"Register IP Asset by minting a new NFT\"",
                      "timedOut": false,
                      "duration": 4983,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST_FOR_MINT\",\n    maxSupply: 100,\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n    mintFee: 10n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n});\nspgNftContract = txData.spgNftContract;",
                      "err": {},
                      "uuid": "42368503-d5b2-454d-9a42-8bfbe1c9a841",
                      "parentUUID": "eb87781d-1934-4e3f-b86f-c33d63a0174a",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully when give license terms data and royalty shares",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset by minting a new NFT should successfully when give license terms data and royalty shares",
                      "timedOut": false,
                      "duration": 16909,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.ipAsset.registerIpAsset({\n    nft: { type: \"mint\", spgNftContract: spgNftContract },\n    licenseTermsData: [\n        {\n            terms: src_1.PILFlavor.creativeCommonsAttribution({\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n            }),\n        },\n        {\n            terms: src_1.PILFlavor.commercialRemix({\n                defaultMintingFee: 10000n,\n                commercialRevShare: 100,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLrpAddress[util_1.aeneid],\n            }),\n            maxLicenseTokens: 100,\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds?.length).to.be.equal(2);\n(0, chai_1.expect)(result.ipRoyaltyVault).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "6a7a822a-cd79-44a2-9c08-d36a664a7c86",
                      "parentUUID": "eb87781d-1934-4e3f-b86f-c33d63a0174a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully when give license terms data without royalty shares",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset by minting a new NFT should successfully when give license terms data without royalty shares",
                      "timedOut": false,
                      "duration": 12161,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.ipAsset.registerIpAsset({\n    nft: { type: \"mint\", spgNftContract: spgNftContract },\n    licenseTermsData: [\n        {\n            terms: src_1.PILFlavor.creativeCommonsAttribution({\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n            }),\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: src_1.PILFlavor.commercialRemix({\n                defaultMintingFee: 10000n,\n                commercialRevShare: 100,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                royaltyPolicy: generated_1.royaltyPolicyLrpAddress[util_1.aeneid],\n            }),\n            maxLicenseTokens: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");\n(0, chai_1.expect)(result.licenseTermsIds?.length).to.be.equal(2);\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                      "err": {},
                      "uuid": "0a3877e1-475e-48c0-8448-cb5d7ff91d14",
                      "parentUUID": "eb87781d-1934-4e3f-b86f-c33d63a0174a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully when without license terms data and royalty shares",
                      "fullTitle": "IP Asset Functions Register ip asset with minted and mint nft Register IP Asset by minting a new NFT should successfully when without license terms data and royalty shares",
                      "timedOut": false,
                      "duration": 10730,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.ipAsset.registerIpAsset({\n    nft: { type: \"mint\", spgNftContract: spgNftContract },\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        nftMetadataURI: \"test-nft-uri\",\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "5ffed083-5b0b-4bef-a9a9-d2ae8b74082a",
                      "parentUUID": "eb87781d-1934-4e3f-b86f-c33d63a0174a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6a7a822a-cd79-44a2-9c08-d36a664a7c86",
                    "0a3877e1-475e-48c0-8448-cb5d7ff91d14",
                    "5ffed083-5b0b-4bef-a9a9-d2ae8b74082a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 39800,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "ccb924e7-e358-4819-9ddc-20c85725c91d",
              "title": "Register derivative IP Asset",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Register derivative IP Asset\"",
                  "fullTitle": "IP Asset Functions Register derivative IP Asset \"before all\" hook in \"Register derivative IP Asset\"",
                  "timedOut": false,
                  "duration": 10588,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    licenseTermsData: [\n        {\n            terms: src_1.PILFlavor.commercialRemix({\n                defaultMintingFee: 10000n,\n                commercialRevShare: 100,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n            }),\n        },\n    ],\n});\nparentIpId = result.ipId;\ncommercialRemixLicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "71757974-c2b2-4112-a685-5577ec901ba8",
                  "parentUUID": "ccb924e7-e358-4819-9ddc-20c85725c91d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "cd189460-d1ed-4972-bef0-9332c355d78e",
                  "title": "Register derivative IP Asset with Minted NFT",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully when give derivData and royalty shares",
                      "fullTitle": "IP Asset Functions Register derivative IP Asset Register derivative IP Asset with Minted NFT should successfully when give derivData and royalty shares",
                      "timedOut": false,
                      "duration": 29165,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerDerivativeIpAsset({\n    nft: { type: \"minted\", nftContract: util_1.mockERC721, tokenId: tokenId },\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [commercialRemixLicenseTermsId],\n        maxMintingFee: 10000n,\n        maxRts: 100,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipRoyaltyVault).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.equal(BigInt(tokenId));",
                      "err": {},
                      "uuid": "9649939d-d530-40a0-9f32-d310eee885f9",
                      "parentUUID": "cd189460-d1ed-4972-bef0-9332c355d78e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully given derivData",
                      "fullTitle": "IP Asset Functions Register derivative IP Asset Register derivative IP Asset with Minted NFT should successfully given derivData",
                      "timedOut": false,
                      "duration": 24078,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerDerivativeIpAsset({\n    nft: { type: \"minted\", nftContract: util_1.mockERC721, tokenId: tokenId },\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [commercialRemixLicenseTermsId],\n        maxMintingFee: 10000n,\n        maxRts: 100,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.equal(BigInt(tokenId));\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "de2047df-a365-4122-bdbf-14e9856481b2",
                      "parentUUID": "cd189460-d1ed-4972-bef0-9332c355d78e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully given licenseTokenIds and maxRts",
                      "fullTitle": "IP Asset Functions Register derivative IP Asset Register derivative IP Asset with Minted NFT should successfully given licenseTokenIds and maxRts",
                      "timedOut": false,
                      "duration": 33060,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { licenseTokenIds } = await client.license.mintLicenseTokens({\n    licenseTermsId: commercialRemixLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenIds[0]);\nconst tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerDerivativeIpAsset({\n    nft: { type: \"minted\", nftContract: util_1.mockERC721, tokenId: tokenId },\n    licenseTokenIds: licenseTokenIds,\n    maxRts: 100,\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.equal(BigInt(tokenId));\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "1ec17d83-3b47-406c-8c53-9b12e865ff15",
                      "parentUUID": "cd189460-d1ed-4972-bef0-9332c355d78e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9649939d-d530-40a0-9f32-d310eee885f9",
                    "de2047df-a365-4122-bdbf-14e9856481b2",
                    "1ec17d83-3b47-406c-8c53-9b12e865ff15"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 86303,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "b667c920-9062-4bd5-99c5-2cc2e8b51b5c",
                  "title": "Register derivative IP Asset by minting a new NFT",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"Register derivative IP Asset by minting a new NFT\"",
                      "fullTitle": "IP Asset Functions Register derivative IP Asset Register derivative IP Asset by minting a new NFT \"before all\" hook in \"Register derivative IP Asset by minting a new NFT\"",
                      "timedOut": false,
                      "duration": 4865,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST_FOR_MINT\",\n    maxSupply: 100,\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n    mintFee: 10n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n});\nspgNftContract = txData.spgNftContract;",
                      "err": {},
                      "uuid": "5ee56e49-1fbb-46f4-84c5-fcbe5d11d692",
                      "parentUUID": "b667c920-9062-4bd5-99c5-2cc2e8b51b5c",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully when give derivData and royalty shares",
                      "fullTitle": "IP Asset Functions Register derivative IP Asset Register derivative IP Asset by minting a new NFT should successfully when give derivData and royalty shares",
                      "timedOut": false,
                      "duration": 24348,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.ipAsset.registerDerivativeIpAsset({\n    nft: { type: \"mint\", spgNftContract },\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [commercialRemixLicenseTermsId],\n        maxMintingFee: 10000n,\n        maxRts: 100,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "27f80e96-dd86-45c7-900a-85914a745650",
                      "parentUUID": "b667c920-9062-4bd5-99c5-2cc2e8b51b5c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully when give licenseTokenIds and maxRts",
                      "fullTitle": "IP Asset Functions Register derivative IP Asset Register derivative IP Asset by minting a new NFT should successfully when give licenseTokenIds and maxRts",
                      "timedOut": false,
                      "duration": 25338,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { licenseTokenIds } = await client.license.mintLicenseTokens({\n    licenseTermsId: commercialRemixLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenIds[0]);\nconst result = await client.ipAsset.registerDerivativeIpAsset({\n    nft: { type: \"mint\", spgNftContract },\n    licenseTokenIds: licenseTokenIds,\n    maxRts: 100,\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "1c9446fd-a7f8-4257-86ff-41c82290f0ad",
                      "parentUUID": "b667c920-9062-4bd5-99c5-2cc2e8b51b5c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully when give derivData",
                      "fullTitle": "IP Asset Functions Register derivative IP Asset Register derivative IP Asset by minting a new NFT should successfully when give derivData",
                      "timedOut": false,
                      "duration": 11373,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.ipAsset.registerDerivativeIpAsset({\n    nft: { type: \"mint\", spgNftContract },\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [commercialRemixLicenseTermsId],\n        maxMintingFee: 10000n,\n        maxRts: 100,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                      "err": {},
                      "uuid": "44c3d574-acf4-4786-9aac-6579f923dbb9",
                      "parentUUID": "b667c920-9062-4bd5-99c5-2cc2e8b51b5c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "27f80e96-dd86-45c7-900a-85914a745650",
                    "1c9446fd-a7f8-4257-86ff-41c82290f0ad",
                    "44c3d574-acf4-4786-9aac-6579f923dbb9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 61059,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "7fd0b3ef-cf79-4110-b12c-216abfc1d4c3",
              "title": "Link Derivative",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Link Derivative\"",
                  "fullTitle": "IP Asset Functions Link Derivative \"before all\" hook in \"Link Derivative\"",
                  "timedOut": false,
                  "duration": 10649,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    licenseTermsData: [\n        {\n            terms: src_1.PILFlavor.commercialRemix({\n                defaultMintingFee: 10000n,\n                commercialRevShare: 100,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n            }),\n        },\n    ],\n});\nparentIpId = result.ipId;\ncommercialRemixLicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "5564236f-af7c-4aa8-82e8-45315da9febc",
                  "parentUUID": "7fd0b3ef-cf79-4110-b12c-216abfc1d4c3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully when give childIpId and licenseTokenIds",
                  "fullTitle": "IP Asset Functions Link Derivative should successfully when give childIpId and licenseTokenIds",
                  "timedOut": false,
                  "duration": 20642,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// register a child ip\nconst tokenId = await (0, util_1.getTokenId)();\nconst childIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nconst mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: commercialRemixLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: \"0\",\n    maxRevenueShare: 100,\n});\nconst result = await client.ipAsset.linkDerivative({\n    childIpId: childIpId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d0d2dbab-2614-4afa-b0ab-ddcec2e99ec1",
                  "parentUUID": "7fd0b3ef-cf79-4110-b12c-216abfc1d4c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when give parentIpId and licenseTokenIds",
                  "fullTitle": "IP Asset Functions Link Derivative should successfully when give parentIpId and licenseTokenIds",
                  "timedOut": false,
                  "duration": 28662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst childIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nconst result = await client.ipAsset.linkDerivative({\n    childIpId: childIpId,\n    parentIpIds: [parentIpId],\n    licenseTermsIds: [commercialRemixLicenseTermsId],\n    maxMintingFee: \"0\",\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"0\",\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "6fabe6fb-7cb5-440a-95ec-2dfdb42379d6",
                  "parentUUID": "7fd0b3ef-cf79-4110-b12c-216abfc1d4c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0d2dbab-2614-4afa-b0ab-ddcec2e99ec1",
                "6fabe6fb-7cb5-440a-95ec-2dfdb42379d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49304,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "001c7133-31a7-41d1-b4ef-834f32192296",
          "title": "License Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
          "file": "/test/integration/license.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"License Functions\"",
              "fullTitle": "License Functions \"before all\" hook in \"License Functions\"",
              "timedOut": false,
              "duration": 98,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nclientB = derivedClient.clientB;",
              "err": {},
              "uuid": "29bb0ec5-2906-47c7-91b1-5afbd143469b",
              "parentUUID": "001c7133-31a7-41d1-b4ef-834f32192296",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "51a431c9-91d1-487a-a050-36afd2477f89",
              "title": "register license with different types",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register license ",
                  "fullTitle": "License Functions register license with different types should register license ",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerPILTerms({\n    defaultMintingFee: 0,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    transferable: false,\n    royaltyPolicy: viem_1.zeroAddress,\n    commercialUse: false,\n    commercialAttribution: false,\n    commercializerChecker: viem_1.zeroAddress,\n    commercializerCheckerData: \"0x\",\n    commercialRevShare: 0,\n    derivativesAllowed: false,\n    derivativesAttribution: false,\n    derivativesApproval: false,\n    derivativesReciprocal: false,\n    uri: \"\",\n    expiration: \"\",\n    commercialRevCeiling: \"\",\n    derivativeRevCeiling: \"\",\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "26fb4337-4752-452e-ba37-673f345323da",
                  "parentUUID": "51a431c9-91d1-487a-a050-36afd2477f89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with non commercial social remixing PIL",
                  "fullTitle": "License Functions register license with different types should register license with non commercial social remixing PIL",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerNonComSocialRemixingPIL();\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "d32b178e-906f-4985-af38-4b9ca01be908",
                  "parentUUID": "51a431c9-91d1-487a-a050-36afd2477f89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with commercial use",
                  "fullTitle": "License Functions register license with different types should register license with commercial use",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCommercialUsePIL({\n    defaultMintingFee: \"1\",\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "17558cab-65dd-40be-94d1-383e05de8240",
                  "parentUUID": "51a431c9-91d1-487a-a050-36afd2477f89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with commercial Remix use",
                  "fullTitle": "License Functions register license with different types should register license with commercial Remix use",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: \"1\",\n    commercialRevShare: 100,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "769f9982-f12c-4ab2-9089-18cc58df15d4",
                  "parentUUID": "51a431c9-91d1-487a-a050-36afd2477f89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with creative commons attribution PIL",
                  "fullTitle": "License Functions register license with different types should register license with creative commons attribution PIL",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCreativeCommonsAttributionPIL({\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    royaltyPolicyAddress: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "1004b783-ab9f-413f-b761-514f6b0d62be",
                  "parentUUID": "51a431c9-91d1-487a-a050-36afd2477f89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26fb4337-4752-452e-ba37-673f345323da",
                "d32b178e-906f-4985-af38-4b9ca01be908",
                "17558cab-65dd-40be-94d1-383e05de8240",
                "769f9982-f12c-4ab2-9089-18cc58df15d4",
                "1004b783-ab9f-413f-b761-514f6b0d62be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 446,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "10fb053c-ca32-48d2-9446-d6f612d299c0",
              "title": "attach License Terms and mint license tokens",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"attach License Terms and mint license tokens\"",
                  "fullTitle": "License Functions attach License Terms and mint license tokens \"before all\" hook in \"attach License Terms and mint license tokens\"",
                  "timedOut": false,
                  "duration": 10631,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tokenId = await (0, util_1.getTokenId)();\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nconst mockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\nawait mockERC20.approve(generated_1.licensingModuleAddress[util_1.aeneid], viem_1.maxUint256);\nipId = registerResult.ipId;\nconst registerLicenseResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 0,\n    commercialRevShare: 100,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\nlicenseId = registerLicenseResult.licenseTermsId;\nconst paidLicenseResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 100n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\npaidLicenseId = paidLicenseResult.licenseTermsId;",
                  "err": {},
                  "uuid": "a203ed28-68d6-4f51-9af4-8458bd5b6f38",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should attach License Terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should attach License Terms",
                  "timedOut": false,
                  "duration": 5238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "e5de19b7-8965-43b8-b818-5f0c51a85d65",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to attach another license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should be able to attach another license terms",
                  "timedOut": false,
                  "duration": 5275,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: paidLicenseId,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "c2b1eb3a-1d53-4d49-a6d7-e62a65da8ba1",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with ip owner",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with ip owner",
                  "timedOut": false,
                  "duration": 5281,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseId,\n    licensorIpId: ipId,\n    maxMintingFee: \"1\",\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "35be428c-7472-4f06-bccb-3f7ee280c2e5",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with non ip owner",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with non ip owner",
                  "timedOut": false,
                  "duration": 32817,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// register ip with another wallet account\nconst tokenIdB = await (0, util_1.getTokenId)();\nconst registerResult = await clientB.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenIdB,\n});\nconst ipIdB = registerResult.ipId;\n// attach license terms to the ip\nawait client.license.attachLicenseTerms({\n    ipId: ipIdB,\n    licenseTermsId: licenseId,\n});\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseId,\n    licensorIpId: ipIdB,\n    maxMintingFee: \"1\",\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "240bb67d-209c-4579-bd24-26a42beec0e0",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license token with default license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license token with default license terms",
                  "timedOut": false,
                  "duration": 5464,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// get default license terms id\nconst licenseRegistryReadOnlyClient = new generated_1.LicenseRegistryReadOnlyClient(util_1.publicClient);\nconst { licenseTermsId: defaultLicenseTermsId } = await licenseRegistryReadOnlyClient.getDefaultLicenseTerms();\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: defaultLicenseTermsId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 1,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "7474d265-e59d-49ef-bb5b-32c687cbd58a",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with fee and pay with IP",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with fee and pay with IP",
                  "timedOut": false,
                  "duration": 5925,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: paidLicenseId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 50,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 100n));",
                  "err": {},
                  "uuid": "10bb2f78-b260-4ff5-8a2d-e79baa530d04",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should get license terms",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.getLicenseTerms(licenseId);\n(0, chai_1.expect)(result).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "d4d7c766-bb1e-46e0-8c85-4e70c5a75a5e",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should predict minting license fee",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should predict minting license fee",
                  "timedOut": false,
                  "duration": 254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.predictMintingLicenseFee({\n    licenseTermsId: licenseId,\n    licensorIpId: ipId,\n    amount: 1,\n});\n(0, chai_1.expect)(result.currencyToken).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenAmount).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "06340b2d-45d7-4280-a3ed-9b3a8590bd5a",
                  "parentUUID": "10fb053c-ca32-48d2-9446-d6f612d299c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "4e4f3937-a3c2-498c-80d9-48a8195194b7",
                  "title": "licensing config and max license tokens",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
                  "file": "/test/integration/license.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should set licensing config",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should set licensing config",
                      "timedOut": false,
                      "duration": 5051,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.setLicensingConfig({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n    licensingConfig,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "af9174d8-aaa7-4525-a044-bc1881a59c57",
                      "parentUUID": "4e4f3937-a3c2-498c-80d9-48a8195194b7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should get licensing config",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should get licensing config",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.getLicensingConfig({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n});\n(0, chai_1.expect)(result).to.deep.equal({\n    ...licensingConfig,\n    expectMinimumGroupRewardShare: 1 * 10 ** 6,\n});",
                      "err": {},
                      "uuid": "fc486133-8058-4f9c-9c5b-d6e2307d5948",
                      "parentUUID": "4e4f3937-a3c2-498c-80d9-48a8195194b7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should set max license tokens",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should set max license tokens",
                      "timedOut": false,
                      "duration": 10081,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.setMaxLicenseTokens({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n    maxLicenseTokens: 100,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "7e6d7629-b07e-43f6-86cf-13a44ae1cef4",
                      "parentUUID": "4e4f3937-a3c2-498c-80d9-48a8195194b7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "af9174d8-aaa7-4525-a044-bc1881a59c57",
                    "fc486133-8058-4f9c-9c5b-d6e2307d5948",
                    "7e6d7629-b07e-43f6-86cf-13a44ae1cef4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 15226,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "e5de19b7-8965-43b8-b818-5f0c51a85d65",
                "c2b1eb3a-1d53-4d49-a6d7-e62a65da8ba1",
                "35be428c-7472-4f06-bccb-3f7ee280c2e5",
                "240bb67d-209c-4579-bd24-26a42beec0e0",
                "7474d265-e59d-49ef-bb5b-32c687cbd58a",
                "10bb2f78-b260-4ff5-8a2d-e79baa530d04",
                "d4d7c766-bb1e-46e0-8c85-4e70c5a75a5e",
                "06340b2d-45d7-4280-a3ed-9b3a8590bd5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 60346,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c4eebc68-ac4a-4cb4-a885-de3295986cec",
              "title": "Creative Commons Attribution License Tests",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Creative Commons Attribution License Tests\"",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests \"before all\" hook in \"Creative Commons Attribution License Tests\"",
                  "timedOut": false,
                  "duration": 10076,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tokenId = await (0, util_1.getTokenId)();\n// Register an IP asset\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = registerResult.ipId;\n// Create a Creative Commons Attribution license\nconst ccLicenseResult = await client.license.registerCreativeCommonsAttributionPIL({\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    royaltyPolicyAddress: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n});\nccLicenseTermsId = ccLicenseResult.licenseTermsId;",
                  "err": {},
                  "uuid": "159875e9-ba46-4807-8b44-2cc229b15ca0",
                  "parentUUID": "c4eebc68-ac4a-4cb4-a885-de3295986cec",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify the license terms match Creative Commons Attribution specifications",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should verify the license terms match Creative Commons Attribution specifications",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const licenseTerms = await client.license.getLicenseTerms(ccLicenseTermsId);\n(0, chai_1.expect)(licenseTerms.terms.transferable).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.commercialUse).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesAllowed).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesAttribution).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesReciprocal).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesApproval).to.equal(false);\n(0, chai_1.expect)(licenseTerms.terms.commercialAttribution).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.commercialRevShare).to.equal(0);\n(0, chai_1.expect)(licenseTerms.terms.defaultMintingFee).to.equal(0n);\n(0, chai_1.expect)(licenseTerms.terms.royaltyPolicy).to.equal(generated_1.royaltyPolicyLapAddress[util_1.aeneid]);\n(0, chai_1.expect)(licenseTerms.terms.expiration).to.equal(0n);",
                  "err": {},
                  "uuid": "3e2cf451-0348-4787-97eb-33347002476f",
                  "parentUUID": "c4eebc68-ac4a-4cb4-a885-de3295986cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should attach Creative Commons Attribution license to an IP",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should attach Creative Commons Attribution license to an IP",
                  "timedOut": false,
                  "duration": 9327,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attachResult = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: ccLicenseTermsId,\n});\n(0, chai_1.expect)(attachResult.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(attachResult.success).to.equal(true);\nconst licenseRegistryReadOnlyClient = new generated_1.LicenseRegistryReadOnlyClient(util_1.publicClient);\nconst hasLicense = await licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({\n    ipId: ipId,\n    licenseTemplate: client.ipAsset.licenseTemplateClient.address,\n    licenseTermsId: ccLicenseTermsId,\n});\n(0, chai_1.expect)(hasLicense).to.equal(true);",
                  "err": {},
                  "uuid": "ff144dec-d66b-414b-9c33-b63d49389fb0",
                  "parentUUID": "c4eebc68-ac4a-4cb4-a885-de3295986cec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint CC-BY license tokens with no minting fee",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should mint CC-BY license tokens with no minting fee",
                  "timedOut": false,
                  "duration": 5681,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Get wallet balance before minting\nconst balanceBefore = await client.getWalletBalance();\n// Predict the minting fee (should be zero for CC-BY)\nconst feePredict = await client.license.predictMintingLicenseFee({\n    licenseTermsId: ccLicenseTermsId,\n    licensorIpId: ipId,\n    amount: 1,\n});\n// CC-BY licenses should have zero minting fee\n(0, chai_1.expect)(feePredict.tokenAmount).to.equal(0n);\nconst mintResult = await client.license.mintLicenseTokens({\n    licenseTermsId: ccLicenseTermsId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 0,\n});\n(0, chai_1.expect)(mintResult.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(mintResult.licenseTokenIds).to.be.a(\"array\");\nconst balanceAfter = await client.getWalletBalance();\n// Verify no fee was charged just gas\n// This checks that any difference is very small (just gas costs)\nconst balanceDiff = balanceBefore - balanceAfter;\nconst gasUsed = mintResult.receipt.gasUsed;\nconst effectiveGasPrice = mintResult.receipt.effectiveGasPrice;\nconst totalGas = gasUsed * effectiveGasPrice;\n// Confirms the balance diff only reflects gas cost, since license fee is zero.\n(0, chai_1.expect)(balanceDiff).to.equal(totalGas); // Small amount for gas",
                  "err": {},
                  "uuid": "f2c7ef12-2fcd-4e39-a698-eeb0138dfd3c",
                  "parentUUID": "c4eebc68-ac4a-4cb4-a885-de3295986cec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e2cf451-0348-4787-97eb-33347002476f",
                "ff144dec-d66b-414b-9c33-b63d49389fb0",
                "f2c7ef12-2fcd-4e39-a698-eeb0138dfd3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15095,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f65f2176-0f3e-4701-8c3f-4baf02303875",
          "title": "nftClient Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
          "file": "/test/integration/nftClient.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"nftClient Functions\"",
              "fullTitle": "nftClient Functions \"before all\" hook in \"nftClient Functions\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();",
              "err": {},
              "uuid": "43db0028-8446-4990-968d-ddf9517c60d4",
              "parentUUID": "f65f2176-0f3e-4701-8c3f-4baf02303875",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
              "title": "createNFTCollection",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully create public nft collection with minimal params",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create public nft collection with minimal params",
                  "timedOut": false,
                  "duration": 4932,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");\n(0, chai_1.expect)(txData.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "3c792111-e596-4090-834f-3102c3c9a4ea",
                  "parentUUID": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with custom mint fee",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with custom mint fee",
                  "timedOut": false,
                  "duration": 4890,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"paid-collection\",\n    symbol: \"PAID\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFee: 10000000n,\n    mintFeeToken: generated_1.erc20Address[mockData_1.aeneid],\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");\nspgNftContract = txData.spgNftContract;",
                  "err": {},
                  "uuid": "99c54ac4-e908-42ae-bf89-6075a99624fc",
                  "parentUUID": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create private collection",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create private collection",
                  "timedOut": false,
                  "duration": 4890,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"private-collection\",\n    symbol: \"PRIV\",\n    maxSupply: 100,\n    isPublicMinting: false, // private minting\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: false, // starts closed\n    contractURI: \"test-uri\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "49eeb726-7cf2-4161-8d3e-8f61d2950aad",
                  "parentUUID": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with baseURI",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with baseURI",
                  "timedOut": false,
                  "duration": 8972,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"uri-collection\",\n    symbol: \"URI\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    baseURI: \"ipfs://QmTest/\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d2c28423-5db8-4d6e-99ac-b81ccaf9b25c",
                  "parentUUID": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with custom owner",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with custom owner",
                  "timedOut": false,
                  "duration": 8993,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"owned-collection\",\n    symbol: \"OWN\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    owner: util_1.TEST_WALLET_ADDRESS,\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "800271c5-5adc-40a5-9f81-dbe84e0e70ec",
                  "parentUUID": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get encoded transaction data",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully get encoded transaction data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"encoded-collection\",\n    symbol: \"ENC\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    txOptions: {\n        encodedTxDataOnly: true,\n    },\n});\n(0, chai_1.expect)(txData.encodedTxData).to.be.an(\"object\");\n(0, chai_1.expect)(txData.encodedTxData?.data).to.be.a(\"string\");\n(0, chai_1.expect)(txData.encodedTxData?.to).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "07858277-f0e4-4efe-a450-63750bd69539",
                  "parentUUID": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid mint fee token",
                  "fullTitle": "nftClient Functions createNFTCollection should fail with invalid mint fee token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.nftClient.createNFTCollection({\n    name: \"invalid-fee-collection\",\n    symbol: \"INV\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFee: 1000000000000000000n,\n    mintFeeToken: \"0x0000000000000000000000000000000000000000\",\n})).to.be.rejectedWith(\"Invalid mint fee token address\");",
                  "err": {},
                  "uuid": "da52d16e-8ea5-41ea-9cbe-c1728c0d9b0b",
                  "parentUUID": "1ae58bbf-5eb7-4495-8b16-48ffa4d155f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c792111-e596-4090-834f-3102c3c9a4ea",
                "99c54ac4-e908-42ae-bf89-6075a99624fc",
                "49eeb726-7cf2-4161-8d3e-8f61d2950aad",
                "d2c28423-5db8-4d6e-99ac-b81ccaf9b25c",
                "800271c5-5adc-40a5-9f81-dbe84e0e70ec",
                "07858277-f0e4-4efe-a450-63750bd69539",
                "da52d16e-8ea5-41ea-9cbe-c1728c0d9b0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32680,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "9db214ea-315d-4116-9715-f8fa3e29fc5b",
              "title": "Mint Fee",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully get mint fee token",
                  "fullTitle": "nftClient Functions Mint Fee should successfully get mint fee token",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintFeeToken = await client.nftClient.getMintFeeToken(spgNftContract);\n(0, chai_1.expect)(mintFeeToken).to.equal(generated_1.erc20Address[mockData_1.aeneid]);",
                  "err": {},
                  "uuid": "979e0014-3a24-4704-85af-51356b64d681",
                  "parentUUID": "9db214ea-315d-4116-9715-f8fa3e29fc5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get mint fee",
                  "fullTitle": "nftClient Functions Mint Fee should successfully get mint fee",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintFee = await client.nftClient.getMintFee(spgNftContract);\n(0, chai_1.expect)(mintFee).to.equal(10000000n);",
                  "err": {},
                  "uuid": "60b852cd-ea05-4366-b8c2-eb6e516c37ab",
                  "parentUUID": "9db214ea-315d-4116-9715-f8fa3e29fc5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "979e0014-3a24-4704-85af-51356b64d681",
                "60b852cd-ea05-4366-b8c2-eb6e516c37ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4d5fee8e-c09d-484b-be33-29da5a1db3ca",
              "title": "set and get tokenURI",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully set token URI",
                  "fullTitle": "nftClient Functions set and get tokenURI should successfully set token URI",
                  "timedOut": false,
                  "duration": 14684,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup: Approve the contract for ERC20 transfers\nconst erc20Client = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[mockData_1.aeneid]);\nconst txHash = await erc20Client.approve(spgNftContract, viem_1.maxUint256);\nawait util_1.publicClient.waitForTransactionReceipt({ hash: txHash });\n// Mint a new token with initial metadata\nconst tokenId = await (0, util_1.mintBySpg)(spgNftContract, \"ipfs://QmTest/\");\n(0, chai_1.expect)(tokenId).to.be.a(\"bigint\");\n// Update the token URI\nconst updatedMetadata = \"ipfs://QmUpdated/metadata.json\";\nconst result = await client.nftClient.setTokenURI({\n    tokenId: tokenId,\n    tokenURI: updatedMetadata,\n    spgNftContract,\n});\n// Verify the transaction\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n// Verification that the URI was updated\nconst tokenURI = await client.nftClient.getTokenURI({\n    tokenId,\n    spgNftContract,\n});\n(0, chai_1.expect)(tokenURI).to.equal(updatedMetadata);",
                  "err": {},
                  "uuid": "fdb001dd-56c6-40fc-baa4-38bc0d80382e",
                  "parentUUID": "4d5fee8e-c09d-484b-be33-29da5a1db3ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fdb001dd-56c6-40fc-baa4-38bc0d80382e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14684,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5f027d9a-6936-4f7c-a431-0503bdde56b9",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "fails with invalid token ID",
                  "fullTitle": "nftClient Functions Error Cases fails with invalid token ID",
                  "timedOut": false,
                  "duration": 4944,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const erc20Client = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[mockData_1.aeneid]);\nconst txHash = await erc20Client.approve(spgNftContract, viem_1.maxUint256);\nawait util_1.publicClient.waitForTransactionReceipt({ hash: txHash });\nconst invalidTokenId = 999999999999999n;\nconst updatedMetadata = \"ipfs://QmUpdated/metadata.json\";\nawait (0, chai_1.expect)(client.nftClient.setTokenURI({\n    tokenId: invalidTokenId,\n    tokenURI: updatedMetadata,\n    spgNftContract,\n})).to.be.rejectedWith(\"Failed to set token URI\");",
                  "err": {},
                  "uuid": "93adf55c-c2b7-40e7-b607-210f58bbc13a",
                  "parentUUID": "5f027d9a-6936-4f7c-a431-0503bdde56b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93adf55c-c2b7-40e7-b607-210f58bbc13a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4944,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "34cba62b-f392-4b12-927a-d6a77334b188",
          "title": "Permission Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
          "file": "/test/integration/permission.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Permission Functions\"",
              "fullTitle": "Permission Functions \"before all\" hook in \"Permission Functions\"",
              "timedOut": false,
              "duration": 9936,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = response.ipId;",
              "err": {},
              "uuid": "5ad5c37d-1b80-4480-8a11-90887c132337",
              "parentUUID": "34cba62b-f392-4b12-927a-d6a77334b188",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be1894e3-745a-46be-9152-1ae27a77941e",
              "title": "Single Permission Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set permission successfully",
                  "fullTitle": "Permission Functions Single Permission Operations should set permission successfully",
                  "timedOut": false,
                  "duration": 4997,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setPermission({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n    func: \"function setAll(address,string,bytes32,bytes32)\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "ca5322bc-74bd-4700-a310-75426d93b296",
                  "parentUUID": "be1894e3-745a-46be-9152-1ae27a77941e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set all permissions successfully",
                  "fullTitle": "Permission Functions Single Permission Operations should set all permissions successfully",
                  "timedOut": false,
                  "duration": 4960,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setAllPermissions({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    permission: permission_1.AccessPermission.ALLOW,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "b6b4c910-3ac9-4bbb-b10b-aaa7bf0c4438",
                  "parentUUID": "be1894e3-745a-46be-9152-1ae27a77941e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca5322bc-74bd-4700-a310-75426d93b296",
                "b6b4c910-3ac9-4bbb-b10b-aaa7bf0c4438"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9957,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "d94dae5d-380b-434b-8d5b-3978dd003e9e",
              "title": "Permission Signatures",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create set permission signature",
                  "fullTitle": "Permission Functions Permission Signatures should create set permission signature",
                  "timedOut": false,
                  "duration": 5175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.createSetPermissionSignature({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    func: \"function setAll(address,string,bytes32,bytes32)\",\n    permission: permission_1.AccessPermission.ALLOW,\n    deadline: 60000n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "ec9c27ac-8cb5-4eb9-a1eb-89026630f4fe",
                  "parentUUID": "d94dae5d-380b-434b-8d5b-3978dd003e9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec9c27ac-8cb5-4eb9-a1eb-89026630f4fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "86054519-3a49-4f2d-afea-3aa37a09b78e",
              "title": "Batch Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set batch permissions successfully",
                  "fullTitle": "Permission Functions Batch Operations should set batch permissions successfully",
                  "timedOut": false,
                  "duration": 5166,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setBatchPermissions({\n    permissions: [\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.ALLOW,\n            func: \"function setAll(address,string,bytes32,bytes32)\",\n        },\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.DENY,\n            func: \"function freezeMetadata(address)\",\n        },\n    ],\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "37235641-379b-4bf0-a84d-2c4f2f36e2d8",
                  "parentUUID": "86054519-3a49-4f2d-afea-3aa37a09b78e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create batch permission signature",
                  "fullTitle": "Permission Functions Batch Operations should create batch permission signature",
                  "timedOut": false,
                  "duration": 5328,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.createBatchPermissionSignature({\n    ipId: ipId,\n    permissions: [\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.ALLOW,\n            func: \"function setAll(address,string,bytes32,bytes32)\",\n        },\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.DENY,\n            func: \"function freezeMetadata(address)\",\n        },\n    ],\n    deadline: 60000n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "f9b88597-7d21-42c4-a639-00a4c9266f3a",
                  "parentUUID": "86054519-3a49-4f2d-afea-3aa37a09b78e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37235641-379b-4bf0-a84d-2c4f2f36e2d8",
                "f9b88597-7d21-42c4-a639-00a4c9266f3a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10494,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "10099673-060d-4a50-8d13-dcd8789d15d0",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail when setting permission for unregistered IP",
                  "fullTitle": "Permission Functions Error Cases should fail when setting permission for unregistered IP",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.permission.setPermission({\n    ipId: unregisteredIpId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n})).to.be.rejectedWith(`IP id with ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "8236cdf1-1afe-4795-a298-c83d49b66e55",
                  "parentUUID": "10099673-060d-4a50-8d13-dcd8789d15d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid function signature",
                  "fullTitle": "Permission Functions Error Cases should fail with invalid function signature",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.permission.setPermission({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n    func: \"invalid_function_signature\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "e5d3ca3e-5f22-4ebc-bf61-0d65bdb603a7",
                  "parentUUID": "10099673-060d-4a50-8d13-dcd8789d15d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8236cdf1-1afe-4795-a298-c83d49b66e55",
                "e5d3ca3e-5f22-4ebc-bf61-0d65bdb603a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 197,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b3a88fac-0817-4a49-a109-d2fd51d89075",
          "title": "Royalty Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
          "file": "/test/integration/royalty.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Royalty Functions\"",
              "fullTitle": "Royalty Functions \"before all\" hook in \"Royalty Functions\"",
              "timedOut": false,
              "duration": 31545,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nmockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\n// Setup initial state\nparentIpId = await getIpId();\nchildIpId = await getIpId();\nlicenseTermsId = await getCommercialPolicyId();\n// Setup relationships and approvals\nawait attachLicenseTerms(parentIpId, licenseTermsId);\nawait mockERC20.mint(util_1.TEST_WALLET_ADDRESS, (0, viem_1.parseEther)(\"10\"));\nawait mockERC20.approve(generated_1.royaltyModuleAddress[util_1.aeneid], viem_1.maxUint256);\n// Register derivative\nawait client.ipAsset.registerDerivative({\n    childIpId: childIpId,\n    parentIpIds: [parentIpId],\n    licenseTermsIds: [licenseTermsId],\n    maxMintingFee: \"0\",\n    maxRts: \"0\",\n    maxRevenueShare: \"0\",\n});",
              "err": {},
              "uuid": "51668551-9a32-48df-a9e0-663e36232d6e",
              "parentUUID": "b3a88fac-0817-4a49-a109-d2fd51d89075",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ee68c215-c99a-4ffe-944c-e605069e8f36",
              "title": "Royalty Payments",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully pay royalty on behalf",
                  "fullTitle": "Royalty Functions Royalty Payments should successfully pay royalty on behalf",
                  "timedOut": false,
                  "duration": 9519,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: parentIpId,\n    payerIpId: childIpId,\n    token: generated_1.erc20Address[util_1.aeneid],\n    amount: 1,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "3b2abcc7-3d95-4bbf-8783-22c9623657e2",
                  "parentUUID": "ee68c215-c99a-4ffe-944c-e605069e8f36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto convert IP to WIP when paying WIP on behalf",
                  "fullTitle": "Royalty Functions Royalty Payments should auto convert IP to WIP when paying WIP on behalf",
                  "timedOut": false,
                  "duration": 5639,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst response = await client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: parentIpId,\n    payerIpId: childIpId,\n    token: common_1.WIP_TOKEN_ADDRESS,\n    amount: 100n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 100n));",
                  "err": {},
                  "uuid": "f31f5a1d-b32b-4284-986d-50ed168e2d5d",
                  "parentUUID": "ee68c215-c99a-4ffe-944c-e605069e8f36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to pay royalty with unregistered receiver",
                  "fullTitle": "Royalty Functions Royalty Payments should fail to pay royalty with unregistered receiver",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: unregisteredIpId,\n    payerIpId: childIpId,\n    token: generated_1.erc20Address[util_1.aeneid],\n    amount: 10 * 10 ** 2,\n})).to.be.rejectedWith(`The receiver IP with id ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "d701eb3c-5cf4-47c6-8f90-85e445ff36e9",
                  "parentUUID": "ee68c215-c99a-4ffe-944c-e605069e8f36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the royalty vault to transfer its native tokens to a wallet address",
                  "fullTitle": "Royalty Functions Royalty Payments should allow the royalty vault to transfer its native tokens to a wallet address",
                  "timedOut": false,
                  "duration": 5389,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const royaltyVaultAddress = await client.royalty.getRoyaltyVaultAddress(parentIpId);\nconst royaltyVaultToken = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, royaltyVaultAddress);\nconst transferAmount = BigInt(10 * 10 ** 6); // 10 million tokens\n// Check initial balances of the vault token\nconst initialTargetBalance = await royaltyVaultToken.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst initialParentBalance = await royaltyVaultToken.balanceOf(parentIpId);\n(0, chai_1.expect)(Number(initialParentBalance)).greaterThanOrEqual(Number(transferAmount));\nconst transferResult = await client.ipAccount.execute({\n    to: royaltyVaultAddress,\n    value: 0,\n    ipId: parentIpId,\n    data: (0, viem_1.encodeFunctionData)({\n        abi: viem_1.erc20Abi,\n        functionName: \"transfer\",\n        args: [util_1.TEST_WALLET_ADDRESS, transferAmount],\n    }),\n});\n(0, chai_1.expect)(transferResult.txHash).to.be.a(\"string\");\n// Check final balances to confirm the transfer worked\nconst finalTargetBalance = await royaltyVaultToken.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst finalParentBalance = await royaltyVaultToken.balanceOf(parentIpId);\n(0, chai_1.expect)(finalTargetBalance).to.equal(initialTargetBalance + transferAmount, \"Target wallet balance should increase by the transfer amount\");\n(0, chai_1.expect)(Number(finalParentBalance)).equal(Number(initialParentBalance - transferAmount));",
                  "err": {},
                  "uuid": "7618787e-ad69-427f-b4d5-76d22a57d708",
                  "parentUUID": "ee68c215-c99a-4ffe-944c-e605069e8f36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b2abcc7-3d95-4bbf-8783-22c9623657e2",
                "f31f5a1d-b32b-4284-986d-50ed168e2d5d",
                "d701eb3c-5cf4-47c6-8f90-85e445ff36e9",
                "7618787e-ad69-427f-b4d5-76d22a57d708"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20640,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a49b7c74-c818-4fa9-9033-488cdd3d996c",
              "title": "Revenue Queries",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return claimable revenue amount",
                  "fullTitle": "Royalty Functions Revenue Queries should return claimable revenue amount",
                  "timedOut": false,
                  "duration": 257,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.claimableRevenue({\n    ipId: parentIpId,\n    claimer: util_1.TEST_WALLET_ADDRESS,\n    token: generated_1.erc20Address[util_1.aeneid],\n});\n(0, chai_1.expect)(response).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "8020100b-c22d-45ed-889d-09343bb67e17",
                  "parentUUID": "a49b7c74-c818-4fa9-9033-488cdd3d996c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to get royalty vault address for unregistered IP",
                  "fullTitle": "Royalty Functions Revenue Queries should fail to get royalty vault address for unregistered IP",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.royalty.getRoyaltyVaultAddress(unregisteredIpId)).to.be.rejectedWith(`The royalty vault IP with id ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "6f92198f-ff25-4ed0-a9e6-55983f000652",
                  "parentUUID": "a49b7c74-c818-4fa9-9033-488cdd3d996c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8020100b-c22d-45ed-889d-09343bb67e17",
                "6f92198f-ff25-4ed0-a9e6-55983f000652"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e150df33-1940-4860-8b83-920899025490",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return zero for claimable revenue with invalid token",
                  "fullTitle": "Royalty Functions Error Cases should return zero for claimable revenue with invalid token",
                  "timedOut": false,
                  "duration": 266,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.claimableRevenue({\n    ipId: parentIpId,\n    claimer: util_1.TEST_WALLET_ADDRESS,\n    token: \"0x0000000000000000000000000000000000000000\",\n});\n(0, chai_1.expect)(response).to.equal(0n);",
                  "err": {},
                  "uuid": "9f622c5e-84bc-4994-9e89-d51fb0e22881",
                  "parentUUID": "e150df33-1940-4860-8b83-920899025490",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f622c5e-84bc-4994-9e89-d51fb0e22881"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 266,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "cf754fa4-bc40-4ce1-a34c-b60a0a62b95e",
              "title": "ClaimAllRevenue With WIP",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"ClaimAllRevenue With WIP\"",
                  "fullTitle": "Royalty Functions ClaimAllRevenue With WIP \"before all\" hook in \"ClaimAllRevenue With WIP\"",
                  "timedOut": false,
                  "duration": 32557,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// set up\n// minting Fee: 100, 10% LAP rev share, A expect to get 120 WIP\n// A -> B -> C -> D\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"free-collection\",\n    symbol: \"FREE\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: viem_1.zeroAddress,\n});\nspgNftContract = txData.spgNftContract;\nconst retA = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 100n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 100n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nipA = retA.ipId;\nlicenseId = retA.licenseTermsIds[0];\nconst retB = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipA],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\nipB = retB.ipId;\nconst retC = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipB],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\nipC = retC.ipId;\nawait client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipC],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});",
                  "err": {},
                  "uuid": "a9d42c45-5842-4def-ae80-89e73e86984c",
                  "parentUUID": "cf754fa4-bc40-4ce1-a34c-b60a0a62b95e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should claim all revenue",
                  "fullTitle": "Royalty Functions ClaimAllRevenue With WIP should claim all revenue",
                  "timedOut": false,
                  "duration": 14768,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ret = await client.royalty.claimAllRevenue({\n    ancestorIpId: ipA,\n    claimer: ipA,\n    childIpIds: [ipB, ipC],\n    royaltyPolicies: [generated_1.royaltyPolicyLapAddress[util_1.aeneid], generated_1.royaltyPolicyLapAddress[util_1.aeneid]],\n    currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n});\n(0, chai_1.expect)(ret.txHashes).to.be.an(\"array\");\n(0, chai_1.expect)(ret.claimedTokens[0].amount).to.equal(120n);",
                  "err": {},
                  "uuid": "52dfde4f-0dd0-4a04-a6cb-61abd6e5cf00",
                  "parentUUID": "cf754fa4-bc40-4ce1-a34c-b60a0a62b95e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52dfde4f-0dd0-4a04-a6cb-61abd6e5cf00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14768,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "9f436bd1-ba24-4dbc-abf7-f541ffec2c3d",
              "title": "BatchClaimAllRevenue With WIP",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"BatchClaimAllRevenue With WIP\"",
                  "fullTitle": "Royalty Functions BatchClaimAllRevenue With WIP \"before all\" hook in \"BatchClaimAllRevenue With WIP\"",
                  "timedOut": false,
                  "duration": 53877,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nanotherAddress = derivedClient.address;\nawait client.wipClient.deposit({\n    amount: (0, viem_1.parseEther)(\"5\"),\n});\n/**\n * Asset Hierarchy Setup for Revenue Collection Tests\n *\n * Overview:\n * This test setup creates two distinct IP asset hierarchies (IpA and IpB) to demonstrate\n * different revenue collection scenarios using LAP (Licensing Agreement Policy) and LRP\n * (Licensing Revenue Policy) respectively.\n *\n * IpA Hierarchy (LAP - Licensing Agreement Policy):                           IpB Hierarchy (LRP - Licensing Revenue Policy):\n * ┌─────────────────────────────────────────────────────────────┐          ┌─────────────────────────────────────────────────────────────┐\n * │ IpA (Parent) - Total Expected Revenue: 130 WIP              │          │ IpB (Parent) - Total Expected Revenue: 330 WIP              │\n * ├─────────────────────────────────────────────────────────────┤          ├─────────────────────────────────────────────────────────────┤\n * │ Revenue Sources:                                            │          │ Revenue Sources:                                            │\n * │ ├── Minting Fee: 100 WIP                                    │          │ ├── Minting Fee: 150 WIP                                    │\n * │ ├── Revenue Share (ipA2->ipA1): 10 WIP (10% LAP)            │          │ ├── LRP Revenue Share: 10%                                  │\n * │ ├── Revenue Share (ipA3->ipA2): 10 WIP (10% LAP)            │          │ ├── Total Revenue: 330 WIP                                  │\n * │ └── Direct Payment (ipA3): 10 WIP (10% LAP)                 │          │    └── From ipB1: 150 WIP + 10% revenue share               │\n * │                                                             │          │    └── From ipB2: 150 WIP + 10% revenue share               │\n * │                                                             │          │                                                             │\n * | Ownership Distribution:                                     │          |                                                             │\n * │ ├── Wallet Address: 50%  65 WIP                             │          │ Revenue Flow:                                               │\n * │ └── Another Address: 50% 65 WIP                             │          │ ipB3                                                        │\n * │                                                             │          │ ├── ipB1 ─┐                                                 │\n * │ Revenue Flow:                                               │          │ └── ipB2 ─┴──> ipB (collects 330 WIP)                       │\n * │ ipA3                                                        │          │                                                             │\n * │  └──> ipA2 (20% LAP) ──> ipA1 (10% LAP) ──> ipA             │          │                                                             │\n * │       └──> Direct Payment: 100 WIP                          │          │                                                             │\n * └─────────────────────────────────────────────────────────────┘          └─────────────────────────────────────────────────────────────┘\n */\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"free-collection\",\n    symbol: \"FREE\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: viem_1.zeroAddress,\n});\nspgNftContract = txData.spgNftContract;\n// 1. Register ipA\nconst ret1A = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 100n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 100n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 50,\n        },\n        {\n            recipient: anotherAddress,\n            percentage: 50,\n        },\n    ],\n});\nipA = ret1A.ipId;\nlicenseId = ret1A.licenseTermsIds[0];\n// 2. Register ipB\nconst ret1B = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLrpAddress[util_1.aeneid],\n                defaultMintingFee: 150n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 150n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nipB = ret1B.ipId;\nlicenseId1 = ret1B.licenseTermsIds[0];\n// 3. Register ipA1 from ipA and ipB1 from ipB\nconst { results: ret2 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB],\n                licenseTermsIds: [licenseId1],\n            },\n        },\n    ],\n});\nipA1 = ret2[0].ipId;\nipB1 = ret2[1].ipId;\n// 4. Register ipA2 from ipA1 and ipB2 from ipB\nconst { results: ret3 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA1],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB],\n                licenseTermsIds: [licenseId1],\n            },\n        },\n    ],\n});\nipA2 = ret3[0].ipId;\nipB2 = ret3[1].ipId;\n// 5. Register ipA3 from ipA2 and ipB3 from ipB1 and ipB2\nconst { results: ret4 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA2],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB1, ipB2],\n                licenseTermsIds: [licenseId1, licenseId1],\n            },\n        },\n    ],\n});\nipA3 = ret4[0].ipId;\n// 6. Pay royalty on behalf of ipA2 to ipA3\nawait client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: ipA2,\n    payerIpId: ipA3,\n    token: common_1.WIP_TOKEN_ADDRESS,\n    amount: 100n,\n});\nconst balance = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nawait client.wipClient.withdraw({\n    amount: balance,\n});",
                  "err": {},
                  "uuid": "922aff2d-61e2-4715-a3ca-7e49d0c82498",
                  "parentUUID": "9f436bd1-ba24-4dbc-abf7-f541ffec2c3d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should batch claim all revenue",
                  "fullTitle": "Royalty Functions BatchClaimAllRevenue With WIP should batch claim all revenue",
                  "timedOut": false,
                  "duration": 15310,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const anotherAddressWipBalanceBefore = await client.wipClient.balanceOf(anotherAddress);\nconst result = await client.royalty.batchClaimAllRevenue({\n    ancestorIps: [\n        {\n            ipId: ipA,\n            claimer: util_1.TEST_WALLET_ADDRESS,\n            childIpIds: [ipA1, ipA2],\n            royaltyPolicies: [generated_1.royaltyPolicyLapAddress[util_1.aeneid], generated_1.royaltyPolicyLapAddress[util_1.aeneid]],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n        },\n        {\n            ipId: ipA,\n            claimer: anotherAddress,\n            childIpIds: [],\n            royaltyPolicies: [],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS],\n        },\n        {\n            ipId: ipB,\n            claimer: ipB,\n            childIpIds: [ipB1, ipB2],\n            royaltyPolicies: [generated_1.royaltyPolicyLrpAddress[util_1.aeneid], generated_1.royaltyPolicyLrpAddress[util_1.aeneid]],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n        },\n    ],\n});\nconst anotherAddressWipBalanceAfter = await client.wipClient.balanceOf(anotherAddress);\nconst walletWipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(result.txHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.claimedTokens[0].amount).to.equal(65n);\n(0, chai_1.expect)(result.claimedTokens[1].amount).to.equal(65n);\n(0, chai_1.expect)(result.claimedTokens[2].amount).to.equal(330n);\n(0, chai_1.expect)(walletWipBalanceAfter).to.equal(0n);\n(0, chai_1.expect)(anotherAddressWipBalanceAfter).to.equal(anotherAddressWipBalanceBefore + 65n);\n// Note: The final wallet balance cannot be precisely calculated because:\n// The test involves multiple transactions (claimAllRevenue, token transfers, etc.)\n// batchClaimAllRevenue only returns receipts for claimAllRevenue calls\n// Additional gas costs and token transfers occur outside the returned receipts",
                  "err": {},
                  "uuid": "5df4c768-2822-4155-bd24-4d7eb84b1bea",
                  "parentUUID": "9f436bd1-ba24-4dbc-abf7-f541ffec2c3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5df4c768-2822-4155-bd24-4d7eb84b1bea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15310,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a19513c3-3e77-483b-8d38-e4ee57a0ef47",
          "title": "WIP Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
          "file": "/test/integration/wip.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WIP Functions\"",
              "fullTitle": "WIP Functions \"before all\" hook in \"WIP Functions\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();",
              "err": {},
              "uuid": "a5e38a6a-f45c-4e27-bcf3-aad54f06446a",
              "parentUUID": "a19513c3-3e77-483b-8d38-e4ee57a0ef47",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3e011ab2-12c9-47ff-b7b0-afa1ce16ff7e",
              "title": "deposit",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should deposit 0.01 WIP",
                  "fullTitle": "WIP Functions deposit should deposit 0.01 WIP",
                  "timedOut": false,
                  "duration": 5225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ipAmt = (0, viem_1.parseEther)(\"0.01\");\nconst balanceBefore = await client.getWalletBalance();\nconst wipBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst rsp = await client.wipClient.deposit({\n    amount: ipAmt,\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.equal(wipBefore + ipAmt);\nconst gasCost = rsp.receipt.gasUsed * rsp.receipt.effectiveGasPrice;\n(0, chai_1.expect)(balanceAfter).to.equal(balanceBefore - ipAmt - gasCost);",
                  "err": {},
                  "uuid": "85284932-1dd4-4529-87ad-3e8772d4300b",
                  "parentUUID": "3e011ab2-12c9-47ff-b7b0-afa1ce16ff7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85284932-1dd4-4529-87ad-3e8772d4300b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5225,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "24710a8e-19fb-44e7-acf0-f4abcdb0f764",
              "title": "transfer",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should transfer WIP",
                  "fullTitle": "WIP Functions transfer should transfer WIP",
                  "timedOut": false,
                  "duration": 4849,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rsp = await client.wipClient.transfer({\n    to: util_1.TEST_WALLET_ADDRESS,\n    amount: (0, viem_1.parseEther)(\"0.01\"),\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n//Due to approve cannot approve msy.sender, so skip transferFrom test",
                  "err": {},
                  "uuid": "72d6085e-c10d-482a-b352-79cdb2b89e12",
                  "parentUUID": "24710a8e-19fb-44e7-acf0-f4abcdb0f764",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72d6085e-c10d-482a-b352-79cdb2b89e12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4849,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4c09a32d-670b-4850-a065-891d3de16360",
              "title": "withdraw",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should withdrawal WIP",
                  "fullTitle": "WIP Functions withdraw should withdrawal WIP",
                  "timedOut": false,
                  "duration": 5212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst wipBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst rsp = await client.wipClient.withdraw({\n    amount: wipBefore,\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.equal(0n);\nconst balanceAfter = await client.getWalletBalance();\nconst gasCost = rsp.receipt.gasUsed * rsp.receipt.effectiveGasPrice;\n(0, chai_1.expect)(balanceAfter).to.equal(balanceBefore + wipBefore - gasCost);",
                  "err": {},
                  "uuid": "4184cdaf-bd87-4148-894b-c33d5c2fbd9b",
                  "parentUUID": "4c09a32d-670b-4850-a065-891d3de16360",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4184cdaf-bd87-4148-894b-c33d5c2fbd9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5212,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}
{
  "stats": {
    "suites": 48,
    "tests": 138,
    "passes": 138,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-25T09:23:51.686Z",
    "end": "2025-07-25T09:58:32.425Z",
    "duration": 2080739,
    "testsRegistered": 138,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "90d2c563-9ca1-45d1-9d06-6ce9619342df",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aca404f1-2bd3-4b6f-a2dc-a791582e0b97",
          "title": "Dispute Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
          "file": "/test/integration/dispute.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Dispute Functions\"",
              "fullTitle": "Dispute Functions \"before all\" hook in \"Dispute Functions\"",
              "timedOut": false,
              "duration": 10505,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientA = (0, util_1.getStoryClient)();\nconst derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nclientB = derivedClient.clientB;\nminimumBond = await (0, oov3_1.getMinimumBond)(util_1.publicClient, new generated_1.ArbitrationPolicyUmaClient(util_1.publicClient, util_1.walletClient), src_1.WIP_TOKEN_ADDRESS);\nconst txData = await clientA.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nconst nftContract = txData.spgNftContract;\nipIdB = (await clientB.ipAsset.mintAndRegisterIp({\n    spgNftContract: nftContract,\n})).ipId;",
              "err": {},
              "uuid": "ef9c5094-09a4-42f2-93ef-a30d4696ec6c",
              "parentUUID": "aca404f1-2bd3-4b6f-a2dc-a791582e0b97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should not cancel a dispute (yet)",
              "fullTitle": "Dispute Functions it should not cancel a dispute (yet)",
              "timedOut": false,
              "duration": 10717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const raiseResponse = await clientA.dispute.raiseDispute({\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 2592000,\n    bond: minimumBond,\n});\nawait (0, chai_1.expect)(clientA.dispute.cancelDispute({\n    disputeId: raiseResponse.disputeId,\n})).to.be.rejected;",
              "err": {},
              "uuid": "9dcc17aa-9774-41f1-91b7-0f26dcfd8297",
              "parentUUID": "aca404f1-2bd3-4b6f-a2dc-a791582e0b97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "84e03260-a262-43c7-bc46-8697c7bc6868",
              "title": "raiseDispute and counter dispute",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
              "file": "/test/integration/dispute.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should raise a dispute",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise a dispute",
                  "timedOut": false,
                  "duration": 10601,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const raiseDisputeRequest = {\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 2592000,\n    bond: minimumBond,\n};\nconst response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\ndisputeId = response.disputeId;",
                  "err": {},
                  "uuid": "63dbb1ec-c813-42be-8447-eeddcd59ff6f",
                  "parentUUID": "84e03260-a262-43c7-bc46-8697c7bc6868",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate all enum values defined in DisputeTargetTag",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should validate all enum values defined in DisputeTargetTag",
                  "timedOut": false,
                  "duration": 451,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const tagHex = (0, viem_1.toHex)(tag, { size: 32 });\n    const { allowed } = await clientA.dispute.disputeModuleClient.isWhitelistedDisputeTag({\n        tag: tagHex,\n    });\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        (0, chai_1.expect)(allowed).equal(false);\n    }\n    else {\n        (0, chai_1.expect)(allowed).equal(true);\n    }\n}",
                  "err": {},
                  "uuid": "412a81bb-a9b7-4bb9-b885-84bb26bc18b4",
                  "parentUUID": "84e03260-a262-43c7-bc46-8697c7bc6868",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should raise disputes with different DisputeTargetTag enum values",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise disputes with different DisputeTargetTag enum values",
                  "timedOut": false,
                  "duration": 46543,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const raiseDisputeRequest = {\n        targetIpId: ipIdB,\n        cid: await generateCID(),\n        targetTag: tag,\n        liveness: 2592000,\n        bond: minimumBond,\n    };\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        await (0, chai_1.expect)(clientA.dispute.raiseDispute(raiseDisputeRequest)).to.be.rejectedWith(\"The target tag IN_DISPUTE is not whitelisted\");\n    }\n    else {\n        const response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n        (0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n        (0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\n    }\n}",
                  "err": {},
                  "uuid": "c3e2538a-0e63-4e4b-9e6e-10717eb4bc88",
                  "parentUUID": "84e03260-a262-43c7-bc46-8697c7bc6868",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject a dispute with an invalid tag not defined in the enum",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should reject a dispute with an invalid tag not defined in the enum",
                  "timedOut": false,
                  "duration": 367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientA.dispute.raiseDispute({\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: \"INVALID_TAG\",\n    liveness: 2592000,\n    bond: minimumBond,\n})).to.be.rejectedWith(\"The target tag INVALID_TAG is not whitelisted\");",
                  "err": {},
                  "uuid": "7686e84a-81d7-4e56-8395-c7d1aad7eafc",
                  "parentUUID": "84e03260-a262-43c7-bc46-8697c7bc6868",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to counter existing dispute once",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should be able to counter existing dispute once",
                  "timedOut": false,
                  "duration": 15843,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assertionId = await clientB.dispute.disputeIdToAssertionId(disputeId);\nconst counterEvidenceCID = await generateCID();\nconst ret = await clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n});\n(0, chai_1.expect)(ret.txHash).to.be.a(\"string\");\n// should throw error if attempting to dispute assertion again\nawait (0, chai_1.expect)(clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "54f2fbbe-7a6e-4cc5-97bd-a4885df3b316",
                  "parentUUID": "84e03260-a262-43c7-bc46-8697c7bc6868",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63dbb1ec-c813-42be-8447-eeddcd59ff6f",
                "412a81bb-a9b7-4bb9-b885-84bb26bc18b4",
                "c3e2538a-0e63-4e4b-9e6e-10717eb4bc88",
                "7686e84a-81d7-4e56-8395-c7d1aad7eafc",
                "54f2fbbe-7a6e-4cc5-97bd-a4885df3b316"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73805,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
              "title": "Dispute resolution",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
              "file": "/test/integration/dispute.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Dispute resolution\"",
                  "fullTitle": "Dispute Functions Dispute resolution \"before each\" hook in \"Dispute resolution\"",
                  "timedOut": false,
                  "duration": 39633,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup NFT collection\nconst txData = await clientA.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\n// Get parent IP ID and license terms ID\nconst ipIdAndLicenseResponse = await clientA.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContract,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: src_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: generated_1.evenSplitGroupPoolAddress[util_1.aeneid],\n            },\n        },\n    ],\n});\nparentIpId = ipIdAndLicenseResponse.ipId;\nlicenseTermsId = ipIdAndLicenseResponse.licenseTermsIds[0];\n//Create a derivative ip\nconst derivativeIpIdResponse1 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\nchildIpId = derivativeIpIdResponse1.ipId;\n// Create a second derivative ip\nconst derivativeIpIdResponse2 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\nchildIpId2 = derivativeIpIdResponse2.ipId;\n// Raise a dispute\nconst response = await clientA.dispute.raiseDispute({\n    targetIpId: parentIpId,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 1,\n    bond: minimumBond,\n});\ndisputeId = response.disputeId;\n// This timeout guarantees that the assertion is expired\n// its intended to be longer than the current block time\n// so it won't be included in the same block\nawait new Promise((resolve) => setTimeout(resolve, 3000));",
                  "err": {},
                  "uuid": "24f40718-86ea-49d4-9076-0d69b972dfb0",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should tag infringing ip",
                  "fullTitle": "Dispute Functions Dispute resolution should tag infringing ip",
                  "timedOut": false,
                  "duration": 9941,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Tag derivative IP as infringing\nconst results = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: childIpId2,\n            disputeId: disputeId,\n        },\n    ],\n});\n(0, chai_1.expect)(results[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "59f84069-f355-40b3-8e0c-6b5f7df1c9c2",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag a single IP as infringing without using multicall",
                  "fullTitle": "Dispute Functions Dispute resolution should tag a single IP as infringing without using multicall",
                  "timedOut": false,
                  "duration": 10024,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Test Flow:\n * 1. Set judgment on an existing dispute to mark it as valid (did in `before each` block)\n * 2. Verify the dispute state changed correctly after judgment\n * 3. Try to tag a derivative IP using the judged dispute\n */\n// Step 1: Set judgment on an existing dispute to mark it as valid\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Step 2: Verify dispute state\n// The disputes() function returns multiple values about the dispute:\n// - targetTag: the tag we wanted to apply when raising the dispute\n// - currentTag: the current state of the dispute after judgment\n// After a successful judgment, currentTag should equal targetTag\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag); // Verify judgment was recorded correctly\n// Step 3: Attempt to tag a derivative IP\n// This will fail if:\n// - The dispute is not in a valid state (still IN_DISPUTE or cleared)\n// - The IP we're trying to tag is not actually a derivative of the disputed IP\n// - The dispute has already been used to tag this IP\nconst response = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId, // The derivative IP to tag\n            disputeId: disputeId, // Using the judged dispute as basis for tagging\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: false, // Force single transaction instead of batch\n    },\n});\n// Verify we got the expected response\n(0, chai_1.expect)(response).to.have.lengthOf(1);\n(0, chai_1.expect)(response[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "3dfeba88-604a-42d7-a266-76a97f318f07",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag multiple IPs as infringing using multicall",
                  "fullTitle": "Dispute Functions Dispute resolution should tag multiple IPs as infringing using multicall",
                  "timedOut": false,
                  "duration": 29321,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const disputeResponse = await clientA.dispute.raiseDispute({\n    targetIpId: parentIpId,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 1,\n    bond: minimumBond,\n});\nconst testDisputeId = disputeResponse.disputeId;\nconst derivativeResponse2 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nconst newChildIpId = derivativeResponse2.ipId;\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, testDisputeId);\n// This timeout guarantees that the assertion is expired\n// its intended to be longer than the current block time\n// so it won't be included in the same block\nawait new Promise((resolve) => setTimeout(resolve, 3000));\nconst { currentTag, targetTag } = await getDisputeState(testDisputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst response = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: testDisputeId,\n        },\n        {\n            ipId: newChildIpId,\n            disputeId: testDisputeId,\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: true,\n    },\n});\n(0, chai_1.expect)(response).to.have.lengthOf(1);\n(0, chai_1.expect)(response[0].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "191c1b96-cd9c-4b89-8521-6a06bb205d6f",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should tag multiple IPs without multicall when specified",
                  "fullTitle": "Dispute Functions Dispute resolution should tag multiple IPs without multicall when specified",
                  "timedOut": false,
                  "duration": 26364,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create two new derivative IPs sequentially\nconst derivativeResponse3 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nconst derivativeResponse4 = await clientA.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n    allowDuplicates: true,\n});\nawait (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst responses = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: derivativeResponse3.ipId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: derivativeResponse4.ipId,\n            disputeId: disputeId,\n        },\n    ],\n    options: {\n        useMulticallWhenPossible: false,\n    },\n});\n(0, chai_1.expect)(responses).to.have.lengthOf(2);\n(0, chai_1.expect)(responses[0].txHash).to.be.a(\"string\");\n(0, chai_1.expect)(responses[1].txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "7ed90020-5f15-4ee2-b320-3c4f7ecf063f",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to tag with invalid dispute ID",
                  "fullTitle": "Dispute Functions Dispute resolution should fail when trying to tag with invalid dispute ID",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: 999999n,\n        },\n    ],\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "6d179447-829c-40d5-8fef-498b43ded2b6",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should resolve a dispute successfully when initiated by dispute initiator",
                  "fullTitle": "Dispute Functions Dispute resolution should resolve a dispute successfully when initiated by dispute initiator",
                  "timedOut": false,
                  "duration": 14177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\nconst { currentTag, targetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(currentTag).to.equal(targetTag);\nconst response = await clientA.dispute.resolveDispute({\n    disputeId: disputeId,\n    data: \"0x\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "40bd11ad-9d51-4a54-93f5-fcbdbac47d6a",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when non-initiator tries to resolve the dispute",
                  "fullTitle": "Dispute Functions Dispute resolution should fail when non-initiator tries to resolve the dispute",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientB.dispute.resolveDispute({\n    disputeId: disputeId,\n    data: \"0x\",\n})).to.be.rejectedWith(\"NotDisputeInitiator\");",
                  "err": {},
                  "uuid": "5f613c8c-0ac3-48b8-8a5a-b17ab008c766",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should propagate IMPROPER_REGISTRATION tag to derivative IPs",
                  "fullTitle": "Dispute Functions Dispute resolution should propagate IMPROPER_REGISTRATION tag to derivative IPs",
                  "timedOut": false,
                  "duration": 10097,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, oov3_1.settleAssertion)(util_1.TEST_PRIVATE_KEY, disputeId);\n// Verify the dispute state changed correctly\nconst { currentTag: parentCurrentTag, targetTag: parentTargetTag } = await getDisputeState(disputeId);\n(0, chai_1.expect)(parentCurrentTag).to.equal(parentTargetTag);\n// Propagate the tag to both derivative IPs\nconst results = await clientA.dispute.tagIfRelatedIpInfringed({\n    infringementTags: [\n        {\n            ipId: childIpId,\n            disputeId: disputeId,\n        },\n        {\n            ipId: childIpId2,\n            disputeId: disputeId,\n        },\n    ],\n});\nconst logData = results[0].receipt?.logs[0].data;\nconst firstWord = logData.slice(0, 66);\nconst childDisputeId = BigInt(firstWord);\n// Verify successful tagging\n(0, chai_1.expect)(results[0].txHash).to.be.a(\"string\");\nconst { currentTag: childCurrentTag } = await getDisputeState(childDisputeId);\n// Convert the IMPROPER_USAGE tag to hex for comparison\nconst improperUsageTagHex = (0, viem_1.toHex)(src_1.DisputeTargetTag.IMPROPER_REGISTRATION, { size: 32 });\n// Verify both child IPs have the IMPROPER_USAGE tag by\n// fetching and comparing their dispute tags\n(0, chai_1.expect)(parentCurrentTag).to.equal(parentTargetTag);\n(0, chai_1.expect)(childCurrentTag).to.equal(improperUsageTagHex);",
                  "err": {},
                  "uuid": "33b05ccc-ff05-4e3c-a0b5-643704b08ea9",
                  "parentUUID": "9462ede4-ec5e-48bf-bbeb-74ff8c751465",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59f84069-f355-40b3-8e0c-6b5f7df1c9c2",
                "3dfeba88-604a-42d7-a266-76a97f318f07",
                "191c1b96-cd9c-4b89-8521-6a06bb205d6f",
                "7ed90020-5f15-4ee2-b320-3c4f7ecf063f",
                "6d179447-829c-40d5-8fef-498b43ded2b6",
                "40bd11ad-9d51-4a54-93f5-fcbdbac47d6a",
                "5f613c8c-0ac3-48b8-8a5a-b17ab008c766",
                "33b05ccc-ff05-4e3c-a0b5-643704b08ea9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "9dcc17aa-9774-41f1-91b7-0f26dcfd8297"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10717,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d9519d79-951a-4712-8793-b39caf72a23d",
          "title": "Group Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
          "file": "/test/integration/group.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Group Functions\"",
              "fullTitle": "Group Functions \"before all\" hook in \"Group Functions\"",
              "timedOut": false,
              "duration": 4902,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\n// Create NFT Collection\nspgNftContract = (await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n})).spgNftContract;",
              "err": {},
              "uuid": "47ab7ac8-c75c-4de5-b1f7-b318816d98b4",
              "parentUUID": "d9519d79-951a-4712-8793-b39caf72a23d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
              "title": "Group Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
              "file": "/test/integration/group.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Group Operations\"",
                  "fullTitle": "Group Functions Group Operations \"before all\" hook in \"Group Operations\"",
                  "timedOut": false,
                  "duration": 10808,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create initial IP with license terms\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    allowDuplicates: false,\n    licenseTermsData,\n});\nlicenseTermsId = result.licenseTermsIds[0];\nipId = result.ipId;\n// Set licensing config\nawait client.license.setLicensingConfig({\n    ipId,\n    licenseTermsId,\n    licenseTemplate: generated_1.piLicenseTemplateAddress[util_1.aeneid],\n    licensingConfig: {\n        isSet: true,\n        mintingFee: 0n,\n        licensingHook: viem_1.zeroAddress,\n        hookData: viem_1.zeroAddress,\n        commercialRevShare: 0,\n        disabled: false,\n        expectMinimumGroupRewardShare: 0,\n        expectGroupRewardPool: groupPoolAddress,\n    },\n});",
                  "err": {},
                  "uuid": "0addb980-25ea-4d5a-a1bc-da55ceb94218",
                  "parentUUID": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully register group and attach license",
                  "fullTitle": "Group Functions Group Operations should successfully register group and attach license",
                  "timedOut": false,
                  "duration": 9010,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroupAndAttachLicense({\n    groupPool: groupPoolAddress,\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n});\ngroupId = result.groupId;\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "4792548e-bc3a-40bb-88eb-8e9f66e44eba",
                  "parentUUID": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully mint, register IP, attach license and add to group",
                  "fullTitle": "Group Functions Group Operations should successfully mint, register IP, attach license and add to group",
                  "timedOut": false,
                  "duration": 5183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.mintAndRegisterIpAndAttachLicenseAndAddToGroup({\n    groupId,\n    spgNftContract,\n    licenseData: [\n        {\n            licenseTermsId,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: groupPoolAddress,\n            },\n        },\n    ],\n    maxAllowedRewardShare: 5,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "785fc5c5-576e-4037-8cb9-cb7a1d9dc54f",
                  "parentUUID": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register a basic group",
                  "fullTitle": "Group Functions Group Operations should successfully register a basic group",
                  "timedOut": false,
                  "duration": 4905,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroup({\n    groupPool: groupPoolAddress,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "985628e1-8597-4b0c-9821-dd72918072f0",
                  "parentUUID": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register existing IP with license and add to group",
                  "fullTitle": "Group Functions Group Operations should successfully register existing IP with license and add to group",
                  "timedOut": false,
                  "duration": 10254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(spgNftContract, \"test-metadata\");\nconst result = await client.groupClient.registerIpAndAttachLicenseAndAddToGroup({\n    groupId,\n    nftContract: spgNftContract,\n    tokenId,\n    maxAllowedRewardShare: 5,\n    licenseData: [\n        {\n            licenseTermsId,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: groupPoolAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "34be4898-2b25-4bfe-9995-911455de32bd",
                  "parentUUID": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register group with license and add multiple IPs",
                  "fullTitle": "Group Functions Group Operations should successfully register group with license and add multiple IPs",
                  "timedOut": false,
                  "duration": 5111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.registerGroupAndAttachLicenseAndAddIps({\n    groupPool: groupPoolAddress,\n    maxAllowedRewardShare: 5,\n    ipIds: [ipId],\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.groupId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "4d895f96-602e-4c7e-a648-c8059b6a779f",
                  "parentUUID": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to add unregistered IP to group",
                  "fullTitle": "Group Functions Group Operations should fail when trying to add unregistered IP to group",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.groupClient.registerGroupAndAttachLicenseAndAddIps({\n    groupPool: groupPoolAddress,\n    maxAllowedRewardShare: 5,\n    ipIds: [viem_1.zeroAddress], // Invalid IP address\n    licenseData: {\n        licenseTermsId,\n        licensingConfig: {\n            isSet: true,\n            mintingFee: 0n,\n            licensingHook: viem_1.zeroAddress,\n            hookData: viem_1.zeroAddress,\n            commercialRevShare: 0,\n            disabled: false,\n            expectMinimumGroupRewardShare: 0,\n            expectGroupRewardPool: viem_1.zeroAddress,\n        },\n    },\n})).to.be.rejectedWith(\"Failed to register group and attach license and add ips\");",
                  "err": {},
                  "uuid": "42a8c9a0-3d84-4ccc-af5e-93190a592ecf",
                  "parentUUID": "abbed803-8c6d-4ce7-854f-0a48c891bb1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "8270fa3f-794c-4e36-be27-eef4f2acad31",
                  "title": "Add IPs to Group and Remove IPs from Group",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
                  "file": "/test/integration/group.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should successfully add multiple IPs to group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should successfully add multiple IPs to group",
                      "timedOut": false,
                      "duration": 12297,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const registerResult = await client.ipAsset.batchMintAndRegisterIpAssetWithPilTerms({\n    args: [\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n        {\n            spgNftContract,\n            licenseTermsData,\n        },\n    ],\n});\nipIds = registerResult.results?.map((result) => result.ipId) ?? [];\nconst result = await client.groupClient.addIpsToGroup({\n    groupIpId: groupId,\n    ipIds: ipIds,\n    maxAllowedRewardSharePercentage: 5,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "f57eb5e7-d01a-462a-8bd9-de709d57f2f2",
                      "parentUUID": "8270fa3f-794c-4e36-be27-eef4f2acad31",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should successfully remove IPs from group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should successfully remove IPs from group",
                      "timedOut": false,
                      "duration": 4909,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.groupClient.removeIpsFromGroup({\n    groupIpId: groupId,\n    ipIds: ipIds,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "e62ce655-2f43-44e3-9fbc-1a9b06a32bf3",
                      "parentUUID": "8270fa3f-794c-4e36-be27-eef4f2acad31",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to remove IPs from a non-existent group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should fail when trying to remove IPs from a non-existent group",
                      "timedOut": false,
                      "duration": 5796,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const registerResult = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData,\n});\nconst testIpId = registerResult.ipId;\nconst nonExistentGroupId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.removeIpsFromGroup({\n    groupIpId: nonExistentGroupId,\n    ipIds: [testIpId],\n})).to.be.rejectedWith(\"Failed to remove IPs from group\");",
                      "err": {},
                      "uuid": "be14c7db-87e4-4f18-95db-d1391aa7f41d",
                      "parentUUID": "8270fa3f-794c-4e36-be27-eef4f2acad31",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to remove non-existent IPs from a group",
                      "fullTitle": "Group Functions Group Operations Add IPs to Group and Remove IPs from Group should fail when trying to remove non-existent IPs from a group",
                      "timedOut": false,
                      "duration": 9081,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const groupResult = await client.groupClient.registerGroup({\n    groupPool: groupPoolAddress,\n});\nconst testGroupId = groupResult.groupId;\nconst nonExistentIpId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.removeIpsFromGroup({\n    groupIpId: testGroupId,\n    ipIds: [nonExistentIpId],\n})).to.be.rejectedWith(\"Failed to remove IPs from group\");",
                      "err": {},
                      "uuid": "3b998550-2778-4cb5-b37e-bbab8292675c",
                      "parentUUID": "8270fa3f-794c-4e36-be27-eef4f2acad31",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f57eb5e7-d01a-462a-8bd9-de709d57f2f2",
                    "e62ce655-2f43-44e3-9fbc-1a9b06a32bf3",
                    "be14c7db-87e4-4f18-95db-d1391aa7f41d",
                    "3b998550-2778-4cb5-b37e-bbab8292675c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 32083,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "4792548e-bc3a-40bb-88eb-8e9f66e44eba",
                "785fc5c5-576e-4037-8cb9-cb7a1d9dc54f",
                "985628e1-8597-4b0c-9821-dd72918072f0",
                "34be4898-2b25-4bfe-9995-911455de32bd",
                "4d895f96-602e-4c7e-a648-c8059b6a779f",
                "42a8c9a0-3d84-4ccc-af5e-93190a592ecf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34553,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "33b0bd09-03e0-460b-a926-58e743f0058c",
              "title": "Collect Royalty and Claim Reward",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/group.test.ts",
              "file": "/test/integration/group.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Collect Royalty and Claim Reward\"",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward \"before all\" hook in \"Collect Royalty and Claim Reward\"",
                  "timedOut": false,
                  "duration": 11025,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Register IP id\nconst result1 = await mintAndRegisterIpAssetWithPilTermsHelper();\nipId = result1.ipId;\nlicenseTermsId = result1.licenseTermsIds[0];\n// Register group id\ngroupIpId = await registerGroupAndAttachLicenseHelper(licenseTermsId, [ipId]);",
                  "err": {},
                  "uuid": "efc5fb33-341a-4ba3-83e5-c2b7a7829729",
                  "parentUUID": "33b0bd09-03e0-460b-a926-58e743f0058c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully collect royalties",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully collect royalties",
                  "timedOut": false,
                  "duration": 20968,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mint and register child IP id\nconst childIpId = await mintAndRegisterIpAndMakeDerivativeHelper(groupIpId, licenseTermsId);\n// Pay royalties from child IP id to group IP id and transfer to vault\nawait payRoyaltyAndTransferToVaultHelper(childIpId, groupIpId, src_1.WIP_TOKEN_ADDRESS, 100n);\n// Collect royalties\nconst result = await client.groupClient.collectRoyalties({\n    groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.collectedRoyalties).to.equal(10n);",
                  "err": {},
                  "uuid": "57b05e25-f3a9-4ba5-81d0-a2be104db5bd",
                  "parentUUID": "33b0bd09-03e0-460b-a926-58e743f0058c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get claimable reward",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully get claimable reward",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.groupClient.getClaimableReward({\n    groupIpId: groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n});\n(0, chai_1.expect)(result).to.deep.equal([10n]);",
                  "err": {},
                  "uuid": "65f6ba32-6588-4c25-b7cf-9033f123a05d",
                  "parentUUID": "33b0bd09-03e0-460b-a926-58e743f0058c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully claim reward",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully claim reward",
                  "timedOut": false,
                  "duration": 10237,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mint license tokens to the IP id which doesn't have a royalty vault\nawait client.license.mintLicenseTokens({\n    licensorIpId: ipId,\n    licenseTermsId,\n    amount: 100,\n    maxMintingFee: 1,\n    maxRevenueShare: 100,\n});\n// Claim reward\nconst result = await client.groupClient.claimReward({\n    groupIpId: groupIpId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.claimedReward?.[0].amount[0]).to.equal(10n);",
                  "err": {},
                  "uuid": "7c31e6e5-c3b9-4e28-baff-081d9e2fa0c3",
                  "parentUUID": "33b0bd09-03e0-460b-a926-58e743f0058c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to claim reward for a non-existent group",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should fail when trying to claim reward for a non-existent group",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nonExistentGroupId = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.claimReward({\n    groupIpId: nonExistentGroupId,\n    currencyToken: src_1.WIP_TOKEN_ADDRESS,\n    memberIpIds: [ipId],\n})).to.be.rejectedWith(\"Failed to claim reward\");",
                  "err": {},
                  "uuid": "f1c80f47-4d55-482f-99c0-eb0cbb2177f9",
                  "parentUUID": "33b0bd09-03e0-460b-a926-58e743f0058c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail when trying to claim reward with invalid token address",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should fail when trying to claim reward with invalid token address",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidTokenAddress = viem_1.zeroAddress;\nawait (0, chai_1.expect)(client.groupClient.claimReward({\n    groupIpId: groupIpId,\n    currencyToken: invalidTokenAddress,\n    memberIpIds: [ipId],\n})).to.be.rejectedWith(\"Failed to claim reward\");",
                  "err": {},
                  "uuid": "8927a9f9-0528-462b-a431-5ea6739d0295",
                  "parentUUID": "33b0bd09-03e0-460b-a926-58e743f0058c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully collect royalties and claim reward in one transaction",
                  "fullTitle": "Group Functions Collect Royalty and Claim Reward should successfully collect royalties and claim reward in one transaction",
                  "timedOut": false,
                  "duration": 65919,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ipIds = [];\nconst result1 = await mintAndRegisterIpAssetWithPilTermsHelper();\nconst result2 = await mintAndRegisterIpAssetWithPilTermsHelper();\nipIds.push(result1.ipId);\nipIds.push(result2.ipId);\nlicenseTermsId = result1.licenseTermsIds[0];\nconst groupId = await registerGroupAndAttachLicenseHelper(licenseTermsId, ipIds);\nconst childIpId1 = await mintAndRegisterIpAndMakeDerivativeHelper(groupId, licenseTermsId);\nconst childIpId2 = await mintAndRegisterIpAndMakeDerivativeHelper(groupId, licenseTermsId);\nawait payRoyaltyAndTransferToVaultHelper(childIpId1, groupId, src_1.WIP_TOKEN_ADDRESS, 100n);\nawait payRoyaltyAndTransferToVaultHelper(childIpId2, groupId, src_1.WIP_TOKEN_ADDRESS, 100n);\nconst result = await client.groupClient.collectAndDistributeGroupRoyalties({\n    groupIpId: groupId,\n    currencyTokens: [src_1.WIP_TOKEN_ADDRESS],\n    memberIpIds: ipIds,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.collectedRoyalties?.[0].amount).to.equal(20n);\n(0, chai_1.expect)(result.royaltiesDistributed?.[0].amount).to.equal(10n);\n(0, chai_1.expect)(result.royaltiesDistributed?.[1].amount).to.equal(10n);",
                  "err": {},
                  "uuid": "4dbe71b2-308c-45d4-ab31-b00e167ba17d",
                  "parentUUID": "33b0bd09-03e0-460b-a926-58e743f0058c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57b05e25-f3a9-4ba5-81d0-a2be104db5bd",
                "65f6ba32-6588-4c25-b7cf-9033f123a05d",
                "7c31e6e5-c3b9-4e28-baff-081d9e2fa0c3",
                "f1c80f47-4d55-482f-99c0-eb0cbb2177f9",
                "8927a9f9-0528-462b-a431-5ea6739d0295",
                "4dbe71b2-308c-45d4-ab31-b00e167ba17d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97387,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "14bdc35f-07d4-476d-80de-f2e0b5640ec4",
          "title": "IPAccount Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
          "file": "/test/integration/ipAccount.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"IPAccount Functions\"",
              "fullTitle": "IPAccount Functions \"before all\" hook in \"IPAccount Functions\"",
              "timedOut": false,
              "duration": 9964,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = registerResult.ipId;\ndata = (0, viem_1.encodeFunctionData)({\n    abi: generated_1.accessControllerAbi,\n    functionName: \"setTransientPermission\",\n    args: [\n        (0, viem_1.getAddress)(ipId),\n        (0, viem_1.getAddress)(util_1.TEST_WALLET_ADDRESS),\n        (0, viem_1.getAddress)(coreMetadataModule),\n        (0, viem_1.toFunctionSelector)(\"function setAll(address,string,bytes32,bytes32)\"),\n        src_1.AccessPermission.ALLOW,\n    ],\n});",
              "err": {},
              "uuid": "6f431398-2e01-4d2c-90d6-c32156df8cb5",
              "parentUUID": "14bdc35f-07d4-476d-80de-f2e0b5640ec4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully set ip metadata",
              "fullTitle": "IPAccount Functions should successfully set ip metadata",
              "timedOut": false,
              "duration": 4991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const txHash = await client.ipAccount.setIpMetadata({\n    ipId: ipId,\n    metadataURI: \"https://example.com\",\n    metadataHash: (0, viem_1.toHex)(\"test\", { size: 32 }),\n});\n(0, chai_1.expect)(txHash).to.be.a(\"string\");",
              "err": {},
              "uuid": "1d68bff0-2753-4935-99ff-c4e7c2a474db",
              "parentUUID": "14bdc35f-07d4-476d-80de-f2e0b5640ec4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully transfer ERC20 tokens",
              "fullTitle": "IPAccount Functions should successfully transfer ERC20 tokens",
              "timedOut": false,
              "duration": 20474,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const erc20 = new generated_1.Erc20Client(util_1.publicClient, util_1.walletClient);\n// 1. Query token balance of ipId and wallet before\nconst initialErc20BalanceOfIpId = await erc20.balanceOf({\n    account: ipId,\n});\nconst initialErc20BalanceOfWallet = await erc20.balanceOf({\n    account: util_1.TEST_WALLET_ADDRESS,\n});\nconst initialWipBalanceOfIpId = await client.wipClient.balanceOf(ipId);\nconst initialWipBalanceOfWallet = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n// 2. transfer erc20 token to the ip account\nconst txHash = await erc20.mint({\n    to: ipId,\n    amount: (0, viem_1.parseEther)(\"0.002\"),\n});\nawait util_1.publicClient.waitForTransactionReceipt({\n    hash: txHash,\n});\n// 3. transfer wip to the ip account\nawait client.wipClient.deposit({\n    amount: 1n,\n});\nawait client.wipClient.transfer({\n    to: ipId,\n    amount: 1n,\n});\n// 4. transfer token of ip account to wallet address\nconst ret = await client.ipAccount.transferErc20({\n    ipId,\n    tokens: [\n        {\n            address: src_1.WIP_TOKEN_ADDRESS,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: 1n,\n        },\n        {\n            address: erc20.address,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: (0, viem_1.parseEther)(\"0.001\"),\n        },\n        {\n            address: erc20.address,\n            target: util_1.TEST_WALLET_ADDRESS,\n            amount: (0, viem_1.parseEther)(\"0.001\"),\n        },\n    ],\n});\n// 5. query token balance of ipId and wallet address after\nconst finalErc20BalanceOfIpId = await erc20.balanceOf({\n    account: ipId,\n});\nconst finalWipBalanceOfIpId = await client.wipClient.balanceOf(ipId);\nconst finalErc20BalanceOfWallet = await erc20.balanceOf({\n    account: util_1.TEST_WALLET_ADDRESS,\n});\nconst finalWipBalanceOfWallet = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(ret.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(finalErc20BalanceOfIpId).to.equal(initialErc20BalanceOfIpId);\n(0, chai_1.expect)(finalWipBalanceOfIpId).to.equal(initialWipBalanceOfIpId);\n(0, chai_1.expect)(finalErc20BalanceOfWallet).to.equal(initialErc20BalanceOfWallet + (0, viem_1.parseEther)(\"0.002\"));\n(0, chai_1.expect)(finalWipBalanceOfWallet).to.equal(initialWipBalanceOfWallet + 1n);",
              "err": {},
              "uuid": "e64a4bb0-634b-4486-9180-513099ebe579",
              "parentUUID": "14bdc35f-07d4-476d-80de-f2e0b5640ec4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9afed94b-64be-4bae-87c8-6a18f2c4b934",
              "title": "execute",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully execute a transaction",
                  "fullTitle": "IPAccount Functions execute should successfully execute a transaction",
                  "timedOut": false,
                  "duration": 4916,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.execute({\n    to: permissionAddress,\n    value: 0,\n    data: data,\n    ipId: ipId,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "ba766aad-8228-4769-8e24-990ab7420620",
                  "parentUUID": "9afed94b-64be-4bae-87c8-6a18f2c4b934",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions execute should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.execute({\n    to: permissionAddress,\n    value: 0,\n    data: data,\n    ipId: \"0x0000000000000000000000000000000000000000\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "2db78bc4-908d-41e0-b8b3-b6083e417274",
                  "parentUUID": "9afed94b-64be-4bae-87c8-6a18f2c4b934",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba766aad-8228-4769-8e24-990ab7420620",
                "2db78bc4-908d-41e0-b8b3-b6083e417274"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5015,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e8cf2641-8797-429f-aa99-f26c051c20f5",
              "title": "executeWithSig",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail with expired deadline",
                  "fullTitle": "IPAccount Functions executeWithSig should fail with expired deadline",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.executeWithSig({\n    to: permissionAddress,\n    data: data,\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    deadline: EXPIRED_DEADLINE,\n    signature: \"0x\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "90a4e384-1828-44cd-9388-a074259812d9",
                  "parentUUID": "e8cf2641-8797-429f-aa99-f26c051c20f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90a4e384-1828-44cd-9388-a074259812d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "db408254-e5db-4810-b57b-0130b1c66fad",
              "title": "getIpAccountNonce",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully return account nonce",
                  "fullTitle": "IPAccount Functions getIpAccountNonce should successfully return account nonce",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.getIpAccountNonce(ipId);\n(0, chai_1.expect)(response).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "e603dd1c-ef31-476d-bebb-feffd183572d",
                  "parentUUID": "db408254-e5db-4810-b57b-0130b1c66fad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions getIpAccountNonce should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.getIpAccountNonce(\"0x0000000000000000000000000000000000000000\"))\n    .to.be.rejected;",
                  "err": {},
                  "uuid": "cd0b730f-acd7-49e3-af48-e95ab19bc395",
                  "parentUUID": "db408254-e5db-4810-b57b-0130b1c66fad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e603dd1c-ef31-476d-bebb-feffd183572d",
                "cd0b730f-acd7-49e3-af48-e95ab19bc395"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5e6a38ea-2796-455a-b29e-06535f2b8671",
              "title": "getToken",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAccount.test.ts",
              "file": "/test/integration/ipAccount.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully return token information",
                  "fullTitle": "IPAccount Functions getToken should successfully return token information",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.ipAccount.getToken(ipId);\n(0, chai_1.expect)(response.chainId).to.be.a(\"bigint\");\n(0, chai_1.expect)(response.tokenContract).to.be.a(\"string\");\n(0, chai_1.expect)(response.tokenId).to.be.a(\"bigint\");\n(0, chai_1.expect)(response.tokenContract).to.equal(util_1.mockERC721);",
                  "err": {},
                  "uuid": "a73f31f8-dac9-4036-afbb-442850a845d7",
                  "parentUUID": "5e6a38ea-2796-455a-b29e-06535f2b8671",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid ipId",
                  "fullTitle": "IPAccount Functions getToken should fail with invalid ipId",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAccount.getToken(\"0x0000000000000000000000000000000000000000\")).to.be\n    .rejected;",
                  "err": {},
                  "uuid": "46ca97b4-6f4b-4258-9fc1-f1949b187012",
                  "parentUUID": "5e6a38ea-2796-455a-b29e-06535f2b8671",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a73f31f8-dac9-4036-afbb-442850a845d7",
                "46ca97b4-6f4b-4258-9fc1-f1949b187012"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 183,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "1d68bff0-2753-4935-99ff-c4e7c2a474db",
            "e64a4bb0-634b-4486-9180-513099ebe579"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25465,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8022d6e8-623a-4ab4-9af7-cf02acd72b3d",
          "title": "IP Asset Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
          "file": "/test/integration/ipAsset.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"IP Asset Functions\"",
              "fullTitle": "IP Asset Functions \"before all\" hook in \"IP Asset Functions\"",
              "timedOut": false,
              "duration": 90,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst res = await client.license.registerNonComSocialRemixingPIL();\nnoCommercialLicenseTermsId = res.licenseTermsId;",
              "err": {},
              "uuid": "02e07531-27c0-4874-a776-c41c2325ac37",
              "parentUUID": "8022d6e8-623a-4ab4-9af7-cf02acd72b3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
              "title": "Basic IP Asset Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register an IP Asset",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register an IP Asset",
                  "timedOut": false,
                  "duration": 10005,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nchildIpId = response.ipId;\n(0, chai_1.expect)(childIpId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "ea8a1b11-6842-419f-8832-4d274707a517",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register an IP Asset with multiple metadata fields",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register an IP Asset with multiple metadata fields",
                  "timedOut": false,
                  "duration": 10179,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    ipMetadata: {\n        ipMetadataURI: \"ipfs://test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataURI: \"ipfs://test-nft-uri\",\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\nchildIpId2 = response.ipId;\n(0, chai_1.expect)(response.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(response.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "3fd4618d-c5cc-42b3-aae5-d8e5a37a4604",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register with invalid metadata hash length",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should not register with invalid metadata hash length",
                  "timedOut": false,
                  "duration": 5226,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    ipMetadata: {\n        ipMetadataHash: \"0x123\", // Invalid length hash\n        nftMetadataHash: (0, viem_1.toHex)(\"valid-hash\", { size: 32 }),\n    },\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "96af8445-6148-49b9-b981-d7f52d534f3a",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register with non-existent token ID",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should not register with non-existent token ID",
                  "timedOut": false,
                  "duration": 279,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: BigInt(Number.MAX_SAFE_INTEGER),\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "f39b1513-83b9-46c8-a614-53d1040bdb0e",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with Non-Commercial Remix PIL",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with Non-Commercial Remix PIL",
                  "timedOut": false,
                  "duration": 20555,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nparentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: childIpId,\n    parentIpIds: [parentIpId],\n    licenseTermsIds: [noCommercialLicenseTermsId],\n    maxMintingFee: 0n,\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"0\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "4a44c871-2e51-4e36-a58f-7e1e8f47b0ba",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with Commercial Remix PIL",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with Commercial Remix PIL",
                  "timedOut": false,
                  "duration": 20940,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Register commercial remix PIL\nconst licenseResponse = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 10n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n// Register parent IP\nconst tokenId = await (0, util_1.getTokenId)();\nconst commercialParentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\n// Attach license terms to parent IP\nawait client.license.attachLicenseTerms({\n    ipId: commercialParentIpId,\n    licenseTermsId: licenseResponse.licenseTermsId,\n});\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: childIpId2,\n    parentIpIds: [commercialParentIpId],\n    licenseTermsIds: [licenseResponse.licenseTermsId],\n    maxMintingFee: 100n,\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "bd5c7052-8841-4c07-8216-9fd7b3f43f79",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with multiple parent IPs",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with multiple parent IPs",
                  "timedOut": false,
                  "duration": 46212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create first parent IP\nconst tokenId1 = await (0, util_1.getTokenId)();\nconst parentIpId1 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId1,\n})).ipId;\n// Create second parent IP\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst parentIpId2 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId2,\n})).ipId;\n// Attach license terms to both parents\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId1,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId2,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\n// Create child IP\nconst childTokenId = await (0, util_1.getTokenId)();\nconst newChildIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId,\n})).ipId;\n// Register derivative with multiple parents\nconst response = await client.ipAsset.registerDerivative({\n    childIpId: newChildIpId,\n    parentIpIds: [parentIpId1, parentIpId2],\n    licenseTermsIds: [noCommercialLicenseTermsId, noCommercialLicenseTermsId],\n    maxMintingFee: 0n,\n    maxRts: 5 * 10 ** 6,\n    maxRevenueShare: \"0\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "0deb8416-a71b-4b8b-870c-4bcd6d2014b7",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative with license tokens",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should register derivative with license tokens",
                  "timedOut": false,
                  "duration": 20351,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst ipId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;\nconst mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: noCommercialLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 1,\n});\nconst response = await client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "50f64fd1-4e60-4c33-a1df-3f2a38d220a4",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return true if IP asset is registered",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should return true if IP asset is registered",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isRegistered = await client.ipAsset.isRegistered(parentIpId);\n(0, chai_1.expect)(isRegistered).to.equal(true);",
                  "err": {},
                  "uuid": "768d1e09-13d4-4fb4-b431-69962775482d",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if IP asset is not registered",
                  "fullTitle": "IP Asset Functions Basic IP Asset Operations should return false if IP asset is not registered",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const isRegistered = await client.ipAsset.isRegistered(\"0x1234567890123456789012345678901234567890\");\n(0, chai_1.expect)(isRegistered).to.equal(false);",
                  "err": {},
                  "uuid": "128757bb-c6e5-44ee-aef4-03c1c614d467",
                  "parentUUID": "f4628dd0-5157-4abb-9cdc-36c2797aa09c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea8a1b11-6842-419f-8832-4d274707a517",
                "3fd4618d-c5cc-42b3-aae5-d8e5a37a4604",
                "96af8445-6148-49b9-b981-d7f52d534f3a",
                "f39b1513-83b9-46c8-a614-53d1040bdb0e",
                "4a44c871-2e51-4e36-a58f-7e1e8f47b0ba",
                "bd5c7052-8841-4c07-8216-9fd7b3f43f79",
                "0deb8416-a71b-4b8b-870c-4bcd6d2014b7",
                "50f64fd1-4e60-4c33-a1df-3f2a38d220a4",
                "768d1e09-13d4-4fb4-b431-69962775482d",
                "128757bb-c6e5-44ee-aef4-03c1c614d467"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 133927,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
              "title": "SPG NFT Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"SPG NFT Operations\"",
                  "fullTitle": "IP Asset Functions SPG NFT Operations \"before all\" hook in \"SPG NFT Operations\"",
                  "timedOut": false,
                  "duration": 12449,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup NFT collection\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\n// Setup license terms\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContract,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];\n// Setup ERC20\nconst mockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\nawait mockERC20.approve(generated_1.derivativeWorkflowsAddress[util_1.aeneid], viem_1.maxUint256);\nawait mockERC20.approve(generated_1.royaltyTokenDistributionWorkflowsAddress[util_1.aeneid], viem_1.maxUint256);\nawait mockERC20.mint(util_1.TEST_WALLET_ADDRESS, 100000n);",
                  "err": {},
                  "uuid": "150d2cf8-57ad-41c5-907a-2e6f372c5d27",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register IP Asset with metadata",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP Asset with metadata",
                  "timedOut": false,
                  "duration": 14242,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst response = await client.ipAsset.register({\n    nftContract,\n    tokenId,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(response.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "4a5d37ef-cbf7-4951-a011-136fc24ef17f",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative IP",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register derivative IP",
                  "timedOut": false,
                  "duration": 10759,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenChildId = await (0, util_1.mintBySpg)(nftContract);\nconst result = await client.ipAsset.registerDerivativeIp({\n    nftContract: nftContract,\n    tokenId: tokenChildId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: \"0\",\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "6145f7ce-7d93-4195-8757-68a42f46272a",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach PIL terms",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach PIL terms",
                  "timedOut": false,
                  "duration": 10991,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: nftContract,\n    tokenId,\n    deadline: 1000n,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 10000n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "43dad755-5b16-4e77-bc24-a82a191aa270",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach PIL terms with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach PIL terms with license terms max limit",
                  "timedOut": false,
                  "duration": 11776,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIpAndAttachPilTerms({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 10000n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                  "err": {},
                  "uuid": "ea1df663-133b-4344-8f86-7d00d2004907",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and make derivative",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and make derivative",
                  "timedOut": false,
                  "duration": 5796,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContract,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 1n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "b9a5d08d-8ba6-4ec1-939a-1114d839aa2a",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP",
                  "timedOut": false,
                  "duration": 5117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: nftContract,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    allowDuplicates: false,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "0813f939-7465-41f5-a9b0-b8e4a32b7be4",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register PIL terms and attach",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register PIL terms and attach",
                  "timedOut": false,
                  "duration": 5458,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.registerPilTermsAndAttach({\n    ipId: parentIpId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "921930e1-d88b-4db3-ae63-26a271376afd",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register PIL terms and attach with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register PIL terms and attach with license terms max limit",
                  "timedOut": false,
                  "duration": 6987,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.registerPilTermsAndAttach({\n    ipId: parentIpId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: viem_1.zeroAddress,\n                defaultMintingFee: 0n,\n                expiration: 0n,\n                commercialUse: false,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "edb36a4e-47cd-48d8-b8d4-12362cddc559",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 15523,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], mintLicenseTokensResult.licenseTokenIds[0]);\nconst result = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: nftContract,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "f57d7bfe-167b-48db-97c3-ad83a7eb0de8",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 24634,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], mintLicenseTokensResult.licenseTokenIds[0]);\nconst result = await client.ipAsset.registerIpAndMakeDerivativeWithLicenseTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    deadline: 1000n,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "ec49cc83-8d40-442c-9ac6-d41576d41810",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 16272,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 1,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "71b5c2cd-feff-486e-864a-e51274937a39",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens with license terms max limit",
                  "timedOut": false,
                  "duration": 18172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 1,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "63ba2175-6a21-4574-95dd-124e7971e62c",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register IP and attach license terms and distribute royalty tokens with complex royalty shares",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register IP and attach license terms and distribute royalty tokens with complex royalty shares",
                  "timedOut": false,
                  "duration": 16076,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: nftContract,\n    tokenId,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: generated_1.erc20Address[util_1.aeneid],\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 1n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 43,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 17,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 2,\n        },\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 38,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerIpAndAttachPilTermsAndDeployRoyaltyVaultTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");",
                  "err": {},
                  "uuid": "0239752e-5b20-401a-bfd5-1ca0b6040d17",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register derivative and attach license terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should register derivative and attach license terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 15903,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst result = await client.ipAsset.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: \"0\",\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "4a27cb9e-1221-4e93-b8de-ee989d54c49c",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and attach PIL terms and distribute royalty tokens without licensing config",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and attach PIL terms and distribute royalty tokens without licensing config",
                  "timedOut": false,
                  "duration": 5717,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: nftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "93c9d090-5844-4110-af57-e38abe88fc30",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint and register IP and attach PIL terms and distribute royalty tokens with license terms max limit",
                  "fullTitle": "IP Asset Functions SPG NFT Operations should mint and register IP and attach PIL terms and distribute royalty tokens with license terms max limit",
                  "timedOut": false,
                  "duration": 7254,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: nftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            maxLicenseTokens: 100,\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 11n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 0n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 0n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(1);",
                  "err": {},
                  "uuid": "3d6d78fd-81cd-4d75-8c31-e2a436af9fd9",
                  "parentUUID": "aa2b7a94-2630-4d2b-aea6-3999dc421436",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a5d37ef-cbf7-4951-a011-136fc24ef17f",
                "6145f7ce-7d93-4195-8757-68a42f46272a",
                "43dad755-5b16-4e77-bc24-a82a191aa270",
                "ea1df663-133b-4344-8f86-7d00d2004907",
                "b9a5d08d-8ba6-4ec1-939a-1114d839aa2a",
                "0813f939-7465-41f5-a9b0-b8e4a32b7be4",
                "921930e1-d88b-4db3-ae63-26a271376afd",
                "edb36a4e-47cd-48d8-b8d4-12362cddc559",
                "f57d7bfe-167b-48db-97c3-ad83a7eb0de8",
                "ec49cc83-8d40-442c-9ac6-d41576d41810",
                "71b5c2cd-feff-486e-864a-e51274937a39",
                "63ba2175-6a21-4574-95dd-124e7971e62c",
                "0239752e-5b20-401a-bfd5-1ca0b6040d17",
                "4a27cb9e-1221-4e93-b8de-ee989d54c49c",
                "93c9d090-5844-4110-af57-e38abe88fc30",
                "3d6d78fd-81cd-4d75-8c31-e2a436af9fd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 190677,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "d5f8ffbc-9a93-4edd-9a1f-a674d1514401",
              "title": "SPG With Minting Fees with Public Minting SPG NFT Contract",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"SPG With Minting Fees with Public Minting SPG NFT Contract\"",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract \"before all\" hook in \"SPG With Minting Fees with Public Minting SPG NFT Contract\"",
                  "timedOut": false,
                  "duration": 16156,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// ensure we start with no wip since we will be wrapping them\nconst wipBalance = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nif (wipBalance > 0n) {\n    await client.wipClient.withdraw({\n        amount: wipBalance,\n    });\n}\n// create a nft collection that requires minting fee\nconst rsp = await client.nftClient.createNFTCollection({\n    name: \"Premium Collection\",\n    symbol: \"PC\",\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"test-uri\",\n    mintFee: 100n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n});\nnftContractWithMintingFee = rsp.spgNftContract;\n// create parent ip with minting fee\nconst result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: nftContractWithMintingFee,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 150n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: true,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: BigInt(0),\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: BigInt(0),\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 150n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "dbb2f533-b6ee-4680-949e-8215de55ff61",
                  "parentUUID": "d5f8ffbc-9a93-4edd-9a1f-a674d1514401",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should auto wrap ip when mint and register derivative",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative",
                  "timedOut": false,
                  "duration": 6617,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalanceBefore = await client.getWalletBalance();\nconst rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: nftContractWithMintingFee, // pay 100 here\n    derivData: {\n        parentIpIds: [parentIpId], // pay 150 here\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst userBalanceAfter = await client.getWalletBalance();\nconst cost = 150n + 100n;\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - cost));\n// user should not have any WIP tokens since we swap the exact amount\nconst wipBalance = await client.ipAsset.wipClient.balanceOf({\n    owner: util_1.TEST_WALLET_ADDRESS,\n});\n(0, chai_1.expect)(wipBalance.result).to.be.equal(0n);",
                  "err": {},
                  "uuid": "279be1a5-acd9-42b9-914a-94afbd77cb23",
                  "parentUUID": "d5f8ffbc-9a93-4edd-9a1f-a674d1514401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when mint and register derivative with license tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative with license tokens",
                  "timedOut": false,
                  "duration": 29953,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { licenseTokenIds } = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenIds[0]);\n(0, chai_1.expect)(licenseTokenIds).to.be.an(\"array\");\nconst { txHash, ipId } = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: nftContractWithMintingFee,\n    licenseTokenIds: licenseTokenIds,\n    maxRts: common_1.MAX_ROYALTY_TOKEN,\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n});\n(0, chai_1.expect)(txHash).to.be.a(\"string\");\n(0, chai_1.expect)(ipId).to.be.a(\"string\");\nconst isRegistered = await client.ipAsset.isRegistered(ipId);\n(0, chai_1.expect)(isRegistered).to.equal(true);",
                  "err": {},
                  "uuid": "838891eb-204b-4878-bf0e-caa507566ddf",
                  "parentUUID": "d5f8ffbc-9a93-4edd-9a1f-a674d1514401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when registering derivative",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when registering derivative",
                  "timedOut": false,
                  "duration": 20056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst balanceBefore = await client.getWalletBalance();\nconst rsp = await client.ipAsset.registerDerivativeIp({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 150n));",
                  "err": {},
                  "uuid": "b992024f-68d9-4f84-a069-1af6d3912a1f",
                  "parentUUID": "d5f8ffbc-9a93-4edd-9a1f-a674d1514401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should spend existing wip when register derivative and distribute loyalty tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should spend existing wip when register derivative and distribute loyalty tokens",
                  "timedOut": false,
                  "duration": 21037,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nawait client.wipClient.deposit({\n    amount: 150n,\n});\nconst rsp = await client.ipAsset.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipRoyaltyVault).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.distributeRoyaltyTokensTxHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.be.equal(0n);",
                  "err": {},
                  "uuid": "0de1bd6b-5011-4b59-bd33-8c769ac861db",
                  "parentUUID": "d5f8ffbc-9a93-4edd-9a1f-a674d1514401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto wrap ip when mint and register derivative and distribute loyalty tokens",
                  "fullTitle": "IP Asset Functions SPG With Minting Fees with Public Minting SPG NFT Contract should auto wrap ip when mint and register derivative and distribute loyalty tokens",
                  "timedOut": false,
                  "duration": 6322,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens({\n    spgNftContract: nftContractWithMintingFee,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    ipMetadata: {\n        ipMetadataURI: \"test\",\n        ipMetadataHash: viem_1.zeroHash,\n        nftMetadataURI: \"test\",\n        nftMetadataHash: viem_1.zeroHash,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "8242de56-97c5-4518-b3d7-9db6797ce72d",
                  "parentUUID": "d5f8ffbc-9a93-4edd-9a1f-a674d1514401",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "279be1a5-acd9-42b9-914a-94afbd77cb23",
                "838891eb-204b-4878-bf0e-caa507566ddf",
                "b992024f-68d9-4f84-a069-1af6d3912a1f",
                "0de1bd6b-5011-4b59-bd33-8c769ac861db",
                "8242de56-97c5-4518-b3d7-9db6797ce72d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83985,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0791152a-33e6-4660-9be2-4d2167e65ea0",
              "title": "IP Asset Registration with Private Minting SPG NFT Contracts",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"IP Asset Registration with Private Minting SPG NFT Contracts\"",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts \"before all\" hook in \"IP Asset Registration with Private Minting SPG NFT Contracts\"",
                  "timedOut": false,
                  "duration": 4905,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const privateMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Private Minting Collection\",\n    symbol: \"PMC\",\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 3n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPrivateMinting = privateMintingCollectionResult.spgNftContract;",
                  "err": {},
                  "uuid": "e0d214e0-5d0f-4fc6-864a-2d500932e52f",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully when call mint and register ip asset with pil terms",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip asset with pil terms",
                  "timedOut": false,
                  "duration": 15915,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"undefined\");\nparentIpId = result.ipId;\nlicenseTermsId = result.licenseTermsIds[0];",
                  "err": {},
                  "uuid": "79626481-c2db-479f-bf07-cb54e6ab33e7",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip asset with pil terms with license terms max limit",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip asset with pil terms with license terms max limit",
                  "timedOut": false,
                  "duration": 21212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: false,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 5n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n            maxLicenseTokens: 100,\n        },\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 5n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n    ipMetadata: {\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.maxLicenseTokensTxHashes?.length).to.be.equal(2);",
                  "err": {},
                  "uuid": "e12f0de8-2353-4e55-953a-7cc56b005932",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and make derivative",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and make derivative",
                  "timedOut": false,
                  "duration": 11109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    derivData: {\n        parentIpIds: [parentIpId],\n        licenseTermsIds: [licenseTermsId],\n        maxMintingFee: 100n,\n        maxRts: 5 * 10 ** 6,\n        maxRevenueShare: 100,\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "9ee07f4c-c17c-435b-8b32-d808fe01c486",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip",
                  "timedOut": false,
                  "duration": 10374,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n    allowDuplicates: false,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "454e05f4-61c2-4e0b-af1e-7065709e2a51",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and make derivative with license tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and make derivative with license tokens",
                  "timedOut": false,
                  "duration": 20965,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 100,\n});\nconst licenseTokenId = mintLicenseTokensResult.licenseTokenIds[0];\nawait (0, util_1.approveForLicenseToken)(generated_1.derivativeWorkflowsAddress[util_1.aeneid], licenseTokenId);\nconst result = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeWithLicenseTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    licenseTokenIds: [licenseTokenId],\n    maxRts: 5 * 10 ** 6,\n    ipMetadata: {\n        ipMetadataURI: \"test-uri\",\n        ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n        nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n    },\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "53ce2506-894d-463c-b1cf-a4d637759414",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully when call mint and register ip and attach pil terms and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should successfully when call mint and register ip and attach pil terms and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 11081,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 10000n,\n                expiration: 1000n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"test case\",\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 10,\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.ipId).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTermsIds).to.be.an(\"array\");\n(0, chai_1.expect)(result.tokenId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "09a1fbea-0c69-4dcf-9e70-8400a6432c71",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should succeed when call mint and register ip and make derivative and distribute royalty tokens",
                  "fullTitle": "IP Asset Functions IP Asset Registration with Private Minting SPG NFT Contracts should succeed when call mint and register ip and make derivative and distribute royalty tokens",
                  "timedOut": false,
                  "duration": 22107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    allowDuplicates: true,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 6n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 90,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: true,\n                mintingFee: 6n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: pool,\n            },\n        },\n    ],\n});\nconst newParentIpId = result.ipId;\nconst licenseId = result.licenseTermsIds[0];\nconst rsp = await client.ipAsset.mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens({\n    spgNftContract: spgNftContractWithPrivateMinting,\n    derivData: {\n        parentIpIds: [newParentIpId],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 100,\n        },\n    ],\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(rsp.ipId).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "95891005-fe32-469f-87fd-813344aa4df8",
                  "parentUUID": "0791152a-33e6-4660-9be2-4d2167e65ea0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79626481-c2db-479f-bf07-cb54e6ab33e7",
                "e12f0de8-2353-4e55-953a-7cc56b005932",
                "9ee07f4c-c17c-435b-8b32-d808fe01c486",
                "454e05f4-61c2-4e0b-af1e-7065709e2a51",
                "53ce2506-894d-463c-b1cf-a4d637759414",
                "09a1fbea-0c69-4dcf-9e70-8400a6432c71",
                "95891005-fe32-469f-87fd-813344aa4df8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 112763,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "7ef4b099-811d-416e-b926-0b11bd0e0657",
              "title": "Batch Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Batch Operations\"",
                  "fullTitle": "IP Asset Functions Batch Operations \"before all\" hook in \"Batch Operations\"",
                  "timedOut": false,
                  "duration": 14856,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;\nconst tokenId = await (0, util_1.getTokenId)();\nparentIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n})).ipId;",
                  "err": {},
                  "uuid": "4e2d361b-c9ff-4b11-abf3-9e8f2ce2a672",
                  "parentUUID": "7ef4b099-811d-416e-b926-0b11bd0e0657",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should batch register derivative",
                  "fullTitle": "IP Asset Functions Batch Operations should batch register derivative",
                  "timedOut": false,
                  "duration": 35402,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const childTokenId = await (0, util_1.getTokenId)();\nconst childIpId = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId,\n})).ipId;\nconst childTokenId2 = await (0, util_1.getTokenId)();\nconst childIpId2 = (await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: childTokenId2,\n})).ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});\nconst result = await client.ipAsset.batchRegisterDerivative({\n    args: [\n        {\n            childIpId: childIpId,\n            parentIpIds: [parentIpId],\n            licenseTermsIds: [noCommercialLicenseTermsId],\n            maxMintingFee: 0n,\n            maxRts: 5 * 10 ** 6,\n            maxRevenueShare: \"0\",\n        },\n        {\n            childIpId: childIpId2,\n            parentIpIds: [parentIpId],\n            licenseTermsIds: [noCommercialLicenseTermsId],\n            maxMintingFee: 0n,\n            maxRts: 5 * 10 ** 6,\n            maxRevenueShare: \"0\",\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d841e826-c7cc-48aa-865e-01b5d5c206cd",
                  "parentUUID": "7ef4b099-811d-416e-b926-0b11bd0e0657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch mint and register IP asset with PIL terms",
                  "fullTitle": "IP Asset Functions Batch Operations should batch mint and register IP asset with PIL terms",
                  "timedOut": false,
                  "duration": 12484,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.batchMintAndRegisterIpAssetWithPilTerms({\n    args: [\n        {\n            spgNftContract: nftContract,\n            licenseTermsData: [\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 8n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 8n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                    maxLicenseTokens: 100,\n                },\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 80n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 100n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                },\n            ],\n        },\n        {\n            spgNftContract: nftContract,\n            licenseTermsData: [\n                {\n                    terms: {\n                        transferable: true,\n                        royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                        defaultMintingFee: 8n,\n                        expiration: 0n,\n                        commercialUse: true,\n                        commercialAttribution: false,\n                        commercializerChecker: viem_1.zeroAddress,\n                        commercializerCheckerData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        commercialRevCeiling: 0n,\n                        derivativesAllowed: true,\n                        derivativesAttribution: true,\n                        derivativesApproval: false,\n                        derivativesReciprocal: true,\n                        derivativeRevCeiling: 0n,\n                        currency: common_1.WIP_TOKEN_ADDRESS,\n                        uri: \"\",\n                    },\n                    licensingConfig: {\n                        isSet: true,\n                        mintingFee: 8n,\n                        licensingHook: viem_1.zeroAddress,\n                        hookData: viem_1.zeroAddress,\n                        commercialRevShare: 0,\n                        disabled: false,\n                        expectMinimumGroupRewardShare: 0,\n                        expectGroupRewardPool: viem_1.zeroAddress,\n                    },\n                    maxLicenseTokens: 100,\n                },\n            ],\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.results).to.be.an(\"array\");\n(0, chai_1.expect)(result.results[0].licenseTermsIds).to.be.an(\"array\").and.length(2);\n(0, chai_1.expect)(result.results[0].maxLicenseTokensTxHashes).to.be.an(\"array\").and.length(1);\n(0, chai_1.expect)(result.results[1].licenseTermsIds).to.be.an(\"array\").and.length(1);\n(0, chai_1.expect)(result.results[1].maxLicenseTokensTxHashes).to.be.an(\"array\").and.length(1);",
                  "err": {},
                  "uuid": "4203c681-6074-4b2e-9a17-001a92a03fd4",
                  "parentUUID": "7ef4b099-811d-416e-b926-0b11bd0e0657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch mint and register IP asset and make derivative",
                  "fullTitle": "IP Asset Functions Batch Operations should batch mint and register IP asset and make derivative",
                  "timedOut": false,
                  "duration": 6115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract: nftContract,\n            derivData: {\n                parentIpIds: [parentIpId],\n                licenseTermsIds: [noCommercialLicenseTermsId],\n                maxMintingFee: 0n,\n                maxRts: 5 * 10 ** 6,\n                maxRevenueShare: \"0\",\n            },\n        },\n        {\n            spgNftContract: nftContract,\n            derivData: {\n                parentIpIds: [parentIpId],\n                licenseTermsIds: [noCommercialLicenseTermsId],\n                maxMintingFee: 0n,\n                maxRts: 5 * 10 ** 6,\n                maxRevenueShare: \"0\",\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.results).to.be.an(\"array\");",
                  "err": {},
                  "uuid": "4ba76cf7-1370-4012-ab43-5daa216b9050",
                  "parentUUID": "7ef4b099-811d-416e-b926-0b11bd0e0657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should batch register giving parameters",
                  "fullTitle": "IP Asset Functions Batch Operations should batch register giving parameters",
                  "timedOut": false,
                  "duration": 26159,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst spgTokenId1 = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst spgTokenId2 = await (0, util_1.mintBySpg)(nftContract, \"test-metadata\");\nconst result = await client.ipAsset.batchRegister({\n    args: [\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId,\n        },\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId2,\n        },\n        {\n            nftContract,\n            tokenId: spgTokenId1,\n            ipMetadata: {\n                ipMetadataURI: \"test-uri2\",\n                ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash2\", { size: 32 }),\n                nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash2\", { size: 32 }),\n            },\n        },\n        {\n            nftContract,\n            tokenId: spgTokenId2,\n            ipMetadata: {\n                ipMetadataURI: \"test-uri\",\n                ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n                nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n            },\n        },\n    ],\n});\n(0, chai_1.expect)(result.results).to.be.an(\"array\");\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "4335ccd5-d293-40ba-b92b-590e38420e7c",
                  "parentUUID": "7ef4b099-811d-416e-b926-0b11bd0e0657",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d841e826-c7cc-48aa-865e-01b5d5c206cd",
                "4203c681-6074-4b2e-9a17-001a92a03fd4",
                "4ba76cf7-1370-4012-ab43-5daa216b9050",
                "4335ccd5-d293-40ba-b92b-590e38420e7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80160,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "09eba2bb-322d-4c90-8dd3-0c87b16861ce",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Error Cases\"",
                  "fullTitle": "IP Asset Functions Error Cases \"before all\" hook in \"Error Cases\"",
                  "timedOut": false,
                  "duration": 8992,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nnftContract = txData.spgNftContract;",
                  "err": {},
                  "uuid": "e4ed5559-bdd7-458a-87c2-f75cd4a29db0",
                  "parentUUID": "09eba2bb-322d-4c90-8dd3-0c87b16861ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail to register unowned NFT",
                  "fullTitle": "IP Asset Functions Error Cases should fail to register unowned NFT",
                  "timedOut": false,
                  "duration": 267,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.ipAsset.register({\n    nftContract: nftContract,\n    tokenId: 999999n, // Non-existent token\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "68fc5255-565c-4943-9a88-4751f195799f",
                  "parentUUID": "09eba2bb-322d-4c90-8dd3-0c87b16861ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68fc5255-565c-4943-9a88-4751f195799f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 267,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "dfd2a7af-f626-434e-89db-e5120630db87",
              "title": "Other Edge Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Other Edge Cases\"",
                  "fullTitle": "IP Asset Functions Other Edge Cases \"before all\" hook in \"Other Edge Cases\"",
                  "timedOut": false,
                  "duration": 15179,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst parentIpResponse = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nparentIpId = parentIpResponse.ipId;\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId,\n    licenseTermsId: noCommercialLicenseTermsId,\n});",
                  "err": {},
                  "uuid": "36b0fa0c-6d21-46a6-a594-2524def14903",
                  "parentUUID": "dfd2a7af-f626-434e-89db-e5120630db87",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "bf218a6a-94d2-47f3-a5e1-de22a9242f26",
                  "title": "License Token Edge Cases",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fail when trying to use non-existent license token",
                      "fullTitle": "IP Asset Functions Other Edge Cases License Token Edge Cases should fail when trying to use non-existent license token",
                      "timedOut": false,
                      "duration": 10251,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId,\n    })).ipId,\n    licenseTokenIds: [BigInt(999999)], // Non-existent token\n    maxRts: 5 * 10 ** 6,\n})).to.be.rejected;",
                      "err": {},
                      "uuid": "45620b8f-1c26-4c7b-9b04-9e7b218001b1",
                      "parentUUID": "bf218a6a-94d2-47f3-a5e1-de22a9242f26",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail when trying to use same license token twice",
                      "fullTitle": "IP Asset Functions Other Edge Cases License Token Edge Cases should fail when trying to use same license token twice",
                      "timedOut": false,
                      "duration": 34669,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintLicenseTokensResult = await client.license.mintLicenseTokens({\n    licenseTermsId: noCommercialLicenseTermsId,\n    licensorIpId: parentIpId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 1,\n});\nconst tokenId1 = await (0, util_1.getTokenId)();\nawait client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n    })).ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n});\nconst tokenId2 = await (0, util_1.getTokenId)();\nawait (0, chai_1.expect)(client.ipAsset.registerDerivativeWithLicenseTokens({\n    childIpId: (await client.ipAsset.register({\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n    })).ipId,\n    licenseTokenIds: [mintLicenseTokensResult.licenseTokenIds[0]],\n    maxRts: 5 * 10 ** 6,\n})).to.be.rejected; // Should fail as token already used",
                      "err": {},
                      "uuid": "877fbd8d-b799-4681-83c0-55d2709616e6",
                      "parentUUID": "bf218a6a-94d2-47f3-a5e1-de22a9242f26",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "45620b8f-1c26-4c7b-9b04-9e7b218001b1",
                    "877fbd8d-b799-4681-83c0-55d2709616e6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 44920,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "576250da-ef72-4442-aa74-a32bf25fc8ac",
                  "title": "Batch Operation Edge Cases",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
                  "file": "/test/integration/ipAsset.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle partial failures in batch registration",
                      "fullTitle": "IP Asset Functions Other Edge Cases Batch Operation Edge Cases should handle partial failures in batch registration",
                      "timedOut": false,
                      "duration": 15140,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nawait client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId1,\n});\nawait (0, chai_1.expect)(client.ipAsset.batchRegister({\n    args: [\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId1, // Already registered\n        },\n        {\n            nftContract: util_1.mockERC721,\n            tokenId: tokenId2, // New registration\n        },\n    ],\n})).to.be.rejected;",
                      "err": {},
                      "uuid": "3adb4cfe-fbd6-48a6-90a9-09297f08c9fe",
                      "parentUUID": "576250da-ef72-4442-aa74-a32bf25fc8ac",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3adb4cfe-fbd6-48a6-90a9-09297f08c9fe"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 15140,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "8ab69105-5dc9-4b6a-96ea-d2302ee1513e",
              "title": "Batch Register IP Assets With Optimized Workflows",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/ipAsset.test.ts",
              "file": "/test/integration/ipAsset.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Batch Register IP Assets With Optimized Workflows\"",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows \"before all\" hook in \"Batch Register IP Assets With Optimized Workflows\"",
                  "timedOut": false,
                  "duration": 41095,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a public minting NFT collection\nconst publicMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Public Minting Collection\",\n    symbol: \"PMC\",\n    isPublicMinting: true,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintFee: 10n,\n    mintFeeToken: common_1.WIP_TOKEN_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPublicMinting = publicMintingCollectionResult.spgNftContract;\n// Create a private minting NFT collection\nconst privateMintingCollectionResult = await client.nftClient.createNFTCollection({\n    name: \"Private Minting Collection\",\n    symbol: \"PRC\",\n    isPublicMinting: false,\n    mintOpen: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    contractURI: \"\",\n});\nspgNftContractWithPrivateMinting = privateMintingCollectionResult.spgNftContract;\n// Register a commercial remix PIL license\nconst commercialRemixPILResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 10n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\nlicenseTermsId1 = commercialRemixPILResult.licenseTermsId;\n// Register a commercial use PIL license\nconst commercialUsePILResult = await client.license.registerPILTerms({\n    transferable: true,\n    royaltyPolicy: \"0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E\",\n    defaultMintingFee: 5n,\n    expiration: 0n,\n    commercialUse: true,\n    commercialAttribution: true,\n    commercializerChecker: viem_1.zeroAddress,\n    commercializerCheckerData: viem_1.zeroAddress,\n    commercialRevShare: 10,\n    commercialRevCeiling: 0n,\n    derivativesAllowed: true,\n    derivativesAttribution: true,\n    derivativesApproval: false,\n    derivativesReciprocal: true,\n    derivativeRevCeiling: 0n,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    uri: \"https://github.com/piplabs/pil-document/blob/ad67bb632a310d2557f8abcccd428e4c9c798db1/off-chain-terms/CommercialRemix.json\",\n});\nlicenseTermsId2 = commercialUsePILResult.licenseTermsId;\n// Mint and register IP with public minting contract\nconst publicMintingIpResult = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPublicMinting,\n});\nparentIpId1 = publicMintingIpResult.ipId;\n// Attach license terms to the first IP\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId1,\n    licenseTermsId: licenseTermsId1,\n});\n// Mint and register IP with private minting contract\nconst privateMintingIpResult = await client.ipAsset.mintAndRegisterIp({\n    spgNftContract: spgNftContractWithPrivateMinting,\n});\nparentIpId2 = privateMintingIpResult.ipId;\n// Attach license terms to the second IP\nawait client.license.attachLicenseTerms({\n    ipId: parentIpId2,\n    licenseTermsId: licenseTermsId2,\n});",
                  "err": {},
                  "uuid": "0dac3ece-4ef9-44bf-b3f0-31352ff76a34",
                  "parentUUID": "8ab69105-5dc9-4b6a-96ea-d2302ee1513e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully batch register multiple IP assets with SPG NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully batch register multiple IP assets with SPG NFT contracts",
                  "timedOut": false,
                  "duration": 43392,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall due to the private minting\n     * - `maxLicenseTokens` is set to 1000n for first license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 1000n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 3n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 3n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     * - `maxLicenseTokens` is set to 100n for license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 100n,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 20(10+10) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5(0+5) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the mint tokens is given `msg.sender` as the recipient\n     * - `maxLicenseTokens` is set to 80n and 10n for license terms\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                maxLicenseTokens: 80n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 100n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndAttachPILTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the mint tokens is given `msg.sender` as the recipient\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n            },\n        ],\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n];\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst totalFees = 10 + 15 + 0 + 10 + 20 + 5 + 10 + 0;\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n *\n * 1. derivativeWorkflowsClient: 1 transaction\n *    - No license terms attached\n *\n * 2. multicall3Client: 3 transactions\n *    - Second transaction includes license terms with maxLicenseTokens: 1000n\n *\n * 3. licenseAttachmentWorkflowsClient: 1 transaction\n *    - Two license terms attached\n *    - First license terms: maxLicenseTokens: 1000n\n *\n * 4. royaltyTokenDistributionWorkflowsClient: 3 transactions\n *    - Second transaction includes two license terms:\n *    -  First license terms: maxLicenseTokens: 80n\n *    - Second license terms: maxLicenseTokens: 10n\n *   - Third transaction includes a license terms\n *\n * Summary:\n * - Total transactions: 4 (4 unique transaction hashes)\n * - Total IP assets registered: 8\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(4);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes?.length).equal(2);",
                  "err": {},
                  "uuid": "b172c1a2-8e8c-43c2-9f5a-466660f1bc03",
                  "parentUUID": "8ab69105-5dc9-4b6a-96ea-d2302ee1513e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully batch register multiple IP assets with NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully batch register multiple IP assets with NFT contracts",
                  "timedOut": false,
                  "duration": 80435,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst tokenId3 = await (0, util_1.getTokenId)();\nconst tokenId4 = await (0, util_1.getTokenId)();\nconst tokenId5 = await (0, util_1.getTokenId)();\nconst tokenId6 = await (0, util_1.getTokenId)();\nconst tokenId7 = await (0, util_1.getTokenId)();\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst requests = [\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerIpAndAttachPilTerms  workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall\n     * - `maxLicenseTokens` is set to 100n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId3,\n        deadline: 1000n,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: viem_1.zeroAddress,\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: false,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 10000n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 100n,\n            },\n        ],\n    },\n    /**\n     * registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     * - `maxLicenseTokens` is set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId4,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 1n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 6n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n        ],\n        ipMetadata: {\n            ipMetadataURI: \"test-uri\",\n            ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n            nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 43,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 17,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 2,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 38,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId5,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId6,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId7,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n];\nconst totalFees = 10 + 5 + 0 + 0 + 5 + 10 + 5;\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. royaltyTokenDistributionWorkflowsClient: 4 args\n *  - The third request has two license terms, first one has `maxLicenseTokens` set to 10n\n *\n * 2.licenseAttachmentWorkflowsClient: 1 arg\n *  - The first request have two license terms, second one has `maxLicenseTokens` set to 100n\n *\n * 3.derivativeWorkflowsClient: 2 args\n *  - None license terms and no `maxLicenseTokens` set\n *\n * Summary:\n * - Total transactions: 3 (3 unique transaction hashes)\n * - Total IP assets registered: 7\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(3);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).greaterThan(0);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(4);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[2].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[2].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].licenseTermsIds?.length).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);",
                  "err": {},
                  "uuid": "8b858fc0-2cba-44c1-bc27-64532716dc0f",
                  "parentUUID": "8ab69105-5dc9-4b6a-96ea-d2302ee1513e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register IP assets using a combination of NFT contracts and SPG NFT contracts",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully register IP assets using a combination of NFT contracts and SPG NFT contracts",
                  "timedOut": false,
                  "duration": 66474,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst tokenId3 = await (0, util_1.getTokenId)();\nconst tokenId4 = await (0, util_1.getTokenId)();\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5(0+5) WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivativeAndDistributeRoyaltyTokens workflow\n     * - Total fees: 20(10+10) WIP tokens\n     * - Uses `multicall3Client` multicall3 due to the public minting\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall due to the private minting\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 10,\n            },\n        ],\n    },\n    /**\n     * registerIPAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient` multicall\n     * - Need to distribute royalty tokens\n     * - `maxLicenseTokens` is set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: generated_1.erc20Address[util_1.aeneid],\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 1n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n        ipMetadata: {\n            ipMetadataURI: \"test-uri\",\n            ipMetadataHash: (0, viem_1.toHex)(\"test-metadata-hash\", { size: 32 }),\n            nftMetadataHash: (0, viem_1.toHex)(\"test-nft-metadata-hash\", { size: 32 }),\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 43,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 17,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 2,\n            },\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 38,\n            },\n        ],\n    },\n    /**\n     * registerIpAndAttachPilTerms  workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` multicall\n     * - the second request has `maxLicenseTokens` set to 10n\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId3,\n        deadline: 1000n,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: viem_1.zeroAddress,\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: false,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 10000n,\n                    expiration: 1000n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"test case\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 10000n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: viem_1.zeroAddress,\n                },\n                maxLicenseTokens: 10n,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIp workflow\n     * - Total fees: 10 WIP tokens\n     * - Uses `derivativeWorkflowsClient` multicall\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId4,\n        derivData: {\n            parentIpIds: [parentIpId1],\n            licenseTermsIds: [licenseTermsId1],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n];\nconst totalFees = 15 + 5 + 20 + 10 + 5 + 0 + 0 + 10;\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. multicall3Client: 2 args\n *  - No license terms and no `maxLicenseTokens` set\n *\n * 2. royaltyTokenDistributionWorkflowsClient: 3 args\n *  - The third request has a license terms and `maxLicenseTokens` set to 10n\n *\n * 3. derivativeWorkflowsClient: 2 args\n *  - None license terms and no `maxLicenseTokens` set\n *\n * 4. licenseAttachmentWorkflowsClient: 1 arg\n *  - The first request have two license terms, second one has `maxLicenseTokens` set to 10n\n *\n * Summary:\n * - Total transactions: 4 (4 unique transaction hashes)\n * - Total IP assets registered: 8\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(4);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).greaterThan(0);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[1].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(3);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[2].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[2].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[1].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);",
                  "err": {},
                  "uuid": "d132908e-b144-4320-ab25-37ef464a7c87",
                  "parentUUID": "8ab69105-5dc9-4b6a-96ea-d2302ee1513e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully register IP assets with multicall disabled",
                  "fullTitle": "IP Asset Functions Batch Register IP Assets With Optimized Workflows should successfully register IP assets with multicall disabled",
                  "timedOut": false,
                  "duration": 51669,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenId1 = await (0, util_1.getTokenId)();\nconst tokenId2 = await (0, util_1.getTokenId)();\nconst requests = [\n    /**\n     * mintAndRegisterIpAndMakeDerivative workflow\n     * - Total fees: 15(10+5) WIP tokens\n     * - Uses `derivativeWorkflowsClient` to call the this method\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 0 WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` to call the this method\n     */\n    {\n        spgNftContract: spgNftContractWithPrivateMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * mintAndRegisterIpAssetWithPilTerms workflow\n     * - Total fees: 10(10+0) WIP tokens\n     * - Uses `licenseAttachmentWorkflowsClient` to call the this method\n     * - the first request has `maxLicenseTokens` set to 10n\n     */\n    {\n        spgNftContract: spgNftContractWithPublicMinting,\n        allowDuplicates: true,\n        licenseTermsData: [\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n                maxLicenseTokens: 10n,\n            },\n            {\n                terms: {\n                    transferable: true,\n                    royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                    defaultMintingFee: 0n,\n                    expiration: 0n,\n                    commercialUse: true,\n                    commercialAttribution: false,\n                    commercializerChecker: viem_1.zeroAddress,\n                    commercializerCheckerData: viem_1.zeroAddress,\n                    commercialRevShare: 90,\n                    commercialRevCeiling: 0n,\n                    derivativesAllowed: true,\n                    derivativesAttribution: true,\n                    derivativesApproval: false,\n                    derivativesReciprocal: true,\n                    derivativeRevCeiling: 0n,\n                    currency: common_1.WIP_TOKEN_ADDRESS,\n                    uri: \"\",\n                },\n                licensingConfig: {\n                    isSet: true,\n                    mintingFee: 0n,\n                    licensingHook: viem_1.zeroAddress,\n                    hookData: viem_1.zeroAddress,\n                    commercialRevShare: 0,\n                    disabled: false,\n                    expectMinimumGroupRewardShare: 0,\n                    expectGroupRewardPool: pool,\n                },\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient`to call the this method\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId1,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n    /**\n     * registerDerivativeIpAndAttachLicenseTermsAndDistributeRoyaltyTokens workflow\n     * - Total fees: 5 WIP tokens\n     * - Uses `royaltyTokenDistributionWorkflowsClient`to call the this method\n     * - Need to distribute royalty tokens\n     */\n    {\n        nftContract: util_1.mockERC721,\n        tokenId: tokenId2,\n        derivData: {\n            parentIpIds: [parentIpId2],\n            licenseTermsIds: [licenseTermsId2],\n            maxMintingFee: 0,\n            maxRts: common_1.MAX_ROYALTY_TOKEN,\n            maxRevenueShare: 100,\n        },\n        royaltyShares: [\n            {\n                recipient: util_1.TEST_WALLET_ADDRESS,\n                percentage: 100,\n            },\n        ],\n    },\n];\nconst userBalanceBefore = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst totalFees = 15 + 0 + 10 + 5 + 5;\nconst result = await client.ipAsset.batchRegisterIpAssetsWithOptimizedWorkflows({\n    requests: requests,\n    options: {\n        wipOptions: {\n            useMulticallWhenPossible: false,\n        },\n    },\n});\nconst userBalanceAfter = await client.getBalance(util_1.TEST_WALLET_ADDRESS);\nconst wipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(Number(userBalanceAfter)).lessThan(Number(userBalanceBefore - BigInt(totalFees)));\n(0, chai_1.expect)(wipBalanceAfter).equal(wipBalanceBefore);\n/**\n * Transaction breakdown:\n * 1. None license terms and no `maxLicenseTokens` set\n * 2. The request have one license terms and no `maxLicenseTokens` set\n * 3. The request have two license terms, first one has `maxLicenseTokens` set to 10n\n * 4. The requests have no license terms and no `maxLicenseTokens` set\n * 5. The requests have no license terms and no `maxLicenseTokens` set\n * Summary:\n * - Total transactions: 5 (5 unique transaction hashes)\n * - Total IP assets registered: 5\n */\n(0, chai_1.expect)(result.registrationResults.length).equal(requests.length);\n(0, chai_1.expect)(result.registrationResults.reduce((a, b) => a + b.ipAssetsWithLicenseTerms.length, 0)).equal(requests.length);\n(0, chai_1.expect)(result.distributeRoyaltyTokensTxHashes?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[0].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[1].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].licenseTermsIds?.length).equal(2);\n(0, chai_1.expect)(result.registrationResults[2].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes?.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[3].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms.length).equal(1);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms[0].licenseTermsIds).equal(undefined);\n(0, chai_1.expect)(result.registrationResults[4].ipAssetsWithLicenseTerms[0].maxLicenseTokensTxHashes).equal(undefined);",
                  "err": {},
                  "uuid": "4c1f7172-3916-455a-8f4d-a7c979f445b8",
                  "parentUUID": "8ab69105-5dc9-4b6a-96ea-d2302ee1513e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b172c1a2-8e8c-43c2-9f5a-466660f1bc03",
                "8b858fc0-2cba-44c1-bc27-64532716dc0f",
                "d132908e-b144-4320-ab25-37ef464a7c87",
                "4c1f7172-3916-455a-8f4d-a7c979f445b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 241970,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "251767b3-7794-42ef-8cfa-32d784aaeee8",
          "title": "License Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
          "file": "/test/integration/license.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"License Functions\"",
              "fullTitle": "License Functions \"before all\" hook in \"License Functions\"",
              "timedOut": false,
              "duration": 132,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nclientB = derivedClient.clientB;",
              "err": {},
              "uuid": "641cc4cf-007b-4c13-9152-2edac9f5b378",
              "parentUUID": "251767b3-7794-42ef-8cfa-32d784aaeee8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "511f8614-558e-4a3c-b1d4-c6e34498b995",
              "title": "register license with different types",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register license ",
                  "fullTitle": "License Functions register license with different types should register license ",
                  "timedOut": false,
                  "duration": 184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerPILTerms({\n    defaultMintingFee: 0,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    transferable: false,\n    royaltyPolicy: viem_1.zeroAddress,\n    commercialUse: false,\n    commercialAttribution: false,\n    commercializerChecker: viem_1.zeroAddress,\n    commercializerCheckerData: \"0x\",\n    commercialRevShare: 0,\n    derivativesAllowed: false,\n    derivativesAttribution: false,\n    derivativesApproval: false,\n    derivativesReciprocal: false,\n    uri: \"\",\n    expiration: \"\",\n    commercialRevCeiling: 0n,\n    derivativeRevCeiling: 0n,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "333e8285-cedd-4d54-a0e6-afcd77722ea3",
                  "parentUUID": "511f8614-558e-4a3c-b1d4-c6e34498b995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with non commercial social remixing PIL",
                  "fullTitle": "License Functions register license with different types should register license with non commercial social remixing PIL",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerNonComSocialRemixingPIL();\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "40e6d7e4-8388-4261-b701-631f589ae8d4",
                  "parentUUID": "511f8614-558e-4a3c-b1d4-c6e34498b995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with commercial use",
                  "fullTitle": "License Functions register license with different types should register license with commercial use",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCommercialUsePIL({\n    defaultMintingFee: 1n,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "fb1fc549-fef7-492f-a7c7-a957592737ea",
                  "parentUUID": "511f8614-558e-4a3c-b1d4-c6e34498b995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with commercial Remix use",
                  "fullTitle": "License Functions register license with different types should register license with commercial Remix use",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 1n,\n    commercialRevShare: 100,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "d38d099c-d057-4fd1-803c-6aa41323f22a",
                  "parentUUID": "511f8614-558e-4a3c-b1d4-c6e34498b995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register license with creative commons attribution PIL",
                  "fullTitle": "License Functions register license with different types should register license with creative commons attribution PIL",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.registerCreativeCommonsAttributionPIL({\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    royaltyPolicyAddress: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n});\n(0, chai_1.expect)(result.licenseTermsId).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "97261605-139e-4d9d-a89d-c6888c4f6144",
                  "parentUUID": "511f8614-558e-4a3c-b1d4-c6e34498b995",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "333e8285-cedd-4d54-a0e6-afcd77722ea3",
                "40e6d7e4-8388-4261-b701-631f589ae8d4",
                "fb1fc549-fef7-492f-a7c7-a957592737ea",
                "d38d099c-d057-4fd1-803c-6aa41323f22a",
                "97261605-139e-4d9d-a89d-c6888c4f6144"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 565,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
              "title": "attach License Terms and mint license tokens",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"attach License Terms and mint license tokens\"",
                  "fullTitle": "License Functions attach License Terms and mint license tokens \"before all\" hook in \"attach License Terms and mint license tokens\"",
                  "timedOut": false,
                  "duration": 10997,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tokenId = await (0, util_1.getTokenId)();\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nconst mockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\nawait mockERC20.approve(generated_1.licensingModuleAddress[util_1.aeneid], viem_1.maxUint256);\nipId = registerResult.ipId;\nconst registerLicenseResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 0,\n    commercialRevShare: 100,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\nlicenseId = registerLicenseResult.licenseTermsId;\nconst paidLicenseResult = await client.license.registerCommercialRemixPIL({\n    defaultMintingFee: 100n,\n    commercialRevShare: 10,\n    currency: common_1.WIP_TOKEN_ADDRESS,\n});\npaidLicenseId = paidLicenseResult.licenseTermsId;",
                  "err": {},
                  "uuid": "16e5119c-8bbb-4ba3-8e5b-40fde789c21c",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should attach License Terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should attach License Terms",
                  "timedOut": false,
                  "duration": 5228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "da4369f4-1f12-4729-890e-203255313756",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to attach another license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should be able to attach another license terms",
                  "timedOut": false,
                  "duration": 5225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: paidLicenseId,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "02a3d62e-fbc9-4706-8051-3dcae0296332",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with ip owner",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with ip owner",
                  "timedOut": false,
                  "duration": 5394,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseId,\n    licensorIpId: ipId,\n    maxMintingFee: 1n,\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "643434f7-905a-4983-8216-708d49628543",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with non ip owner",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with non ip owner",
                  "timedOut": false,
                  "duration": 20544,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// register ip with another wallet account\nconst tokenIdB = await (0, util_1.getTokenId)();\nconst registerResult = await clientB.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenIdB,\n});\nconst ipIdB = registerResult.ipId;\n// attach license terms to the ip\nawait client.license.attachLicenseTerms({\n    ipId: ipIdB,\n    licenseTermsId: licenseId,\n});\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: licenseId,\n    licensorIpId: ipIdB,\n    maxMintingFee: 1n,\n    maxRevenueShare: \"100\",\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "9698a4c2-b098-4fb6-b66d-fd9394e2bf09",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license token with default license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license token with default license terms",
                  "timedOut": false,
                  "duration": 5366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// get default license terms id\nconst licenseRegistryReadOnlyClient = new generated_1.LicenseRegistryReadOnlyClient(util_1.publicClient);\nconst { licenseTermsId: defaultLicenseTermsId } = await licenseRegistryReadOnlyClient.getDefaultLicenseTerms();\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: defaultLicenseTermsId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 1,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.licenseTokenIds).to.be.a(\"array\");",
                  "err": {},
                  "uuid": "f86141eb-342c-4527-8c17-f1bd73dc6a5d",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint license tokens with fee and pay with IP",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should mint license tokens with fee and pay with IP",
                  "timedOut": false,
                  "duration": 5917,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst result = await client.license.mintLicenseTokens({\n    licenseTermsId: paidLicenseId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 50,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 100n));",
                  "err": {},
                  "uuid": "4d40627a-cfe6-44fa-bc34-bdbb96b232ef",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get license terms",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should get license terms",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.getLicenseTerms(licenseId);\n(0, chai_1.expect)(result).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "15ed011d-b45b-49e0-8160-79990a92cff9",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should predict minting license fee",
                  "fullTitle": "License Functions attach License Terms and mint license tokens should predict minting license fee",
                  "timedOut": false,
                  "duration": 274,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await client.license.predictMintingLicenseFee({\n    licenseTermsId: licenseId,\n    licensorIpId: ipId,\n    amount: 1,\n});\n(0, chai_1.expect)(result.currencyToken).to.be.a(\"string\");\n(0, chai_1.expect)(result.tokenAmount).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "40911bd7-b288-4fef-8dbc-6a65ee60cedb",
                  "parentUUID": "8527c66b-0be6-4807-be56-bfdf448e6a4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "d76dd528-d023-487d-994a-348ce173d06d",
                  "title": "licensing config and max license tokens",
                  "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
                  "file": "/test/integration/license.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should set licensing config",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should set licensing config",
                      "timedOut": false,
                      "duration": 5159,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.setLicensingConfig({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n    licensingConfig,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "424f4742-6daf-4968-b24d-ec676d790045",
                      "parentUUID": "d76dd528-d023-487d-994a-348ce173d06d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should get licensing config",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should get licensing config",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.getLicensingConfig({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n});\n(0, chai_1.expect)(result).to.deep.equal(licensingConfig);",
                      "err": {},
                      "uuid": "d1a99345-2ce1-4f4c-8eef-45433afd18ab",
                      "parentUUID": "d76dd528-d023-487d-994a-348ce173d06d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should set max license tokens",
                      "fullTitle": "License Functions attach License Terms and mint license tokens licensing config and max license tokens should set max license tokens",
                      "timedOut": false,
                      "duration": 10218,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = await client.license.setMaxLicenseTokens({\n    ipId: ipId,\n    licenseTermsId: licenseId,\n    maxLicenseTokens: 100,\n});\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");",
                      "err": {},
                      "uuid": "eebc3ecf-135d-4b4c-a29c-b94ea486ae3f",
                      "parentUUID": "d76dd528-d023-487d-994a-348ce173d06d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "424f4742-6daf-4968-b24d-ec676d790045",
                    "d1a99345-2ce1-4f4c-8eef-45433afd18ab",
                    "eebc3ecf-135d-4b4c-a29c-b94ea486ae3f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 15471,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "da4369f4-1f12-4729-890e-203255313756",
                "02a3d62e-fbc9-4706-8051-3dcae0296332",
                "643434f7-905a-4983-8216-708d49628543",
                "9698a4c2-b098-4fb6-b66d-fd9394e2bf09",
                "f86141eb-342c-4527-8c17-f1bd73dc6a5d",
                "4d40627a-cfe6-44fa-bc34-bdbb96b232ef",
                "15ed011d-b45b-49e0-8160-79990a92cff9",
                "40911bd7-b288-4fef-8dbc-6a65ee60cedb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48038,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5e6e1ab6-6c82-4d3f-8068-0e46d57a34f6",
              "title": "Creative Commons Attribution License Tests",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/license.test.ts",
              "file": "/test/integration/license.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Creative Commons Attribution License Tests\"",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests \"before all\" hook in \"Creative Commons Attribution License Tests\"",
                  "timedOut": false,
                  "duration": 10130,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tokenId = await (0, util_1.getTokenId)();\n// Register an IP asset\nconst registerResult = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = registerResult.ipId;\n// Create a Creative Commons Attribution license\nconst ccLicenseResult = await client.license.registerCreativeCommonsAttributionPIL({\n    currency: common_1.WIP_TOKEN_ADDRESS,\n    royaltyPolicyAddress: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n});\nccLicenseTermsId = ccLicenseResult.licenseTermsId;",
                  "err": {},
                  "uuid": "c37fd828-cc06-4e14-9464-023a787abec1",
                  "parentUUID": "5e6e1ab6-6c82-4d3f-8068-0e46d57a34f6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify the license terms match Creative Commons Attribution specifications",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should verify the license terms match Creative Commons Attribution specifications",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const licenseTerms = await client.license.getLicenseTerms(ccLicenseTermsId);\n(0, chai_1.expect)(licenseTerms.terms.transferable).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.commercialUse).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesAllowed).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesAttribution).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesReciprocal).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.derivativesApproval).to.equal(false);\n(0, chai_1.expect)(licenseTerms.terms.commercialAttribution).to.equal(true);\n(0, chai_1.expect)(licenseTerms.terms.commercialRevShare).to.equal(0);\n(0, chai_1.expect)(licenseTerms.terms.defaultMintingFee).to.equal(0n);\n(0, chai_1.expect)(licenseTerms.terms.royaltyPolicy).to.equal(generated_1.royaltyPolicyLapAddress[util_1.aeneid]);\n(0, chai_1.expect)(licenseTerms.terms.expiration).to.equal(0n);",
                  "err": {},
                  "uuid": "81d4ff2d-333f-4e9c-8005-478e83fa4fa0",
                  "parentUUID": "5e6e1ab6-6c82-4d3f-8068-0e46d57a34f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should attach Creative Commons Attribution license to an IP",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should attach Creative Commons Attribution license to an IP",
                  "timedOut": false,
                  "duration": 5290,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attachResult = await client.license.attachLicenseTerms({\n    ipId: ipId,\n    licenseTermsId: ccLicenseTermsId,\n});\n(0, chai_1.expect)(attachResult.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(attachResult.success).to.equal(true);\nconst licenseRegistryReadOnlyClient = new generated_1.LicenseRegistryReadOnlyClient(util_1.publicClient);\nconst hasLicense = await licenseRegistryReadOnlyClient.hasIpAttachedLicenseTerms({\n    ipId: ipId,\n    licenseTemplate: client.ipAsset.licenseTemplateClient.address,\n    licenseTermsId: ccLicenseTermsId,\n});\n(0, chai_1.expect)(hasLicense).to.equal(true);",
                  "err": {},
                  "uuid": "76667881-6f2c-4b91-b4cf-0c53c8a5078c",
                  "parentUUID": "5e6e1ab6-6c82-4d3f-8068-0e46d57a34f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should mint CC-BY license tokens with no minting fee",
                  "fullTitle": "License Functions Creative Commons Attribution License Tests should mint CC-BY license tokens with no minting fee",
                  "timedOut": false,
                  "duration": 5801,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Get wallet balance before minting\nconst balanceBefore = await client.getWalletBalance();\n// Predict the minting fee (should be zero for CC-BY)\nconst feePredict = await client.license.predictMintingLicenseFee({\n    licenseTermsId: ccLicenseTermsId,\n    licensorIpId: ipId,\n    amount: 1,\n});\n// CC-BY licenses should have zero minting fee\n(0, chai_1.expect)(feePredict.tokenAmount).to.equal(0n);\nconst mintResult = await client.license.mintLicenseTokens({\n    licenseTermsId: ccLicenseTermsId,\n    licensorIpId: ipId,\n    maxMintingFee: 0n,\n    maxRevenueShare: 0,\n});\n(0, chai_1.expect)(mintResult.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(mintResult.licenseTokenIds).to.be.a(\"array\");\nconst balanceAfter = await client.getWalletBalance();\n// Verify no fee was charged just gas\n// This checks that any difference is very small (just gas costs)\nconst balanceDiff = balanceBefore - balanceAfter;\nconst gasUsed = mintResult.receipt.gasUsed;\nconst effectiveGasPrice = mintResult.receipt.effectiveGasPrice;\nconst totalGas = gasUsed * effectiveGasPrice;\n// Confirms the balance diff only reflects gas cost, since license fee is zero.\n(0, chai_1.expect)(balanceDiff).to.equal(totalGas); // Small amount for gas",
                  "err": {},
                  "uuid": "79908e8c-0463-4281-afe1-511e2f179ae1",
                  "parentUUID": "5e6e1ab6-6c82-4d3f-8068-0e46d57a34f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81d4ff2d-333f-4e9c-8005-478e83fa4fa0",
                "76667881-6f2c-4b91-b4cf-0c53c8a5078c",
                "79908e8c-0463-4281-afe1-511e2f179ae1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11182,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e322ca57-9999-4d16-9345-8c3327e3b765",
          "title": "nftClient Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
          "file": "/test/integration/nftClient.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"nftClient Functions\"",
              "fullTitle": "nftClient Functions \"before all\" hook in \"nftClient Functions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();",
              "err": {},
              "uuid": "9c01f50d-3705-46c8-894f-184cd7122692",
              "parentUUID": "e322ca57-9999-4d16-9345-8c3327e3b765",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
              "title": "createNFTCollection",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully create public nft collection with minimal params",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create public nft collection with minimal params",
                  "timedOut": false,
                  "duration": 4948,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");\n(0, chai_1.expect)(txData.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "d7bc6315-7d16-4e56-93a0-1d3f22cc888a",
                  "parentUUID": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with custom mint fee",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with custom mint fee",
                  "timedOut": false,
                  "duration": 4935,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"paid-collection\",\n    symbol: \"PAID\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFee: 10000000n,\n    mintFeeToken: generated_1.erc20Address[mockData_1.aeneid],\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");\nspgNftContract = txData.spgNftContract;",
                  "err": {},
                  "uuid": "27a45219-a3f6-46af-ac11-4ba95a99afdd",
                  "parentUUID": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create private collection",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create private collection",
                  "timedOut": false,
                  "duration": 4951,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"private-collection\",\n    symbol: \"PRIV\",\n    maxSupply: 100,\n    isPublicMinting: false, // private minting\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: false, // starts closed\n    contractURI: \"test-uri\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "0b1ecd81-1cda-4620-b5df-b3c0eb55cd11",
                  "parentUUID": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with baseURI",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with baseURI",
                  "timedOut": false,
                  "duration": 4937,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"uri-collection\",\n    symbol: \"URI\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    baseURI: \"ipfs://QmTest/\",\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "311ce72d-64fa-4192-8d9d-3bf3156bcdb6",
                  "parentUUID": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully create collection with custom owner",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully create collection with custom owner",
                  "timedOut": false,
                  "duration": 9053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"owned-collection\",\n    symbol: \"OWN\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    owner: util_1.TEST_WALLET_ADDRESS,\n});\n(0, chai_1.expect)(txData.spgNftContract).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "065dfef9-22cf-4087-bca1-0c9a4c0d180d",
                  "parentUUID": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get encoded transaction data",
                  "fullTitle": "nftClient Functions createNFTCollection should successfully get encoded transaction data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txData = await client.nftClient.createNFTCollection({\n    name: \"encoded-collection\",\n    symbol: \"ENC\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    txOptions: {\n        encodedTxDataOnly: true,\n    },\n});\n(0, chai_1.expect)(txData.encodedTxData).to.be.an(\"object\");\n(0, chai_1.expect)(txData.encodedTxData?.data).to.be.a(\"string\");\n(0, chai_1.expect)(txData.encodedTxData?.to).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "53b37831-375d-4cfc-9dd6-d8f75ad3401b",
                  "parentUUID": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid mint fee token",
                  "fullTitle": "nftClient Functions createNFTCollection should fail with invalid mint fee token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.nftClient.createNFTCollection({\n    name: \"invalid-fee-collection\",\n    symbol: \"INV\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFee: 1000000000000000000n,\n    mintFeeToken: \"0x0000000000000000000000000000000000000000\",\n})).to.be.rejectedWith(\"Invalid mint fee token address\");",
                  "err": {},
                  "uuid": "e7d31a7e-a33d-4370-8c12-7f373e13b091",
                  "parentUUID": "942b1c7f-17b6-4dc5-bd0b-650b25614930",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7bc6315-7d16-4e56-93a0-1d3f22cc888a",
                "27a45219-a3f6-46af-ac11-4ba95a99afdd",
                "0b1ecd81-1cda-4620-b5df-b3c0eb55cd11",
                "311ce72d-64fa-4192-8d9d-3bf3156bcdb6",
                "065dfef9-22cf-4087-bca1-0c9a4c0d180d",
                "53b37831-375d-4cfc-9dd6-d8f75ad3401b",
                "e7d31a7e-a33d-4370-8c12-7f373e13b091"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28827,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "856cd124-f012-4083-9c4e-fe1f7d4d9146",
              "title": "Mint Fee",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully get mint fee token",
                  "fullTitle": "nftClient Functions Mint Fee should successfully get mint fee token",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintFeeToken = await client.nftClient.getMintFeeToken(spgNftContract);\n(0, chai_1.expect)(mintFeeToken).to.equal(generated_1.erc20Address[mockData_1.aeneid]);",
                  "err": {},
                  "uuid": "f7e33a3c-7155-4b8c-9ccc-f3696fc3b291",
                  "parentUUID": "856cd124-f012-4083-9c4e-fe1f7d4d9146",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should successfully get mint fee",
                  "fullTitle": "nftClient Functions Mint Fee should successfully get mint fee",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mintFee = await client.nftClient.getMintFee(spgNftContract);\n(0, chai_1.expect)(mintFee).to.equal(10000000n);",
                  "err": {},
                  "uuid": "d6cd58ea-ee62-40fa-8065-85c7f1a088d0",
                  "parentUUID": "856cd124-f012-4083-9c4e-fe1f7d4d9146",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7e33a3c-7155-4b8c-9ccc-f3696fc3b291",
                "d6cd58ea-ee62-40fa-8065-85c7f1a088d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "6adc7cd7-ca17-4c37-8619-b5c32e657b6c",
              "title": "set and get tokenURI",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully set token URI",
                  "fullTitle": "nftClient Functions set and get tokenURI should successfully set token URI",
                  "timedOut": false,
                  "duration": 14880,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup: Approve the contract for ERC20 transfers\nconst erc20Client = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[mockData_1.aeneid]);\nconst txHash = await erc20Client.approve(spgNftContract, viem_1.maxUint256);\nawait util_1.publicClient.waitForTransactionReceipt({ hash: txHash });\n// Mint a new token with initial metadata\nconst tokenId = await (0, util_1.mintBySpg)(spgNftContract, \"ipfs://QmTest/\");\n(0, chai_1.expect)(tokenId).to.be.a(\"bigint\");\n// Update the token URI\nconst updatedMetadata = \"ipfs://QmUpdated/metadata.json\";\nconst result = await client.nftClient.setTokenURI({\n    tokenId: tokenId,\n    tokenURI: updatedMetadata,\n    spgNftContract,\n});\n// Verify the transaction\n(0, chai_1.expect)(result.txHash).to.be.a(\"string\");\n// Verification that the URI was updated\nconst tokenURI = await client.nftClient.getTokenURI({\n    tokenId,\n    spgNftContract,\n});\n(0, chai_1.expect)(tokenURI).to.equal(updatedMetadata);",
                  "err": {},
                  "uuid": "a28196af-d571-4fc7-ba00-a378137f7cef",
                  "parentUUID": "6adc7cd7-ca17-4c37-8619-b5c32e657b6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a28196af-d571-4fc7-ba00-a378137f7cef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14880,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "3d5389ff-776b-4643-a81e-e7e7d0b68157",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/nftClient.test.ts",
              "file": "/test/integration/nftClient.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "fails with invalid token ID",
                  "fullTitle": "nftClient Functions Error Cases fails with invalid token ID",
                  "timedOut": false,
                  "duration": 5032,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const erc20Client = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[mockData_1.aeneid]);\nconst txHash = await erc20Client.approve(spgNftContract, viem_1.maxUint256);\nawait util_1.publicClient.waitForTransactionReceipt({ hash: txHash });\nconst invalidTokenId = 999999999999999n;\nconst updatedMetadata = \"ipfs://QmUpdated/metadata.json\";\nawait (0, chai_1.expect)(client.nftClient.setTokenURI({\n    tokenId: invalidTokenId,\n    tokenURI: updatedMetadata,\n    spgNftContract,\n})).to.be.rejectedWith(\"Failed to set token URI\");",
                  "err": {},
                  "uuid": "29397826-6970-4edc-9aae-23397c1b2b3d",
                  "parentUUID": "3d5389ff-776b-4643-a81e-e7e7d0b68157",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29397826-6970-4edc-9aae-23397c1b2b3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5032,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "44288ba2-b28e-44ae-9066-845f12dafe35",
          "title": "Permission Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
          "file": "/test/integration/permission.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Permission Functions\"",
              "fullTitle": "Permission Functions \"before all\" hook in \"Permission Functions\"",
              "timedOut": false,
              "duration": 10012,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nconst tokenId = await (0, util_1.getTokenId)();\nconst response = await client.ipAsset.register({\n    nftContract: util_1.mockERC721,\n    tokenId: tokenId,\n});\nipId = response.ipId;",
              "err": {},
              "uuid": "e98d3eba-4adb-419b-a64a-618e00a060ee",
              "parentUUID": "44288ba2-b28e-44ae-9066-845f12dafe35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a1c7518-32a9-4cce-a77e-5f4d541b421e",
              "title": "Single Permission Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set permission successfully",
                  "fullTitle": "Permission Functions Single Permission Operations should set permission successfully",
                  "timedOut": false,
                  "duration": 5006,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setPermission({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n    func: \"function setAll(address,string,bytes32,bytes32)\",\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "7c84fc70-7288-4cf0-b3b2-4bce4be3aa61",
                  "parentUUID": "6a1c7518-32a9-4cce-a77e-5f4d541b421e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set all permissions successfully",
                  "fullTitle": "Permission Functions Single Permission Operations should set all permissions successfully",
                  "timedOut": false,
                  "duration": 9189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setAllPermissions({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    permission: permission_1.AccessPermission.ALLOW,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "fe52559b-02fe-4323-aa72-ba0c7476da59",
                  "parentUUID": "6a1c7518-32a9-4cce-a77e-5f4d541b421e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c84fc70-7288-4cf0-b3b2-4bce4be3aa61",
                "fe52559b-02fe-4323-aa72-ba0c7476da59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14195,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "245e2652-3b88-4345-ade7-132e4a1234e7",
              "title": "Permission Signatures",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create set permission signature",
                  "fullTitle": "Permission Functions Permission Signatures should create set permission signature",
                  "timedOut": false,
                  "duration": 5194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.createSetPermissionSignature({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    func: \"function setAll(address,string,bytes32,bytes32)\",\n    permission: permission_1.AccessPermission.ALLOW,\n    deadline: 60000n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "95cac086-51d5-4bdb-9cd4-aa489b2c64f3",
                  "parentUUID": "245e2652-3b88-4345-ade7-132e4a1234e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95cac086-51d5-4bdb-9cd4-aa489b2c64f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5194,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "96046fdf-cc01-4f68-9d74-61b4245f063c",
              "title": "Batch Operations",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set batch permissions successfully",
                  "fullTitle": "Permission Functions Batch Operations should set batch permissions successfully",
                  "timedOut": false,
                  "duration": 5134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.setBatchPermissions({\n    permissions: [\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.ALLOW,\n            func: \"function setAll(address,string,bytes32,bytes32)\",\n        },\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.DENY,\n            func: \"function freezeMetadata(address)\",\n        },\n    ],\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "dab7f61a-8f77-4436-bc6b-de6e07410972",
                  "parentUUID": "96046fdf-cc01-4f68-9d74-61b4245f063c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should create batch permission signature",
                  "fullTitle": "Permission Functions Batch Operations should create batch permission signature",
                  "timedOut": false,
                  "duration": 9407,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.permission.createBatchPermissionSignature({\n    ipId: ipId,\n    permissions: [\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.ALLOW,\n            func: \"function setAll(address,string,bytes32,bytes32)\",\n        },\n        {\n            ipId: ipId,\n            signer: util_1.TEST_WALLET_ADDRESS,\n            to: coreMetadataModule,\n            permission: permission_1.AccessPermission.DENY,\n            func: \"function freezeMetadata(address)\",\n        },\n    ],\n    deadline: 60000n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.success).to.equal(true);",
                  "err": {},
                  "uuid": "2cac43b0-ea5b-4525-934b-3e87a2e6f03c",
                  "parentUUID": "96046fdf-cc01-4f68-9d74-61b4245f063c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dab7f61a-8f77-4436-bc6b-de6e07410972",
                "2cac43b0-ea5b-4525-934b-3e87a2e6f03c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14541,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2ed9c9cf-e7e8-4328-bfd7-0942ff90d384",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/permission.test.ts",
              "file": "/test/integration/permission.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fail when setting permission for unregistered IP",
                  "fullTitle": "Permission Functions Error Cases should fail when setting permission for unregistered IP",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.permission.setPermission({\n    ipId: unregisteredIpId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n})).to.be.rejectedWith(`IP id with ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "8471da36-7141-4f0c-b0e2-fecdb4c18631",
                  "parentUUID": "2ed9c9cf-e7e8-4328-bfd7-0942ff90d384",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail with invalid function signature",
                  "fullTitle": "Permission Functions Error Cases should fail with invalid function signature",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(client.permission.setPermission({\n    ipId: ipId,\n    signer: util_1.TEST_WALLET_ADDRESS,\n    to: coreMetadataModule,\n    permission: permission_1.AccessPermission.ALLOW,\n    func: \"invalid_function_signature\",\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "47f89cd7-b099-4056-a207-f04c5d0d631a",
                  "parentUUID": "2ed9c9cf-e7e8-4328-bfd7-0942ff90d384",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8471da36-7141-4f0c-b0e2-fecdb4c18631",
                "47f89cd7-b099-4056-a207-f04c5d0d631a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 181,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "88385844-0bce-4918-b396-d5a7404fffe4",
          "title": "Royalty Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
          "file": "/test/integration/royalty.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Royalty Functions\"",
              "fullTitle": "Royalty Functions \"before all\" hook in \"Royalty Functions\"",
              "timedOut": false,
              "duration": 32106,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();\nmockERC20 = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, generated_1.erc20Address[util_1.aeneid]);\n// Setup initial state\nparentIpId = await getIpId();\nchildIpId = await getIpId();\nlicenseTermsId = await getCommercialPolicyId();\n// Setup relationships and approvals\nawait attachLicenseTerms(parentIpId, licenseTermsId);\nawait mockERC20.mint(util_1.TEST_WALLET_ADDRESS, (0, viem_1.parseEther)(\"10\"));\nawait mockERC20.approve(generated_1.royaltyModuleAddress[util_1.aeneid], viem_1.maxUint256);\n// Register derivative\nawait client.ipAsset.registerDerivative({\n    childIpId: childIpId,\n    parentIpIds: [parentIpId],\n    licenseTermsIds: [licenseTermsId],\n    maxMintingFee: 0n,\n    maxRts: \"0\",\n    maxRevenueShare: \"0\",\n});",
              "err": {},
              "uuid": "2d90adde-8a98-4ad9-a428-71e58198142e",
              "parentUUID": "88385844-0bce-4918-b396-d5a7404fffe4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e4da1e79-0da6-4212-a9dd-39cc864ef2e3",
              "title": "Royalty Payments",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully pay royalty on behalf",
                  "fullTitle": "Royalty Functions Royalty Payments should successfully pay royalty on behalf",
                  "timedOut": false,
                  "duration": 5267,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: parentIpId,\n    payerIpId: childIpId,\n    token: generated_1.erc20Address[util_1.aeneid],\n    amount: 1,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");",
                  "err": {},
                  "uuid": "27244e99-9726-4175-9e53-9b2129cc9d6e",
                  "parentUUID": "e4da1e79-0da6-4212-a9dd-39cc864ef2e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should auto convert IP to WIP when paying WIP on behalf",
                  "fullTitle": "Royalty Functions Royalty Payments should auto convert IP to WIP when paying WIP on behalf",
                  "timedOut": false,
                  "duration": 5626,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst response = await client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: parentIpId,\n    payerIpId: childIpId,\n    token: common_1.WIP_TOKEN_ADDRESS,\n    amount: 100n,\n});\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\n(0, chai_1.expect)(Number(balanceAfter)).lessThan(Number(balanceBefore - 100n));",
                  "err": {},
                  "uuid": "70f417af-6546-4762-a52b-b2651dcf149d",
                  "parentUUID": "e4da1e79-0da6-4212-a9dd-39cc864ef2e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to pay royalty with unregistered receiver",
                  "fullTitle": "Royalty Functions Royalty Payments should fail to pay royalty with unregistered receiver",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: unregisteredIpId,\n    payerIpId: childIpId,\n    token: generated_1.erc20Address[util_1.aeneid],\n    amount: 10 * 10 ** 2,\n})).to.be.rejectedWith(`The receiver IP with id ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "887a43fa-4c03-4010-a845-3e81c8851869",
                  "parentUUID": "e4da1e79-0da6-4212-a9dd-39cc864ef2e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the royalty vault to transfer its native tokens to a wallet address",
                  "fullTitle": "Royalty Functions Royalty Payments should allow the royalty vault to transfer its native tokens to a wallet address",
                  "timedOut": false,
                  "duration": 5414,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const royaltyVaultAddress = await client.royalty.getRoyaltyVaultAddress(parentIpId);\nconst royaltyVaultToken = new token_1.ERC20Client(util_1.publicClient, util_1.walletClient, royaltyVaultAddress);\nconst transferAmount = BigInt(10 * 10 ** 6); // 10 million tokens\n// Check initial balances of the vault token\nconst initialTargetBalance = await royaltyVaultToken.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst initialParentBalance = await royaltyVaultToken.balanceOf(parentIpId);\n(0, chai_1.expect)(Number(initialParentBalance)).greaterThanOrEqual(Number(transferAmount));\nconst transferResult = await client.ipAccount.execute({\n    to: royaltyVaultAddress,\n    value: 0,\n    ipId: parentIpId,\n    data: (0, viem_1.encodeFunctionData)({\n        abi: viem_1.erc20Abi,\n        functionName: \"transfer\",\n        args: [util_1.TEST_WALLET_ADDRESS, transferAmount],\n    }),\n});\n(0, chai_1.expect)(transferResult.txHash).to.be.a(\"string\");\n// Check final balances to confirm the transfer worked\nconst finalTargetBalance = await royaltyVaultToken.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst finalParentBalance = await royaltyVaultToken.balanceOf(parentIpId);\n(0, chai_1.expect)(finalTargetBalance).to.equal(initialTargetBalance + transferAmount, \"Target wallet balance should increase by the transfer amount\");\n(0, chai_1.expect)(Number(finalParentBalance)).equal(Number(initialParentBalance - transferAmount));",
                  "err": {},
                  "uuid": "3eae8dc1-926b-449d-8815-c9ae3952e120",
                  "parentUUID": "e4da1e79-0da6-4212-a9dd-39cc864ef2e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27244e99-9726-4175-9e53-9b2129cc9d6e",
                "70f417af-6546-4762-a52b-b2651dcf149d",
                "887a43fa-4c03-4010-a845-3e81c8851869",
                "3eae8dc1-926b-449d-8815-c9ae3952e120"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16396,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "98b712e6-6b43-42d1-91e3-a224485e6432",
              "title": "Revenue Queries",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return claimable revenue amount",
                  "fullTitle": "Royalty Functions Revenue Queries should return claimable revenue amount",
                  "timedOut": false,
                  "duration": 266,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.claimableRevenue({\n    ipId: parentIpId,\n    claimer: util_1.TEST_WALLET_ADDRESS,\n    token: generated_1.erc20Address[util_1.aeneid],\n});\n(0, chai_1.expect)(response).to.be.a(\"bigint\");",
                  "err": {},
                  "uuid": "34381c1f-87e7-4f65-8f21-1ab3f3f87861",
                  "parentUUID": "98b712e6-6b43-42d1-91e3-a224485e6432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to get royalty vault address for unregistered IP",
                  "fullTitle": "Royalty Functions Revenue Queries should fail to get royalty vault address for unregistered IP",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unregisteredIpId = \"0x1234567890123456789012345678901234567890\";\nawait (0, chai_1.expect)(client.royalty.getRoyaltyVaultAddress(unregisteredIpId)).to.be.rejectedWith(`The royalty vault IP with id ${unregisteredIpId} is not registered.`);",
                  "err": {},
                  "uuid": "d865bf37-1a2f-4d72-80bf-b08974155651",
                  "parentUUID": "98b712e6-6b43-42d1-91e3-a224485e6432",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34381c1f-87e7-4f65-8f21-1ab3f3f87861",
                "d865bf37-1a2f-4d72-80bf-b08974155651"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 358,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "07dddcfc-ab6b-4ba8-b2c2-18ede1b52a63",
              "title": "Error Cases",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return zero for claimable revenue with invalid token",
                  "fullTitle": "Royalty Functions Error Cases should return zero for claimable revenue with invalid token",
                  "timedOut": false,
                  "duration": 264,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await client.royalty.claimableRevenue({\n    ipId: parentIpId,\n    claimer: util_1.TEST_WALLET_ADDRESS,\n    token: \"0x0000000000000000000000000000000000000000\",\n});\n(0, chai_1.expect)(response).to.equal(0n);",
                  "err": {},
                  "uuid": "ae84b34f-5a5a-4219-b6aa-970d62523860",
                  "parentUUID": "07dddcfc-ab6b-4ba8-b2c2-18ede1b52a63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae84b34f-5a5a-4219-b6aa-970d62523860"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 264,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2051c52b-2729-4d21-a1c5-e40756c957ad",
              "title": "ClaimAllRevenue With WIP",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"ClaimAllRevenue With WIP\"",
                  "fullTitle": "Royalty Functions ClaimAllRevenue With WIP \"before all\" hook in \"ClaimAllRevenue With WIP\"",
                  "timedOut": false,
                  "duration": 29030,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// set up\n// minting Fee: 100, 10% LAP rev share, A expect to get 120 WIP\n// A -> B -> C -> D\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"free-collection\",\n    symbol: \"FREE\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: viem_1.zeroAddress,\n});\nspgNftContract = txData.spgNftContract;\nconst retA = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 100n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 100n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nipA = retA.ipId;\nlicenseId = retA.licenseTermsIds[0];\nconst retB = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipA],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\nipB = retB.ipId;\nconst retC = await client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipB],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});\nipC = retC.ipId;\nawait client.ipAsset.mintAndRegisterIpAndMakeDerivative({\n    spgNftContract,\n    derivData: {\n        parentIpIds: [ipC],\n        licenseTermsIds: [licenseId],\n        maxMintingFee: 0n,\n        maxRts: common_1.MAX_ROYALTY_TOKEN,\n        maxRevenueShare: 100,\n    },\n});",
                  "err": {},
                  "uuid": "121c6cf9-699e-40f2-a2d6-27229ed4b834",
                  "parentUUID": "2051c52b-2729-4d21-a1c5-e40756c957ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should claim all revenue",
                  "fullTitle": "Royalty Functions ClaimAllRevenue With WIP should claim all revenue",
                  "timedOut": false,
                  "duration": 14861,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ret = await client.royalty.claimAllRevenue({\n    ancestorIpId: ipA,\n    claimer: ipA,\n    childIpIds: [ipB, ipC],\n    royaltyPolicies: [generated_1.royaltyPolicyLapAddress[util_1.aeneid], generated_1.royaltyPolicyLapAddress[util_1.aeneid]],\n    currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n});\n(0, chai_1.expect)(ret.txHashes).to.be.an(\"array\");\n(0, chai_1.expect)(ret.claimedTokens[0].amount).to.equal(120n);",
                  "err": {},
                  "uuid": "423cf01b-db05-4d8f-b333-915442b7d691",
                  "parentUUID": "2051c52b-2729-4d21-a1c5-e40756c957ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "423cf01b-db05-4d8f-b333-915442b7d691"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14861,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4e42b53e-3412-431d-b98a-501e45e777bf",
              "title": "BatchClaimAllRevenue With WIP",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/royalty.test.ts",
              "file": "/test/integration/royalty.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"BatchClaimAllRevenue With WIP\"",
                  "fullTitle": "Royalty Functions BatchClaimAllRevenue With WIP \"before all\" hook in \"BatchClaimAllRevenue With WIP\"",
                  "timedOut": false,
                  "duration": 50020,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nanotherAddress = derivedClient.address;\nawait client.wipClient.deposit({\n    amount: (0, viem_1.parseEther)(\"5\"),\n});\n/**\n * Asset Hierarchy Setup for Revenue Collection Tests\n *\n * Overview:\n * This test setup creates two distinct IP asset hierarchies (IpA and IpB) to demonstrate\n * different revenue collection scenarios using LAP (Licensing Agreement Policy) and LRP\n * (Licensing Revenue Policy) respectively.\n *\n * IpA Hierarchy (LAP - Licensing Agreement Policy):                           IpB Hierarchy (LRP - Licensing Revenue Policy):\n * ┌─────────────────────────────────────────────────────────────┐          ┌─────────────────────────────────────────────────────────────┐\n * │ IpA (Parent) - Total Expected Revenue: 130 WIP              │          │ IpB (Parent) - Total Expected Revenue: 330 WIP              │\n * ├─────────────────────────────────────────────────────────────┤          ├─────────────────────────────────────────────────────────────┤\n * │ Revenue Sources:                                            │          │ Revenue Sources:                                            │\n * │ ├── Minting Fee: 100 WIP                                    │          │ ├── Minting Fee: 150 WIP                                    │\n * │ ├── Revenue Share (ipA2->ipA1): 10 WIP (10% LAP)            │          │ ├── LRP Revenue Share: 10%                                  │\n * │ ├── Revenue Share (ipA3->ipA2): 10 WIP (10% LAP)            │          │ ├── Total Revenue: 330 WIP                                  │\n * │ └── Direct Payment (ipA3): 10 WIP (10% LAP)                 │          │    └── From ipB1: 150 WIP + 10% revenue share               │\n * │                                                             │          │    └── From ipB2: 150 WIP + 10% revenue share               │\n * │                                                             │          │                                                             │\n * | Ownership Distribution:                                     │          |                                                             │\n * │ ├── Wallet Address: 50%  65 WIP                             │          │ Revenue Flow:                                               │\n * │ └── Another Address: 50% 65 WIP                             │          │ ipB3                                                        │\n * │                                                             │          │ ├── ipB1 ─┐                                                 │\n * │ Revenue Flow:                                               │          │ └── ipB2 ─┴──> ipB (collects 330 WIP)                       │\n * │ ipA3                                                        │          │                                                             │\n * │  └──> ipA2 (20% LAP) ──> ipA1 (10% LAP) ──> ipA             │          │                                                             │\n * │       └──> Direct Payment: 100 WIP                          │          │                                                             │\n * └─────────────────────────────────────────────────────────────┘          └─────────────────────────────────────────────────────────────┘\n */\nconst txData = await client.nftClient.createNFTCollection({\n    name: \"free-collection\",\n    symbol: \"FREE\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: viem_1.zeroAddress,\n});\nspgNftContract = txData.spgNftContract;\n// 1. Register ipA\nconst ret1A = await client.ipAsset.mintAndRegisterIpAndAttachPilTermsAndDistributeRoyaltyTokens({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLapAddress[util_1.aeneid],\n                defaultMintingFee: 100n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 100n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n    royaltyShares: [\n        {\n            recipient: util_1.TEST_WALLET_ADDRESS,\n            percentage: 50,\n        },\n        {\n            recipient: anotherAddress,\n            percentage: 50,\n        },\n    ],\n});\nipA = ret1A.ipId;\nlicenseId = ret1A.licenseTermsIds[0];\n// 2. Register ipB\nconst ret1B = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n    spgNftContract,\n    licenseTermsData: [\n        {\n            terms: {\n                transferable: true,\n                royaltyPolicy: generated_1.royaltyPolicyLrpAddress[util_1.aeneid],\n                defaultMintingFee: 150n,\n                expiration: 0n,\n                commercialUse: true,\n                commercialAttribution: false,\n                commercializerChecker: viem_1.zeroAddress,\n                commercializerCheckerData: viem_1.zeroAddress,\n                commercialRevShare: 10,\n                commercialRevCeiling: 0n,\n                derivativesAllowed: true,\n                derivativesAttribution: true,\n                derivativesApproval: false,\n                derivativesReciprocal: true,\n                derivativeRevCeiling: 0n,\n                currency: common_1.WIP_TOKEN_ADDRESS,\n                uri: \"\",\n            },\n            licensingConfig: {\n                isSet: false,\n                mintingFee: 150n,\n                licensingHook: viem_1.zeroAddress,\n                hookData: viem_1.zeroAddress,\n                commercialRevShare: 0,\n                disabled: false,\n                expectMinimumGroupRewardShare: 0,\n                expectGroupRewardPool: viem_1.zeroAddress,\n            },\n        },\n    ],\n});\nipB = ret1B.ipId;\nlicenseId1 = ret1B.licenseTermsIds[0];\n// 3. Register ipA1 from ipA and ipB1 from ipB\nconst { results: ret2 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB],\n                licenseTermsIds: [licenseId1],\n            },\n        },\n    ],\n});\nipA1 = ret2[0].ipId;\nipB1 = ret2[1].ipId;\n// 4. Register ipA2 from ipA1 and ipB2 from ipB\nconst { results: ret3 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA1],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB],\n                licenseTermsIds: [licenseId1],\n            },\n        },\n    ],\n});\nipA2 = ret3[0].ipId;\nipB2 = ret3[1].ipId;\n// 5. Register ipA3 from ipA2 and ipB3 from ipB1 and ipB2\nconst { results: ret4 } = await client.ipAsset.batchMintAndRegisterIpAndMakeDerivative({\n    args: [\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipA2],\n                licenseTermsIds: [licenseId],\n            },\n        },\n        {\n            spgNftContract,\n            derivData: {\n                parentIpIds: [ipB1, ipB2],\n                licenseTermsIds: [licenseId1, licenseId1],\n            },\n        },\n    ],\n});\nipA3 = ret4[0].ipId;\n// 6. Pay royalty on behalf of ipA2 to ipA3\nawait client.royalty.payRoyaltyOnBehalf({\n    receiverIpId: ipA2,\n    payerIpId: ipA3,\n    token: common_1.WIP_TOKEN_ADDRESS,\n    amount: 100n,\n});\nconst balance = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nawait client.wipClient.withdraw({\n    amount: balance,\n});",
                  "err": {},
                  "uuid": "be15dcf0-102f-48de-b704-c2341db83d1c",
                  "parentUUID": "4e42b53e-3412-431d-b98a-501e45e777bf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should batch claim all revenue",
                  "fullTitle": "Royalty Functions BatchClaimAllRevenue With WIP should batch claim all revenue",
                  "timedOut": false,
                  "duration": 15341,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const anotherAddressWipBalanceBefore = await client.wipClient.balanceOf(anotherAddress);\nconst result = await client.royalty.batchClaimAllRevenue({\n    ancestorIps: [\n        {\n            ipId: ipA,\n            claimer: util_1.TEST_WALLET_ADDRESS,\n            childIpIds: [ipA1, ipA2],\n            royaltyPolicies: [generated_1.royaltyPolicyLapAddress[util_1.aeneid], generated_1.royaltyPolicyLapAddress[util_1.aeneid]],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n        },\n        {\n            ipId: ipA,\n            claimer: anotherAddress,\n            childIpIds: [],\n            royaltyPolicies: [],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS],\n        },\n        {\n            ipId: ipB,\n            claimer: ipB,\n            childIpIds: [ipB1, ipB2],\n            royaltyPolicies: [generated_1.royaltyPolicyLrpAddress[util_1.aeneid], generated_1.royaltyPolicyLrpAddress[util_1.aeneid]],\n            currencyTokens: [common_1.WIP_TOKEN_ADDRESS, common_1.WIP_TOKEN_ADDRESS],\n        },\n    ],\n});\nconst anotherAddressWipBalanceAfter = await client.wipClient.balanceOf(anotherAddress);\nconst walletWipBalanceAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(result.txHashes).to.be.an(\"array\");\n(0, chai_1.expect)(result.claimedTokens[0].amount).to.equal(65n);\n(0, chai_1.expect)(result.claimedTokens[1].amount).to.equal(65n);\n(0, chai_1.expect)(result.claimedTokens[2].amount).to.equal(330n);\n(0, chai_1.expect)(walletWipBalanceAfter).to.equal(0n);\n(0, chai_1.expect)(anotherAddressWipBalanceAfter).to.equal(anotherAddressWipBalanceBefore + 65n);\n// Note: The final wallet balance cannot be precisely calculated because:\n// The test involves multiple transactions (claimAllRevenue, token transfers, etc.)\n// batchClaimAllRevenue only returns receipts for claimAllRevenue calls\n// Additional gas costs and token transfers occur outside the returned receipts",
                  "err": {},
                  "uuid": "013782be-f3f2-4525-afd0-f7ee1a1793fd",
                  "parentUUID": "4e42b53e-3412-431d-b98a-501e45e777bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "013782be-f3f2-4525-afd0-f7ee1a1793fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "54f7efb2-fe4e-4b2a-96cd-19ac0de6abaf",
          "title": "WIP Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
          "file": "/test/integration/wip.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WIP Functions\"",
              "fullTitle": "WIP Functions \"before all\" hook in \"WIP Functions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "client = (0, util_1.getStoryClient)();",
              "err": {},
              "uuid": "52f9ab81-5656-4d23-9d6c-81b28bb397c3",
              "parentUUID": "54f7efb2-fe4e-4b2a-96cd-19ac0de6abaf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c7b4f31c-8c9a-4696-a11d-e275b510f39f",
              "title": "deposit",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should deposit 0.01 WIP",
                  "fullTitle": "WIP Functions deposit should deposit 0.01 WIP",
                  "timedOut": false,
                  "duration": 5219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ipAmt = (0, viem_1.parseEther)(\"0.01\");\nconst balanceBefore = await client.getWalletBalance();\nconst wipBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst rsp = await client.wipClient.deposit({\n    amount: ipAmt,\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\nconst balanceAfter = await client.getWalletBalance();\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.equal(wipBefore + ipAmt);\nconst gasCost = rsp.receipt.gasUsed * rsp.receipt.effectiveGasPrice;\n(0, chai_1.expect)(balanceAfter).to.equal(balanceBefore - ipAmt - gasCost);",
                  "err": {},
                  "uuid": "14a73ba2-92a9-43e2-8b67-74601cc1e676",
                  "parentUUID": "c7b4f31c-8c9a-4696-a11d-e275b510f39f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14a73ba2-92a9-43e2-8b67-74601cc1e676"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5219,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2bebac4f-f50f-4ac7-8ef7-19a89d45be73",
              "title": "transfer",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should transfer WIP",
                  "fullTitle": "WIP Functions transfer should transfer WIP",
                  "timedOut": false,
                  "duration": 4885,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rsp = await client.wipClient.transfer({\n    to: util_1.TEST_WALLET_ADDRESS,\n    amount: (0, viem_1.parseEther)(\"0.01\"),\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\n//Due to approve cannot approve msy.sender, so skip transferFrom test",
                  "err": {},
                  "uuid": "7dec2b7a-e853-4739-8c76-76ade55af197",
                  "parentUUID": "2bebac4f-f50f-4ac7-8ef7-19a89d45be73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7dec2b7a-e853-4739-8c76-76ade55af197"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4885,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c2cb0e49-faa1-4d40-acca-39784ab8e459",
              "title": "withdraw",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/wip.test.ts",
              "file": "/test/integration/wip.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should withdrawal WIP",
                  "fullTitle": "WIP Functions withdraw should withdrawal WIP",
                  "timedOut": false,
                  "duration": 5221,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const balanceBefore = await client.getWalletBalance();\nconst wipBefore = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\nconst rsp = await client.wipClient.withdraw({\n    amount: wipBefore,\n});\n(0, chai_1.expect)(rsp.txHash).to.be.a(\"string\");\nconst wipAfter = await client.wipClient.balanceOf(util_1.TEST_WALLET_ADDRESS);\n(0, chai_1.expect)(wipAfter).to.equal(0n);\nconst balanceAfter = await client.getWalletBalance();\nconst gasCost = rsp.receipt.gasUsed * rsp.receipt.effectiveGasPrice;\n(0, chai_1.expect)(balanceAfter).to.equal(balanceBefore + wipBefore - gasCost);",
                  "err": {},
                  "uuid": "1fba71c1-4216-484a-8818-c8884fcf9f32",
                  "parentUUID": "c2cb0e49-faa1-4d40-acca-39784ab8e459",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fba71c1-4216-484a-8818-c8884fcf9f32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5221,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}